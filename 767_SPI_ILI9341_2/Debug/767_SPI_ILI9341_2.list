
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c040  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025fe0  0800c240  0800c240  0001c240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08032220  08032220  000501d8  2**0
                  CONTENTS
  4 .ARM          00000008  08032220  08032220  00042220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08032228  08032228  000501d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08032228  08032228  00042228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803222c  0803222c  0004222c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08032230  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dc8  200001d8  08032408  000501d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fa0  08032408  00050fa0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000501d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00050206  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ba31  00000000  00000000  00050249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000434b  00000000  00000000  0006bc7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001788  00000000  00000000  0006ffc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001236  00000000  00000000  00071750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c939  00000000  00000000  00072986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021ccd  00000000  00000000  0009f2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107dd3  00000000  00000000  000c0f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007138  00000000  00000000  001c8d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001cfe98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c228 	.word	0x0800c228

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	0800c228 	.word	0x0800c228

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fe:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000600:	4a36      	ldr	r2, [pc, #216]	; (80006dc <MX_ADC1_Init+0xf0>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000604:	4b34      	ldr	r3, [pc, #208]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000606:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800060a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060c:	4b32      	ldr	r3, [pc, #200]	; (80006d8 <MX_ADC1_Init+0xec>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000612:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000614:	2201      	movs	r2, #1
 8000616:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000618:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <MX_ADC1_Init+0xec>)
 800061a:	2201      	movs	r2, #1
 800061c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000626:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <MX_ADC1_Init+0xec>)
 800062e:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <MX_ADC1_Init+0xf4>)
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <MX_ADC1_Init+0xec>)
 800063a:	2204      	movs	r2, #4
 800063c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800063e:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000640:	2201      	movs	r2, #1
 8000642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000646:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064c:	4822      	ldr	r0, [pc, #136]	; (80006d8 <MX_ADC1_Init+0xec>)
 800064e:	f002 fedb 	bl	8003408 <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000658:	f001 f932 	bl	80018c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800065c:	2304      	movs	r3, #4
 800065e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000660:	2301      	movs	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000664:	2301      	movs	r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	481a      	ldr	r0, [pc, #104]	; (80006d8 <MX_ADC1_Init+0xec>)
 800066e:	f003 f827 	bl	80036c0 <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000678:	f001 f922 	bl	80018c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800067c:	2305      	movs	r3, #5
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000680:	2302      	movs	r3, #2
 8000682:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	4619      	mov	r1, r3
 8000688:	4813      	ldr	r0, [pc, #76]	; (80006d8 <MX_ADC1_Init+0xec>)
 800068a:	f003 f819 	bl	80036c0 <HAL_ADC_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000694:	f001 f914 	bl	80018c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000698:	2306      	movs	r3, #6
 800069a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800069c:	2303      	movs	r3, #3
 800069e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	4619      	mov	r1, r3
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <MX_ADC1_Init+0xec>)
 80006a6:	f003 f80b 	bl	80036c0 <HAL_ADC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80006b0:	f001 f906 	bl	80018c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006b4:	230a      	movs	r3, #10
 80006b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006b8:	2304      	movs	r3, #4
 80006ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_ADC1_Init+0xec>)
 80006c2:	f002 fffd 	bl	80036c0 <HAL_ADC_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80006cc:	f001 f8f8 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200001f4 	.word	0x200001f4
 80006dc:	40012000 	.word	0x40012000
 80006e0:	0f000001 	.word	0x0f000001

080006e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a39      	ldr	r2, [pc, #228]	; (80007e8 <HAL_ADC_MspInit+0x104>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d16b      	bne.n	80007de <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000706:	4b39      	ldr	r3, [pc, #228]	; (80007ec <HAL_ADC_MspInit+0x108>)
 8000708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070a:	4a38      	ldr	r2, [pc, #224]	; (80007ec <HAL_ADC_MspInit+0x108>)
 800070c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000710:	6453      	str	r3, [r2, #68]	; 0x44
 8000712:	4b36      	ldr	r3, [pc, #216]	; (80007ec <HAL_ADC_MspInit+0x108>)
 8000714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b33      	ldr	r3, [pc, #204]	; (80007ec <HAL_ADC_MspInit+0x108>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a32      	ldr	r2, [pc, #200]	; (80007ec <HAL_ADC_MspInit+0x108>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b30      	ldr	r3, [pc, #192]	; (80007ec <HAL_ADC_MspInit+0x108>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <HAL_ADC_MspInit+0x108>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a2c      	ldr	r2, [pc, #176]	; (80007ec <HAL_ADC_MspInit+0x108>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b2a      	ldr	r3, [pc, #168]	; (80007ec <HAL_ADC_MspInit+0x108>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800074e:	2301      	movs	r3, #1
 8000750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000752:	2303      	movs	r3, #3
 8000754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	4823      	ldr	r0, [pc, #140]	; (80007f0 <HAL_ADC_MspInit+0x10c>)
 8000762:	f003 ff2b 	bl	80045bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000766:	2370      	movs	r3, #112	; 0x70
 8000768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800076a:	2303      	movs	r3, #3
 800076c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	481e      	ldr	r0, [pc, #120]	; (80007f4 <HAL_ADC_MspInit+0x110>)
 800077a:	f003 ff1f 	bl	80045bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800077e:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <HAL_ADC_MspInit+0x114>)
 8000780:	4a1e      	ldr	r2, [pc, #120]	; (80007fc <HAL_ADC_MspInit+0x118>)
 8000782:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000784:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <HAL_ADC_MspInit+0x114>)
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <HAL_ADC_MspInit+0x114>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000790:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <HAL_ADC_MspInit+0x114>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <HAL_ADC_MspInit+0x114>)
 8000798:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800079c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <HAL_ADC_MspInit+0x114>)
 80007a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_ADC_MspInit+0x114>)
 80007a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_ADC_MspInit+0x114>)
 80007b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007b4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <HAL_ADC_MspInit+0x114>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <HAL_ADC_MspInit+0x114>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007c2:	480d      	ldr	r0, [pc, #52]	; (80007f8 <HAL_ADC_MspInit+0x114>)
 80007c4:	f003 fb60 	bl	8003e88 <HAL_DMA_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 80007ce:	f001 f877 	bl	80018c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <HAL_ADC_MspInit+0x114>)
 80007d6:	639a      	str	r2, [r3, #56]	; 0x38
 80007d8:	4a07      	ldr	r2, [pc, #28]	; (80007f8 <HAL_ADC_MspInit+0x114>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40012000 	.word	0x40012000
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020800 	.word	0x40020800
 80007f4:	40020000 	.word	0x40020000
 80007f8:	2000023c 	.word	0x2000023c
 80007fc:	40026410 	.word	0x40026410

08000800 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_DMA_Init+0x48>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a0f      	ldr	r2, [pc, #60]	; (8000848 <MX_DMA_Init+0x48>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_DMA_Init+0x48>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	2038      	movs	r0, #56	; 0x38
 8000824:	f003 faf9 	bl	8003e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000828:	2038      	movs	r0, #56	; 0x38
 800082a:	f003 fb12 	bl	8003e52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	2039      	movs	r0, #57	; 0x39
 8000834:	f003 faf1 	bl	8003e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000838:	2039      	movs	r0, #57	; 0x39
 800083a:	f003 fb0a 	bl	8003e52 <HAL_NVIC_EnableIRQ>

}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800

0800084c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08e      	sub	sp, #56	; 0x38
 8000850:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000862:	4b9d      	ldr	r3, [pc, #628]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a9c      	ldr	r2, [pc, #624]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 8000868:	f043 0310 	orr.w	r3, r3, #16
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b9a      	ldr	r3, [pc, #616]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0310 	and.w	r3, r3, #16
 8000876:	623b      	str	r3, [r7, #32]
 8000878:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b97      	ldr	r3, [pc, #604]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a96      	ldr	r2, [pc, #600]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b94      	ldr	r3, [pc, #592]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	61fb      	str	r3, [r7, #28]
 8000890:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000892:	4b91      	ldr	r3, [pc, #580]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a90      	ldr	r2, [pc, #576]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 8000898:	f043 0320 	orr.w	r3, r3, #32
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b8e      	ldr	r3, [pc, #568]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0320 	and.w	r3, r3, #32
 80008a6:	61bb      	str	r3, [r7, #24]
 80008a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	4b8b      	ldr	r3, [pc, #556]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a8a      	ldr	r2, [pc, #552]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b88      	ldr	r3, [pc, #544]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b85      	ldr	r3, [pc, #532]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a84      	ldr	r2, [pc, #528]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b82      	ldr	r3, [pc, #520]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	4b7f      	ldr	r3, [pc, #508]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a7e      	ldr	r2, [pc, #504]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b7c      	ldr	r3, [pc, #496]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	4b79      	ldr	r3, [pc, #484]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a78      	ldr	r2, [pc, #480]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b76      	ldr	r3, [pc, #472]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0308 	and.w	r3, r3, #8
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800090a:	4b73      	ldr	r3, [pc, #460]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a72      	ldr	r2, [pc, #456]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 8000910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b70      	ldr	r3, [pc, #448]	; (8000ad8 <MX_GPIO_Init+0x28c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2168      	movs	r1, #104	; 0x68
 8000926:	486d      	ldr	r0, [pc, #436]	; (8000adc <MX_GPIO_Init+0x290>)
 8000928:	f004 f80c 	bl	8004944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f244 0181 	movw	r1, #16513	; 0x4081
 8000932:	486b      	ldr	r0, [pc, #428]	; (8000ae0 <MX_GPIO_Init+0x294>)
 8000934:	f004 f806 	bl	8004944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2140      	movs	r1, #64	; 0x40
 800093c:	4869      	ldr	r0, [pc, #420]	; (8000ae4 <MX_GPIO_Init+0x298>)
 800093e:	f004 f801 	bl	8004944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000948:	4867      	ldr	r0, [pc, #412]	; (8000ae8 <MX_GPIO_Init+0x29c>)
 800094a:	f003 fffb 	bl	8004944 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 800094e:	2314      	movs	r3, #20
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800095a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095e:	4619      	mov	r1, r3
 8000960:	485e      	ldr	r0, [pc, #376]	; (8000adc <MX_GPIO_Init+0x290>)
 8000962:	f003 fe2b 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000966:	2368      	movs	r3, #104	; 0x68
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097a:	4619      	mov	r1, r3
 800097c:	4857      	ldr	r0, [pc, #348]	; (8000adc <MX_GPIO_Init+0x290>)
 800097e:	f003 fe1d 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000988:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	4853      	ldr	r0, [pc, #332]	; (8000ae8 <MX_GPIO_Init+0x29c>)
 800099a:	f003 fe0f 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800099e:	2332      	movs	r3, #50	; 0x32
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009aa:	2303      	movs	r3, #3
 80009ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ae:	230b      	movs	r3, #11
 80009b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	484b      	ldr	r0, [pc, #300]	; (8000ae8 <MX_GPIO_Init+0x29c>)
 80009ba:	f003 fdff 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009be:	2386      	movs	r3, #134	; 0x86
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ce:	230b      	movs	r3, #11
 80009d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	4619      	mov	r1, r3
 80009d8:	4844      	ldr	r0, [pc, #272]	; (8000aec <MX_GPIO_Init+0x2a0>)
 80009da:	f003 fdef 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD2_Pin;
 80009de:	f244 0381 	movw	r3, #16513	; 0x4081
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f4:	4619      	mov	r1, r3
 80009f6:	483a      	ldr	r0, [pc, #232]	; (8000ae0 <MX_GPIO_Init+0x294>)
 80009f8:	f003 fde0 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a0e:	230b      	movs	r3, #11
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	4619      	mov	r1, r3
 8000a18:	4831      	ldr	r0, [pc, #196]	; (8000ae0 <MX_GPIO_Init+0x294>)
 8000a1a:	f003 fdcf 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a1e:	2340      	movs	r3, #64	; 0x40
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	4619      	mov	r1, r3
 8000a34:	482b      	ldr	r0, [pc, #172]	; (8000ae4 <MX_GPIO_Init+0x298>)
 8000a36:	f003 fdc1 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4825      	ldr	r0, [pc, #148]	; (8000ae4 <MX_GPIO_Init+0x298>)
 8000a4e:	f003 fdb5 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000a52:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	481f      	ldr	r0, [pc, #124]	; (8000ae8 <MX_GPIO_Init+0x29c>)
 8000a6c:	f003 fda6 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000a70:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a82:	230a      	movs	r3, #10
 8000a84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4817      	ldr	r0, [pc, #92]	; (8000aec <MX_GPIO_Init+0x2a0>)
 8000a8e:	f003 fd95 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4811      	ldr	r0, [pc, #68]	; (8000aec <MX_GPIO_Init+0x2a0>)
 8000aa8:	f003 fd88 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000aac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000abe:	230b      	movs	r3, #11
 8000ac0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MX_GPIO_Init+0x298>)
 8000aca:	f003 fd77 	bl	80045bc <HAL_GPIO_Init>

}
 8000ace:	bf00      	nop
 8000ad0:	3738      	adds	r7, #56	; 0x38
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40020400 	.word	0x40020400
 8000ae4:	40021800 	.word	0x40021800
 8000ae8:	40020800 	.word	0x40020800
 8000aec:	40020000 	.word	0x40020000

08000af0 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <MX_I2C4_Init+0x74>)
 8000af6:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <MX_I2C4_Init+0x78>)
 8000af8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <MX_I2C4_Init+0x74>)
 8000afc:	4a1b      	ldr	r2, [pc, #108]	; (8000b6c <MX_I2C4_Init+0x7c>)
 8000afe:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000b00:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_I2C4_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b06:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <MX_I2C4_Init+0x74>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <MX_I2C4_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000b12:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_I2C4_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_I2C4_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_I2C4_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_I2C4_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000b2a:	480e      	ldr	r0, [pc, #56]	; (8000b64 <MX_I2C4_Init+0x74>)
 8000b2c:	f003 ff24 	bl	8004978 <HAL_I2C_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000b36:	f000 fec3 	bl	80018c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4809      	ldr	r0, [pc, #36]	; (8000b64 <MX_I2C4_Init+0x74>)
 8000b3e:	f003 ffab 	bl	8004a98 <HAL_I2CEx_ConfigAnalogFilter>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b48:	f000 feba 	bl	80018c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_I2C4_Init+0x74>)
 8000b50:	f003 ffed 	bl	8004b2e <HAL_I2CEx_ConfigDigitalFilter>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b5a:	f000 feb1 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000029c 	.word	0x2000029c
 8000b68:	40006000 	.word	0x40006000
 8000b6c:	20404768 	.word	0x20404768

08000b70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b0ae      	sub	sp, #184	; 0xb8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2290      	movs	r2, #144	; 0x90
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f008 fca8 	bl	80094e6 <memset>
  if(i2cHandle->Instance==I2C4)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a22      	ldr	r2, [pc, #136]	; (8000c24 <HAL_I2C_MspInit+0xb4>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d13d      	bne.n	8000c1c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ba4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f004 fd3d 	bl	8005630 <HAL_RCCEx_PeriphCLKConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000bbc:	f000 fe80 	bl	80018c0 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <HAL_I2C_MspInit+0xb8>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4a18      	ldr	r2, [pc, #96]	; (8000c28 <HAL_I2C_MspInit+0xb8>)
 8000bc6:	f043 0308 	orr.w	r3, r3, #8
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <HAL_I2C_MspInit+0xb8>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f003 0308 	and.w	r3, r3, #8
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000bd8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000bdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be0:	2312      	movs	r3, #18
 8000be2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480b      	ldr	r0, [pc, #44]	; (8000c2c <HAL_I2C_MspInit+0xbc>)
 8000c00:	f003 fcdc 	bl	80045bc <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_I2C_MspInit+0xb8>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_I2C_MspInit+0xb8>)
 8000c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_I2C_MspInit+0xb8>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	37b8      	adds	r7, #184	; 0xb8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40006000 	.word	0x40006000
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020c00 	.word	0x40020c00

08000c30 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c34:	f3bf 8f4f 	dsb	sy
}
 8000c38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c3a:	f3bf 8f6f 	isb	sy
}
 8000c3e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <SCB_EnableICache+0x48>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c48:	f3bf 8f4f 	dsb	sy
}
 8000c4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c4e:	f3bf 8f6f 	isb	sy
}
 8000c52:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <SCB_EnableICache+0x48>)
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <SCB_EnableICache+0x48>)
 8000c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c60:	f3bf 8f4f 	dsb	sy
}
 8000c64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c66:	f3bf 8f6f 	isb	sy
}
 8000c6a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <SCB_EnableDCache+0x84>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000c8a:	f3bf 8f4f 	dsb	sy
}
 8000c8e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <SCB_EnableDCache+0x84>)
 8000c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c96:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	0b5b      	lsrs	r3, r3, #13
 8000c9c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ca0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	08db      	lsrs	r3, r3, #3
 8000ca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000caa:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	015a      	lsls	r2, r3, #5
 8000cb0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000cb4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cba:	4911      	ldr	r1, [pc, #68]	; (8000d00 <SCB_EnableDCache+0x84>)
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1e5a      	subs	r2, r3, #1
 8000cc6:	60ba      	str	r2, [r7, #8]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1ef      	bne.n	8000cac <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	1e5a      	subs	r2, r3, #1
 8000cd0:	60fa      	str	r2, [r7, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1e5      	bne.n	8000ca2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000cd6:	f3bf 8f4f 	dsb	sy
}
 8000cda:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <SCB_EnableDCache+0x84>)
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <SCB_EnableDCache+0x84>)
 8000ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ce8:	f3bf 8f4f 	dsb	sy
}
 8000cec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cee:	f3bf 8f6f 	isb	sy
}
 8000cf2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Set_LED>:

uint8_t datasentflag = 0;
uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];

void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	b2d9      	uxtb	r1, r3
 8000d16:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <Set_LED+0x58>)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	b2d9      	uxtb	r1, r3
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <Set_LED+0x58>)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	460a      	mov	r2, r1
 8000d2c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	b2d9      	uxtb	r1, r3
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <Set_LED+0x58>)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	460a      	mov	r2, r1
 8000d3c:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2d9      	uxtb	r1, r3
 8000d42:	4a06      	ldr	r2, [pc, #24]	; (8000d5c <Set_LED+0x58>)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	460a      	mov	r2, r1
 8000d4c:	70da      	strb	r2, [r3, #3]
}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000400 	.word	0x20000400

08000d60 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness(int brightness)  // 0-45
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	ed2d 8b02 	vpush	{d8}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b2d      	cmp	r3, #45	; 0x2d
 8000d70:	dd01      	ble.n	8000d76 <Set_Brightness+0x16>
		brightness = 45;
 8000d72:	232d      	movs	r3, #45	; 0x2d
 8000d74:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	e051      	b.n	8000e20 <Set_Brightness+0xc0>
		LED_Mod[i][0] = LED_Data[i][0];
 8000d7c:	4a32      	ldr	r2, [pc, #200]	; (8000e48 <Set_Brightness+0xe8>)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000d84:	4a31      	ldr	r2, [pc, #196]	; (8000e4c <Set_Brightness+0xec>)
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; j++) {
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	e040      	b.n	8000e14 <Set_Brightness+0xb4>
			float angle = 90 - brightness;  // in degrees
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000d98:	ee07 3a90 	vmov	s15, r3
 8000d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000da0:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle * PI / 180;  // in rad
 8000da4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000da8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dac:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000e38 <Set_Brightness+0xd8>
 8000db0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000db4:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8000e40 <Set_Brightness+0xe0>
 8000db8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000dbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dc0:	edc7 7a03 	vstr	s15, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j]) / (tan(angle));
 8000dc4:	4a20      	ldr	r2, [pc, #128]	; (8000e48 <Set_Brightness+0xe8>)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	441a      	add	r2, r3
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4413      	add	r3, r2
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	ee07 3a90 	vmov	s15, r3
 8000dd6:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000dda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000de2:	eeb0 0b47 	vmov.f64	d0, d7
 8000de6:	f00a fbf3 	bl	800b5d0 <tan>
 8000dea:	eeb0 6b40 	vmov.f64	d6, d0
 8000dee:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000df2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000df6:	edc7 7a00 	vstr	s15, [r7]
 8000dfa:	783b      	ldrb	r3, [r7, #0]
 8000dfc:	b2d9      	uxtb	r1, r3
 8000dfe:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <Set_Brightness+0xec>)
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	441a      	add	r2, r3
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4413      	add	r3, r2
 8000e0a:	460a      	mov	r2, r1
 8000e0c:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; j++) {
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	3301      	adds	r3, #1
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	ddbb      	ble.n	8000d92 <Set_Brightness+0x32>
	for (int i = 0; i < MAX_LED; i++) {
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	2b22      	cmp	r3, #34	; 0x22
 8000e24:	ddaa      	ble.n	8000d7c <Set_Brightness+0x1c>
		}
	}

#endif

}
 8000e26:	bf00      	nop
 8000e28:	bf00      	nop
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	ecbd 8b02 	vpop	{d8}
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	f3af 8000 	nop.w
 8000e38:	53c8d4f1 	.word	0x53c8d4f1
 8000e3c:	400921fb 	.word	0x400921fb
 8000e40:	00000000 	.word	0x00000000
 8000e44:	40668000 	.word	0x40668000
 8000e48:	20000400 	.word	0x20000400
 8000e4c:	2000048c 	.word	0x2000048c

08000e50 <WS2812_Send>:

uint16_t pwmData[(24 * MAX_LED) + 50];

void WS2812_Send(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++) {
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	e036      	b.n	8000ece <WS2812_Send+0x7e>
#if USE_BRIGHTNESS
		color =
				((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 8000e60:	4a2e      	ldr	r2, [pc, #184]	; (8000f1c <WS2812_Send+0xcc>)
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	785b      	ldrb	r3, [r3, #1]
 8000e6a:	041a      	lsls	r2, r3, #16
 8000e6c:	492b      	ldr	r1, [pc, #172]	; (8000f1c <WS2812_Send+0xcc>)
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	440b      	add	r3, r1
 8000e74:	789b      	ldrb	r3, [r3, #2]
 8000e76:	021b      	lsls	r3, r3, #8
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	4928      	ldr	r1, [pc, #160]	; (8000f1c <WS2812_Send+0xcc>)
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	440b      	add	r3, r1
 8000e82:	78db      	ldrb	r3, [r3, #3]
 8000e84:	4313      	orrs	r3, r2
		color =
 8000e86:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i = 23; i >= 0; i--) {
 8000e88:	2317      	movs	r3, #23
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	e019      	b.n	8000ec2 <WS2812_Send+0x72>
			if (color & (1 << i)) {
 8000e8e:	2201      	movs	r2, #1
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	461a      	mov	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d005      	beq.n	8000eac <WS2812_Send+0x5c>
				pwmData[indx] = 60;  // 2/3 of 90
 8000ea0:	4a1f      	ldr	r2, [pc, #124]	; (8000f20 <WS2812_Send+0xd0>)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	213c      	movs	r1, #60	; 0x3c
 8000ea6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000eaa:	e004      	b.n	8000eb6 <WS2812_Send+0x66>
			}

			else
				pwmData[indx] = 30;  // 1/3 of 90
 8000eac:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <WS2812_Send+0xd0>)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	211e      	movs	r1, #30
 8000eb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	dae2      	bge.n	8000e8e <WS2812_Send+0x3e>
	for (int i = 0; i < MAX_LED; i++) {
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	2b22      	cmp	r3, #34	; 0x22
 8000ed2:	ddc5      	ble.n	8000e60 <WS2812_Send+0x10>
		}

	}

	for (int i = 0; i < 50; i++) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	e00a      	b.n	8000ef0 <WS2812_Send+0xa0>
		pwmData[indx] = 0;
 8000eda:	4a11      	ldr	r2, [pc, #68]	; (8000f20 <WS2812_Send+0xd0>)
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	2100      	movs	r1, #0
 8000ee0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++) {
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	3301      	adds	r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	2b31      	cmp	r3, #49	; 0x31
 8000ef4:	ddf1      	ble.n	8000eda <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*) pwmData, indx);
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	4a09      	ldr	r2, [pc, #36]	; (8000f20 <WS2812_Send+0xd0>)
 8000efc:	2100      	movs	r1, #0
 8000efe:	4809      	ldr	r0, [pc, #36]	; (8000f24 <WS2812_Send+0xd4>)
 8000f00:	f005 fcbc 	bl	800687c <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {
 8000f04:	bf00      	nop
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <WS2812_Send+0xd8>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0fb      	beq.n	8000f06 <WS2812_Send+0xb6>
	};
	datasentflag = 0;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <WS2812_Send+0xd8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	2000048c 	.word	0x2000048c
 8000f20:	20000518 	.word	0x20000518
 8000f24:	20000c84 	.word	0x20000c84
 8000f28:	200003fc 	.word	0x200003fc

08000f2c <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000f34:	2100      	movs	r1, #0
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000f38:	f005 feb4 	bl	8006ca4 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000c84 	.word	0x20000c84
 8000f50:	200003fc 	.word	0x200003fc

08000f54 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8000f5a:	f7ff fe69 	bl	8000c30 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8000f5e:	f7ff fe8d 	bl	8000c7c <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f62:	f002 f9c7 	bl	80032f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f66:	f000 fc3b 	bl	80017e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f6a:	f7ff fc6f 	bl	800084c <MX_GPIO_Init>
	MX_DMA_Init();
 8000f6e:	f7ff fc47 	bl	8000800 <MX_DMA_Init>
	MX_SPI5_Init();
 8000f72:	f000 fcf1 	bl	8001958 <MX_SPI5_Init>
	MX_RNG_Init();
 8000f76:	f000 fca7 	bl	80018c8 <MX_RNG_Init>
	MX_TIM2_Init();
 8000f7a:	f000 ff93 	bl	8001ea4 <MX_TIM2_Init>
	MX_I2C4_Init();
 8000f7e:	f7ff fdb7 	bl	8000af0 <MX_I2C4_Init>
	MX_ADC1_Init();
 8000f82:	f7ff fb33 	bl	80005ec <MX_ADC1_Init>
	MX_TIM1_Init();
 8000f86:	f000 fee1 	bl	8001d4c <MX_TIM1_Init>
	MX_USART3_UART_Init();
 8000f8a:	f001 f933 	bl	80021f4 <MX_USART3_UART_Init>
	MX_TIM4_Init();
 8000f8e:	f000 ffff 	bl	8001f90 <MX_TIM4_Init>
	MX_USB_OTG_FS_USB_Init();
 8000f92:	f001 f9bf 	bl	8002314 <MX_USB_OTG_FS_USB_Init>
	/* USER CODE BEGIN 2 */
	ILI9341_Init(); //initial driver setup to drive ili9341
 8000f96:	f001 fd97 	bl	8002ac8 <ILI9341_Init>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f001 fd36 	bl	8002a0c <ILI9341_Set_Rotation>
	ILI9341_Draw_Image((const char*) image_data_tot, SCREEN_VERTICAL_1);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4892      	ldr	r0, [pc, #584]	; (80011ec <main+0x298>)
 8000fa4:	f001 fab2 	bl	800250c <ILI9341_Draw_Image>
	HAL_TIM_Base_Start_IT(&htim4);
 8000fa8:	4891      	ldr	r0, [pc, #580]	; (80011f0 <main+0x29c>)
 8000faa:	f005 fb8d 	bl	80066c8 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_val, 4);
 8000fae:	2204      	movs	r2, #4
 8000fb0:	4990      	ldr	r1, [pc, #576]	; (80011f4 <main+0x2a0>)
 8000fb2:	4891      	ldr	r0, [pc, #580]	; (80011f8 <main+0x2a4>)
 8000fb4:	f002 fa6c 	bl	8003490 <HAL_ADC_Start_DMA>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		// Part 1 RGB
		if (count >= 100) {
 8000fb8:	4b90      	ldr	r3, [pc, #576]	; (80011fc <main+0x2a8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b63      	cmp	r3, #99	; 0x63
 8000fbe:	d926      	bls.n	800100e <main+0xba>
			if (isLED[0]) {
 8000fc0:	4b8f      	ldr	r3, [pc, #572]	; (8001200 <main+0x2ac>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d004      	beq.n	8000fd2 <main+0x7e>
				interval[0]++;
 8000fc8:	4b8e      	ldr	r3, [pc, #568]	; (8001204 <main+0x2b0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	4a8d      	ldr	r2, [pc, #564]	; (8001204 <main+0x2b0>)
 8000fd0:	6013      	str	r3, [r2, #0]
			}
			if (isLED[1]) {
 8000fd2:	4b8b      	ldr	r3, [pc, #556]	; (8001200 <main+0x2ac>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d004      	beq.n	8000fe4 <main+0x90>
				interval[1]++;
 8000fda:	4b8a      	ldr	r3, [pc, #552]	; (8001204 <main+0x2b0>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	4a88      	ldr	r2, [pc, #544]	; (8001204 <main+0x2b0>)
 8000fe2:	6053      	str	r3, [r2, #4]
			}
			if (isLED[2]) {
 8000fe4:	4b86      	ldr	r3, [pc, #536]	; (8001200 <main+0x2ac>)
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d004      	beq.n	8000ff6 <main+0xa2>
				interval[2]++;
 8000fec:	4b85      	ldr	r3, [pc, #532]	; (8001204 <main+0x2b0>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a84      	ldr	r2, [pc, #528]	; (8001204 <main+0x2b0>)
 8000ff4:	6093      	str	r3, [r2, #8]
			}
			if (isLED[3]) {
 8000ff6:	4b82      	ldr	r3, [pc, #520]	; (8001200 <main+0x2ac>)
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d004      	beq.n	8001008 <main+0xb4>
				interval[3]++;
 8000ffe:	4b81      	ldr	r3, [pc, #516]	; (8001204 <main+0x2b0>)
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	3301      	adds	r3, #1
 8001004:	4a7f      	ldr	r2, [pc, #508]	; (8001204 <main+0x2b0>)
 8001006:	60d3      	str	r3, [r2, #12]
			}
			count = 0;
 8001008:	4b7c      	ldr	r3, [pc, #496]	; (80011fc <main+0x2a8>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
		}

		//hit Upper Left

		if (adc_hit[0]) {
 800100e:	4b7e      	ldr	r3, [pc, #504]	; (8001208 <main+0x2b4>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d016      	beq.n	8001044 <main+0xf0>
			isLED[0] = 1;
 8001016:	4b7a      	ldr	r3, [pc, #488]	; (8001200 <main+0x2ac>)
 8001018:	2201      	movs	r2, #1
 800101a:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 35; i++)
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	e008      	b.n	8001034 <main+0xe0>
				Set_LED(i, 0, 0, 200);
 8001022:	23c8      	movs	r3, #200	; 0xc8
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	6978      	ldr	r0, [r7, #20]
 800102a:	f7ff fe6b 	bl	8000d04 <Set_LED>
			for (int i = 0; i < 35; i++)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3301      	adds	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	2b22      	cmp	r3, #34	; 0x22
 8001038:	ddf3      	ble.n	8001022 <main+0xce>
			Set_Brightness(20);
 800103a:	2014      	movs	r0, #20
 800103c:	f7ff fe90 	bl	8000d60 <Set_Brightness>
			WS2812_Send();
 8001040:	f7ff ff06 	bl	8000e50 <WS2812_Send>
		}

		if ((isLED[0] = 1) && (interval[0] >= 3)) {
 8001044:	4b6e      	ldr	r3, [pc, #440]	; (8001200 <main+0x2ac>)
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	4b6e      	ldr	r3, [pc, #440]	; (8001204 <main+0x2b0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b02      	cmp	r3, #2
 8001050:	dd0a      	ble.n	8001068 <main+0x114>
			Set_Brightness(0);
 8001052:	2000      	movs	r0, #0
 8001054:	f7ff fe84 	bl	8000d60 <Set_Brightness>
			WS2812_Send();
 8001058:	f7ff fefa 	bl	8000e50 <WS2812_Send>
			isLED[0] = 0;
 800105c:	4b68      	ldr	r3, [pc, #416]	; (8001200 <main+0x2ac>)
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
			interval[0] = 0;
 8001062:	4b68      	ldr	r3, [pc, #416]	; (8001204 <main+0x2b0>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
		}
		// hit center left
		if (adc_hit[1]) {
 8001068:	4b67      	ldr	r3, [pc, #412]	; (8001208 <main+0x2b4>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d016      	beq.n	800109e <main+0x14a>
			isLED[1] = 1;
 8001070:	4b63      	ldr	r3, [pc, #396]	; (8001200 <main+0x2ac>)
 8001072:	2201      	movs	r2, #1
 8001074:	605a      	str	r2, [r3, #4]
			for (int i = 0; i < 35; i++)
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	e008      	b.n	800108e <main+0x13a>
				Set_LED(i, 255, 0, 0);
 800107c:	2300      	movs	r3, #0
 800107e:	2200      	movs	r2, #0
 8001080:	21ff      	movs	r1, #255	; 0xff
 8001082:	6938      	ldr	r0, [r7, #16]
 8001084:	f7ff fe3e 	bl	8000d04 <Set_LED>
			for (int i = 0; i < 35; i++)
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	3301      	adds	r3, #1
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	2b22      	cmp	r3, #34	; 0x22
 8001092:	ddf3      	ble.n	800107c <main+0x128>
			Set_Brightness(20);
 8001094:	2014      	movs	r0, #20
 8001096:	f7ff fe63 	bl	8000d60 <Set_Brightness>
			WS2812_Send();
 800109a:	f7ff fed9 	bl	8000e50 <WS2812_Send>
		}

		if ((isLED[1] = 1) && (interval[1] >= 3)) {
 800109e:	4b58      	ldr	r3, [pc, #352]	; (8001200 <main+0x2ac>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	4b57      	ldr	r3, [pc, #348]	; (8001204 <main+0x2b0>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	dd0a      	ble.n	80010c2 <main+0x16e>
			Set_Brightness(0);
 80010ac:	2000      	movs	r0, #0
 80010ae:	f7ff fe57 	bl	8000d60 <Set_Brightness>
			WS2812_Send();
 80010b2:	f7ff fecd 	bl	8000e50 <WS2812_Send>
			isLED[1] = 0;
 80010b6:	4b52      	ldr	r3, [pc, #328]	; (8001200 <main+0x2ac>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
			interval[1] = 0;
 80010bc:	4b51      	ldr	r3, [pc, #324]	; (8001204 <main+0x2b0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	605a      	str	r2, [r3, #4]
		}

		//hit center right
		if (adc_hit[2]) {
 80010c2:	4b51      	ldr	r3, [pc, #324]	; (8001208 <main+0x2b4>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d016      	beq.n	80010f8 <main+0x1a4>
			isLED[2] = 1;
 80010ca:	4b4d      	ldr	r3, [pc, #308]	; (8001200 <main+0x2ac>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	609a      	str	r2, [r3, #8]
			for (int i = 0; i < 35; i++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	e008      	b.n	80010e8 <main+0x194>
				Set_LED(i, 255, 0, 0);
 80010d6:	2300      	movs	r3, #0
 80010d8:	2200      	movs	r2, #0
 80010da:	21ff      	movs	r1, #255	; 0xff
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f7ff fe11 	bl	8000d04 <Set_LED>
			for (int i = 0; i < 35; i++)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3301      	adds	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2b22      	cmp	r3, #34	; 0x22
 80010ec:	ddf3      	ble.n	80010d6 <main+0x182>
			Set_Brightness(20);
 80010ee:	2014      	movs	r0, #20
 80010f0:	f7ff fe36 	bl	8000d60 <Set_Brightness>
			WS2812_Send();
 80010f4:	f7ff feac 	bl	8000e50 <WS2812_Send>
		}

		if ((isLED[2] = 1) && (interval[2] >= 3)) {
 80010f8:	4b41      	ldr	r3, [pc, #260]	; (8001200 <main+0x2ac>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	4b41      	ldr	r3, [pc, #260]	; (8001204 <main+0x2b0>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	2b02      	cmp	r3, #2
 8001104:	dd0a      	ble.n	800111c <main+0x1c8>
			Set_Brightness(0);
 8001106:	2000      	movs	r0, #0
 8001108:	f7ff fe2a 	bl	8000d60 <Set_Brightness>
			WS2812_Send();
 800110c:	f7ff fea0 	bl	8000e50 <WS2812_Send>
			isLED[2] = 0;
 8001110:	4b3b      	ldr	r3, [pc, #236]	; (8001200 <main+0x2ac>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
			interval[2] = 0;
 8001116:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <main+0x2b0>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
		}

		// Hit Upper right
		if (adc_hit[3]) {
 800111c:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <main+0x2b4>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d016      	beq.n	8001152 <main+0x1fe>
			isLED[3] = 1;
 8001124:	4b36      	ldr	r3, [pc, #216]	; (8001200 <main+0x2ac>)
 8001126:	2201      	movs	r2, #1
 8001128:	60da      	str	r2, [r3, #12]
			for (int i = 0; i < 35; i++)
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	e008      	b.n	8001142 <main+0x1ee>
				Set_LED(i, 0, 0, 200);
 8001130:	23c8      	movs	r3, #200	; 0xc8
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	68b8      	ldr	r0, [r7, #8]
 8001138:	f7ff fde4 	bl	8000d04 <Set_LED>
			for (int i = 0; i < 35; i++)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	3301      	adds	r3, #1
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2b22      	cmp	r3, #34	; 0x22
 8001146:	ddf3      	ble.n	8001130 <main+0x1dc>
			Set_Brightness(20);
 8001148:	2014      	movs	r0, #20
 800114a:	f7ff fe09 	bl	8000d60 <Set_Brightness>
			WS2812_Send();
 800114e:	f7ff fe7f 	bl	8000e50 <WS2812_Send>
		}

		if ((isLED[3] = 1) && (interval[3] >= 3)) {
 8001152:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <main+0x2ac>)
 8001154:	2201      	movs	r2, #1
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <main+0x2b0>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b02      	cmp	r3, #2
 800115e:	dd0a      	ble.n	8001176 <main+0x222>
			Set_Brightness(0);
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fdfd 	bl	8000d60 <Set_Brightness>
			WS2812_Send();
 8001166:	f7ff fe73 	bl	8000e50 <WS2812_Send>
			isLED[3] = 0;
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <main+0x2ac>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
			interval[3] = 0;
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <main+0x2b0>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
//		char buffer[100];
//		sprintf(buffer, "%d %d %d %d\n\r", adc_val[0], adc_val[1], adc_val[2],
//				adc_val[3]);
//		print(buffer);

		adcIntervalMillis[0] = HAL_GetTick();
 8001176:	f002 f917 	bl	80033a8 <HAL_GetTick>
 800117a:	4603      	mov	r3, r0
 800117c:	4a23      	ldr	r2, [pc, #140]	; (800120c <main+0x2b8>)
 800117e:	6013      	str	r3, [r2, #0]
		adcIntervalMillis[1] = HAL_GetTick();
 8001180:	f002 f912 	bl	80033a8 <HAL_GetTick>
 8001184:	4603      	mov	r3, r0
 8001186:	4a21      	ldr	r2, [pc, #132]	; (800120c <main+0x2b8>)
 8001188:	6053      	str	r3, [r2, #4]
		adcIntervalMillis[2] = HAL_GetTick();
 800118a:	f002 f90d 	bl	80033a8 <HAL_GetTick>
 800118e:	4603      	mov	r3, r0
 8001190:	4a1e      	ldr	r2, [pc, #120]	; (800120c <main+0x2b8>)
 8001192:	6093      	str	r3, [r2, #8]
		adcIntervalMillis[3] = HAL_GetTick();
 8001194:	f002 f908 	bl	80033a8 <HAL_GetTick>
 8001198:	4603      	mov	r3, r0
 800119a:	4a1c      	ldr	r2, [pc, #112]	; (800120c <main+0x2b8>)
 800119c:	60d3      	str	r3, [r2, #12]
		if (adc_val[0] >= 2800 && adc_hit[0] == 0) {
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <main+0x2a0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80011a6:	d307      	bcc.n	80011b8 <main+0x264>
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <main+0x2b4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d103      	bne.n	80011b8 <main+0x264>
			adc_hit[0] = 1;
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <main+0x2b4>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	e037      	b.n	8001228 <main+0x2d4>

		}
		else if (adc_val[1] >= 1000 && adc_hit[1] == 0) {
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <main+0x2a0>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011c0:	d307      	bcc.n	80011d2 <main+0x27e>
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <main+0x2b4>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d103      	bne.n	80011d2 <main+0x27e>
			adc_hit[1] = 1;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <main+0x2b4>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	e02a      	b.n	8001228 <main+0x2d4>

		}
		else if (adc_val[2] >= 2000 && adc_hit[2] == 0) {
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <main+0x2a0>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80011da:	d319      	bcc.n	8001210 <main+0x2bc>
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <main+0x2b4>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d115      	bne.n	8001210 <main+0x2bc>
			adc_hit[2] = 1;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <main+0x2b4>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	e01d      	b.n	8001228 <main+0x2d4>
 80011ec:	0800c274 	.word	0x0800c274
 80011f0:	20000d1c 	.word	0x20000d1c
 80011f4:	200003bc 	.word	0x200003bc
 80011f8:	200001f4 	.word	0x200001f4
 80011fc:	20000358 	.word	0x20000358
 8001200:	2000035c 	.word	0x2000035c
 8001204:	2000036c 	.word	0x2000036c
 8001208:	200003cc 	.word	0x200003cc
 800120c:	200003dc 	.word	0x200003dc

		}
		else if (adc_val[3] >= 2000 && adc_hit[3] == 0) {
 8001210:	4b93      	ldr	r3, [pc, #588]	; (8001460 <main+0x50c>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001218:	d306      	bcc.n	8001228 <main+0x2d4>
 800121a:	4b92      	ldr	r3, [pc, #584]	; (8001464 <main+0x510>)
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d102      	bne.n	8001228 <main+0x2d4>
			adc_hit[3] = 1;
 8001222:	4b90      	ldr	r3, [pc, #576]	; (8001464 <main+0x510>)
 8001224:	2201      	movs	r2, #1
 8001226:	60da      	str	r2, [r3, #12]

		}

		if (adc_hit[0] == 1
 8001228:	4b8e      	ldr	r3, [pc, #568]	; (8001464 <main+0x510>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d11b      	bne.n	8001268 <main+0x314>
				&& (adcIntervalMillis[0] - adcIntervalPrevios[0] > ((40)+(a*1000)))) {
 8001230:	4b8d      	ldr	r3, [pc, #564]	; (8001468 <main+0x514>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b8d      	ldr	r3, [pc, #564]	; (800146c <main+0x518>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	4a8d      	ldr	r2, [pc, #564]	; (8001470 <main+0x51c>)
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001242:	fb01 f202 	mul.w	r2, r1, r2
 8001246:	3228      	adds	r2, #40	; 0x28
 8001248:	4293      	cmp	r3, r2
 800124a:	d90d      	bls.n	8001268 <main+0x314>
			print("D");
 800124c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001250:	2201      	movs	r2, #1
 8001252:	4988      	ldr	r1, [pc, #544]	; (8001474 <main+0x520>)
 8001254:	4888      	ldr	r0, [pc, #544]	; (8001478 <main+0x524>)
 8001256:	f006 ff49 	bl	80080ec <HAL_UART_Transmit>
			adc_hit[0] = 0;
 800125a:	4b82      	ldr	r3, [pc, #520]	; (8001464 <main+0x510>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
			adcIntervalPrevios[0] = adcIntervalMillis[0];
 8001260:	4b81      	ldr	r3, [pc, #516]	; (8001468 <main+0x514>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a81      	ldr	r2, [pc, #516]	; (800146c <main+0x518>)
 8001266:	6013      	str	r3, [r2, #0]
		}

		if (adc_hit[1] == 1
 8001268:	4b7e      	ldr	r3, [pc, #504]	; (8001464 <main+0x510>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d11b      	bne.n	80012a8 <main+0x354>
				&& (adcIntervalMillis[1] - adcIntervalPrevios[1] > ((40)+(a*1000)))) {
 8001270:	4b7d      	ldr	r3, [pc, #500]	; (8001468 <main+0x514>)
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	4b7d      	ldr	r3, [pc, #500]	; (800146c <main+0x518>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	4a7d      	ldr	r2, [pc, #500]	; (8001470 <main+0x51c>)
 800127c:	6812      	ldr	r2, [r2, #0]
 800127e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001282:	fb01 f202 	mul.w	r2, r1, r2
 8001286:	3228      	adds	r2, #40	; 0x28
 8001288:	4293      	cmp	r3, r2
 800128a:	d90d      	bls.n	80012a8 <main+0x354>
			print("F");
 800128c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001290:	2201      	movs	r2, #1
 8001292:	497a      	ldr	r1, [pc, #488]	; (800147c <main+0x528>)
 8001294:	4878      	ldr	r0, [pc, #480]	; (8001478 <main+0x524>)
 8001296:	f006 ff29 	bl	80080ec <HAL_UART_Transmit>
			adc_hit[1] = 0;
 800129a:	4b72      	ldr	r3, [pc, #456]	; (8001464 <main+0x510>)
 800129c:	2200      	movs	r2, #0
 800129e:	605a      	str	r2, [r3, #4]
			adcIntervalPrevios[1] = adcIntervalMillis[1];
 80012a0:	4b71      	ldr	r3, [pc, #452]	; (8001468 <main+0x514>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	4a71      	ldr	r2, [pc, #452]	; (800146c <main+0x518>)
 80012a6:	6053      	str	r3, [r2, #4]
		}

		if (adc_hit[2] == 1
 80012a8:	4b6e      	ldr	r3, [pc, #440]	; (8001464 <main+0x510>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d11b      	bne.n	80012e8 <main+0x394>
				&& (adcIntervalMillis[2] - adcIntervalPrevios[2] > ((40)+(a*1000)))) {
 80012b0:	4b6d      	ldr	r3, [pc, #436]	; (8001468 <main+0x514>)
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	4b6d      	ldr	r3, [pc, #436]	; (800146c <main+0x518>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	4a6d      	ldr	r2, [pc, #436]	; (8001470 <main+0x51c>)
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012c2:	fb01 f202 	mul.w	r2, r1, r2
 80012c6:	3228      	adds	r2, #40	; 0x28
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d90d      	bls.n	80012e8 <main+0x394>
			print("J");
 80012cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d0:	2201      	movs	r2, #1
 80012d2:	496b      	ldr	r1, [pc, #428]	; (8001480 <main+0x52c>)
 80012d4:	4868      	ldr	r0, [pc, #416]	; (8001478 <main+0x524>)
 80012d6:	f006 ff09 	bl	80080ec <HAL_UART_Transmit>
			adc_hit[2] = 0;
 80012da:	4b62      	ldr	r3, [pc, #392]	; (8001464 <main+0x510>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
			adcIntervalPrevios[2] = adcIntervalMillis[2];
 80012e0:	4b61      	ldr	r3, [pc, #388]	; (8001468 <main+0x514>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	4a61      	ldr	r2, [pc, #388]	; (800146c <main+0x518>)
 80012e6:	6093      	str	r3, [r2, #8]
		}

		if (adc_hit[3] == 1
 80012e8:	4b5e      	ldr	r3, [pc, #376]	; (8001464 <main+0x510>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d11b      	bne.n	8001328 <main+0x3d4>
				&& (adcIntervalMillis[3] - adcIntervalPrevios[3] > ((40)+(a*1000)))) {
 80012f0:	4b5d      	ldr	r3, [pc, #372]	; (8001468 <main+0x514>)
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	4b5d      	ldr	r3, [pc, #372]	; (800146c <main+0x518>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	4a5d      	ldr	r2, [pc, #372]	; (8001470 <main+0x51c>)
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001302:	fb01 f202 	mul.w	r2, r1, r2
 8001306:	3228      	adds	r2, #40	; 0x28
 8001308:	4293      	cmp	r3, r2
 800130a:	d90d      	bls.n	8001328 <main+0x3d4>
			print("K");
 800130c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001310:	2201      	movs	r2, #1
 8001312:	495c      	ldr	r1, [pc, #368]	; (8001484 <main+0x530>)
 8001314:	4858      	ldr	r0, [pc, #352]	; (8001478 <main+0x524>)
 8001316:	f006 fee9 	bl	80080ec <HAL_UART_Transmit>
			adc_hit[3] = 0;
 800131a:	4b52      	ldr	r3, [pc, #328]	; (8001464 <main+0x510>)
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
			adcIntervalPrevios[3] = adcIntervalMillis[3];
 8001320:	4b51      	ldr	r3, [pc, #324]	; (8001468 <main+0x514>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	4a51      	ldr	r2, [pc, #324]	; (800146c <main+0x518>)
 8001326:	60d3      	str	r3, [r2, #12]
		}

		// Part3 LCD
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001328:	2001      	movs	r0, #1
 800132a:	f001 fb6f 	bl	8002a0c <ILI9341_Set_Rotation>
		sprintf(x, "%2d", a);
 800132e:	4b50      	ldr	r3, [pc, #320]	; (8001470 <main+0x51c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	4954      	ldr	r1, [pc, #336]	; (8001488 <main+0x534>)
 8001336:	4855      	ldr	r0, [pc, #340]	; (800148c <main+0x538>)
 8001338:	f008 f872 	bl	8009420 <siprintf>
		ILI9341_Draw_Text(x, 145, 11, BLACK, 2, WHITE);
 800133c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	2302      	movs	r3, #2
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2300      	movs	r3, #0
 8001348:	220b      	movs	r2, #11
 800134a:	2191      	movs	r1, #145	; 0x91
 800134c:	484f      	ldr	r0, [pc, #316]	; (800148c <main+0x538>)
 800134e:	f001 f8ad 	bl	80024ac <ILI9341_Draw_Text>
		//		HAL_Delay(1000);

		if (TP_Touchpad_Pressed()) {
 8001352:	f001 ffbf 	bl	80032d4 <TP_Touchpad_Pressed>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 80ab 	beq.w	80014b4 <main+0x560>
			uint16_t position_array[2];
			uint16_t x_pos = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	80fb      	strh	r3, [r7, #6]
			uint16_t y_pos = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	80bb      	strh	r3, [r7, #4]

			if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 8001366:	463b      	mov	r3, r7
 8001368:	4618      	mov	r0, r3
 800136a:	f001 fef1 	bl	8003150 <TP_Read_Coordinates>
 800136e:	4603      	mov	r3, r0
 8001370:	2b01      	cmp	r3, #1
 8001372:	f040 809f 	bne.w	80014b4 <main+0x560>
				x_pos = position_array[0];
 8001376:	883b      	ldrh	r3, [r7, #0]
 8001378:	80fb      	strh	r3, [r7, #6]
				y_pos = position_array[1];
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	80bb      	strh	r3, [r7, #4]
				if ((x_pos >= 177 && x_pos <= 210)
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	2bb0      	cmp	r3, #176	; 0xb0
 8001382:	d90c      	bls.n	800139e <main+0x44a>
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	2bd2      	cmp	r3, #210	; 0xd2
 8001388:	d809      	bhi.n	800139e <main+0x44a>
						&& (y_pos >= 8 && y_pos <= 98)) //check back
 800138a:	88bb      	ldrh	r3, [r7, #4]
 800138c:	2b07      	cmp	r3, #7
 800138e:	d906      	bls.n	800139e <main+0x44a>
 8001390:	88bb      	ldrh	r3, [r7, #4]
 8001392:	2b62      	cmp	r3, #98	; 0x62
 8001394:	d803      	bhi.n	800139e <main+0x44a>
						{
					ispressed[6] = 1;
 8001396:	4b3e      	ldr	r3, [pc, #248]	; (8001490 <main+0x53c>)
 8001398:	2201      	movs	r2, #1
 800139a:	619a      	str	r2, [r3, #24]
 800139c:	e08a      	b.n	80014b4 <main+0x560>
				} else if ((x_pos >= 180 && x_pos <= 210)
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	2bb3      	cmp	r3, #179	; 0xb3
 80013a2:	d90d      	bls.n	80013c0 <main+0x46c>
 80013a4:	88fb      	ldrh	r3, [r7, #6]
 80013a6:	2bd2      	cmp	r3, #210	; 0xd2
 80013a8:	d80a      	bhi.n	80013c0 <main+0x46c>
						&& (y_pos >= 228 && y_pos <= 316)) //check enter
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	2be3      	cmp	r3, #227	; 0xe3
 80013ae:	d907      	bls.n	80013c0 <main+0x46c>
 80013b0:	88bb      	ldrh	r3, [r7, #4]
 80013b2:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80013b6:	d803      	bhi.n	80013c0 <main+0x46c>
						{
					ispressed[7] = 1;
 80013b8:	4b35      	ldr	r3, [pc, #212]	; (8001490 <main+0x53c>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	61da      	str	r2, [r3, #28]
 80013be:	e079      	b.n	80014b4 <main+0x560>
				}

				else if ((x_pos >= 206 && x_pos <= 240)
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	2bcd      	cmp	r3, #205	; 0xcd
 80013c4:	d90c      	bls.n	80013e0 <main+0x48c>
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	2bf0      	cmp	r3, #240	; 0xf0
 80013ca:	d809      	bhi.n	80013e0 <main+0x48c>
						&& (y_pos >= 105 && y_pos <= 138)) //dpi-
 80013cc:	88bb      	ldrh	r3, [r7, #4]
 80013ce:	2b68      	cmp	r3, #104	; 0x68
 80013d0:	d906      	bls.n	80013e0 <main+0x48c>
 80013d2:	88bb      	ldrh	r3, [r7, #4]
 80013d4:	2b8a      	cmp	r3, #138	; 0x8a
 80013d6:	d803      	bhi.n	80013e0 <main+0x48c>
						{
					ispressed[0] = 1;
 80013d8:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <main+0x53c>)
 80013da:	2201      	movs	r2, #1
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	e069      	b.n	80014b4 <main+0x560>
				}

				else if ((x_pos >= 208 && x_pos <= 236)
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	2bcf      	cmp	r3, #207	; 0xcf
 80013e4:	d90c      	bls.n	8001400 <main+0x4ac>
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	2bec      	cmp	r3, #236	; 0xec
 80013ea:	d809      	bhi.n	8001400 <main+0x4ac>
						&& (y_pos >= 182 && y_pos <= 215)) //dpi+
 80013ec:	88bb      	ldrh	r3, [r7, #4]
 80013ee:	2bb5      	cmp	r3, #181	; 0xb5
 80013f0:	d906      	bls.n	8001400 <main+0x4ac>
 80013f2:	88bb      	ldrh	r3, [r7, #4]
 80013f4:	2bd7      	cmp	r3, #215	; 0xd7
 80013f6:	d803      	bhi.n	8001400 <main+0x4ac>
						{
					ispressed[1] = 1;
 80013f8:	4b25      	ldr	r3, [pc, #148]	; (8001490 <main+0x53c>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	e059      	b.n	80014b4 <main+0x560>

				}

				else if ((x_pos >= 135 && x_pos <= 196)
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	2b86      	cmp	r3, #134	; 0x86
 8001404:	d90c      	bls.n	8001420 <main+0x4cc>
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	2bc4      	cmp	r3, #196	; 0xc4
 800140a:	d809      	bhi.n	8001420 <main+0x4cc>
						&& (y_pos >= 129 && y_pos <= 189)) //check up
 800140c:	88bb      	ldrh	r3, [r7, #4]
 800140e:	2b80      	cmp	r3, #128	; 0x80
 8001410:	d906      	bls.n	8001420 <main+0x4cc>
 8001412:	88bb      	ldrh	r3, [r7, #4]
 8001414:	2bbd      	cmp	r3, #189	; 0xbd
 8001416:	d803      	bhi.n	8001420 <main+0x4cc>
						{
					ispressed[2] = 1;
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <main+0x53c>)
 800141a:	2201      	movs	r2, #1
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	e049      	b.n	80014b4 <main+0x560>
				}

				else if ((x_pos >= 8 && x_pos <= 71)
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	2b07      	cmp	r3, #7
 8001424:	d90c      	bls.n	8001440 <main+0x4ec>
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	2b47      	cmp	r3, #71	; 0x47
 800142a:	d809      	bhi.n	8001440 <main+0x4ec>
						&& (y_pos >= 128 && y_pos <= 191)) //check down
 800142c:	88bb      	ldrh	r3, [r7, #4]
 800142e:	2b7f      	cmp	r3, #127	; 0x7f
 8001430:	d906      	bls.n	8001440 <main+0x4ec>
 8001432:	88bb      	ldrh	r3, [r7, #4]
 8001434:	2bbf      	cmp	r3, #191	; 0xbf
 8001436:	d803      	bhi.n	8001440 <main+0x4ec>
						{
					ispressed[3] = 1;
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <main+0x53c>)
 800143a:	2201      	movs	r2, #1
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	e039      	b.n	80014b4 <main+0x560>
				}

				else if ((x_pos >= 74 && x_pos <= 136)
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	2b49      	cmp	r3, #73	; 0x49
 8001444:	d926      	bls.n	8001494 <main+0x540>
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	2b88      	cmp	r3, #136	; 0x88
 800144a:	d823      	bhi.n	8001494 <main+0x540>
						&& (y_pos >= 59 && y_pos <= 120)) //check left
 800144c:	88bb      	ldrh	r3, [r7, #4]
 800144e:	2b3a      	cmp	r3, #58	; 0x3a
 8001450:	d920      	bls.n	8001494 <main+0x540>
 8001452:	88bb      	ldrh	r3, [r7, #4]
 8001454:	2b78      	cmp	r3, #120	; 0x78
 8001456:	d81d      	bhi.n	8001494 <main+0x540>
						{
					ispressed[4] = 1;
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <main+0x53c>)
 800145a:	2201      	movs	r2, #1
 800145c:	611a      	str	r2, [r3, #16]
 800145e:	e029      	b.n	80014b4 <main+0x560>
 8001460:	200003bc 	.word	0x200003bc
 8001464:	200003cc 	.word	0x200003cc
 8001468:	200003dc 	.word	0x200003dc
 800146c:	200003ec 	.word	0x200003ec
 8001470:	200002f0 	.word	0x200002f0
 8001474:	0800c240 	.word	0x0800c240
 8001478:	20000dc8 	.word	0x20000dc8
 800147c:	0800c244 	.word	0x0800c244
 8001480:	0800c248 	.word	0x0800c248
 8001484:	0800c24c 	.word	0x0800c24c
 8001488:	0800c250 	.word	0x0800c250
 800148c:	200002f4 	.word	0x200002f4
 8001490:	2000037c 	.word	0x2000037c
				}

				else if ((x_pos >= 76 && x_pos <= 135)
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	2b4b      	cmp	r3, #75	; 0x4b
 8001498:	d90c      	bls.n	80014b4 <main+0x560>
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	2b87      	cmp	r3, #135	; 0x87
 800149e:	d809      	bhi.n	80014b4 <main+0x560>
						&& (y_pos >= 205 && y_pos <= 265)) //check right
 80014a0:	88bb      	ldrh	r3, [r7, #4]
 80014a2:	2bcc      	cmp	r3, #204	; 0xcc
 80014a4:	d906      	bls.n	80014b4 <main+0x560>
 80014a6:	88bb      	ldrh	r3, [r7, #4]
 80014a8:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80014ac:	d202      	bcs.n	80014b4 <main+0x560>
						{
					ispressed[5] = 1;
 80014ae:	4b97      	ldr	r3, [pc, #604]	; (800170c <main+0x7b8>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	615a      	str	r2, [r3, #20]
			}
		}

		//timer!!!
		//check back
		if (ispressed[6]) {
 80014b4:	4b95      	ldr	r3, [pc, #596]	; (800170c <main+0x7b8>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00b      	beq.n	80014d4 <main+0x580>
			intervalPreesed[6] += count;
 80014bc:	4b94      	ldr	r3, [pc, #592]	; (8001710 <main+0x7bc>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b94      	ldr	r3, [pc, #592]	; (8001714 <main+0x7c0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b91      	ldr	r3, [pc, #580]	; (8001710 <main+0x7bc>)
 80014cc:	619a      	str	r2, [r3, #24]
			count = 0;
 80014ce:	4b91      	ldr	r3, [pc, #580]	; (8001714 <main+0x7c0>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
		}

		if (intervalPreesed[6] >= 500) {
 80014d4:	4b8e      	ldr	r3, [pc, #568]	; (8001710 <main+0x7bc>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014dc:	db14      	blt.n	8001508 <main+0x5b4>
			while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 80014de:	bf00      	nop
 80014e0:	4b8d      	ldr	r3, [pc, #564]	; (8001718 <main+0x7c4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ea:	2b40      	cmp	r3, #64	; 0x40
 80014ec:	d1f8      	bne.n	80014e0 <main+0x58c>
			}
//			HAL_UART_Transmit(&huart3, (uint8_t*) ex, strlen(ex), 1000);
			print("B");
 80014ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f2:	2201      	movs	r2, #1
 80014f4:	4989      	ldr	r1, [pc, #548]	; (800171c <main+0x7c8>)
 80014f6:	4888      	ldr	r0, [pc, #544]	; (8001718 <main+0x7c4>)
 80014f8:	f006 fdf8 	bl	80080ec <HAL_UART_Transmit>
			intervalPreesed[6] = 0;
 80014fc:	4b84      	ldr	r3, [pc, #528]	; (8001710 <main+0x7bc>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
			ispressed[6] = 0;
 8001502:	4b82      	ldr	r3, [pc, #520]	; (800170c <main+0x7b8>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
		}
		//check enter
		if (ispressed[7]) {
 8001508:	4b80      	ldr	r3, [pc, #512]	; (800170c <main+0x7b8>)
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00b      	beq.n	8001528 <main+0x5d4>
			intervalPreesed[7] += count;
 8001510:	4b7f      	ldr	r3, [pc, #508]	; (8001710 <main+0x7bc>)
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	461a      	mov	r2, r3
 8001516:	4b7f      	ldr	r3, [pc, #508]	; (8001714 <main+0x7c0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
 800151c:	461a      	mov	r2, r3
 800151e:	4b7c      	ldr	r3, [pc, #496]	; (8001710 <main+0x7bc>)
 8001520:	61da      	str	r2, [r3, #28]
			count = 0;
 8001522:	4b7c      	ldr	r3, [pc, #496]	; (8001714 <main+0x7c0>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
		}

		if (intervalPreesed[7] >= 500) {
 8001528:	4b79      	ldr	r3, [pc, #484]	; (8001710 <main+0x7bc>)
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001530:	db14      	blt.n	800155c <main+0x608>
			while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 8001532:	bf00      	nop
 8001534:	4b78      	ldr	r3, [pc, #480]	; (8001718 <main+0x7c4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153e:	2b40      	cmp	r3, #64	; 0x40
 8001540:	d1f8      	bne.n	8001534 <main+0x5e0>
			}
//			HAL_UART_Transmit(&huart3, (uint8_t*) ex2, strlen(ex2), 1000);
			print("E");
 8001542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001546:	2201      	movs	r2, #1
 8001548:	4975      	ldr	r1, [pc, #468]	; (8001720 <main+0x7cc>)
 800154a:	4873      	ldr	r0, [pc, #460]	; (8001718 <main+0x7c4>)
 800154c:	f006 fdce 	bl	80080ec <HAL_UART_Transmit>
			intervalPreesed[7] = 0;
 8001550:	4b6f      	ldr	r3, [pc, #444]	; (8001710 <main+0x7bc>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
			ispressed[7] = 0;
 8001556:	4b6d      	ldr	r3, [pc, #436]	; (800170c <main+0x7b8>)
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
		}

		//dpi-
		if (ispressed[0]) {
 800155c:	4b6b      	ldr	r3, [pc, #428]	; (800170c <main+0x7b8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00b      	beq.n	800157c <main+0x628>
			intervalPreesed[0] += count;
 8001564:	4b6a      	ldr	r3, [pc, #424]	; (8001710 <main+0x7bc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b6a      	ldr	r3, [pc, #424]	; (8001714 <main+0x7c0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	461a      	mov	r2, r3
 8001572:	4b67      	ldr	r3, [pc, #412]	; (8001710 <main+0x7bc>)
 8001574:	601a      	str	r2, [r3, #0]
			count = 0;
 8001576:	4b67      	ldr	r3, [pc, #412]	; (8001714 <main+0x7c0>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
		}
		if (intervalPreesed[0] >= 500) {
 800157c:	4b64      	ldr	r3, [pc, #400]	; (8001710 <main+0x7bc>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001584:	db23      	blt.n	80015ce <main+0x67a>
			if (a >= 1) {
 8001586:	4b67      	ldr	r3, [pc, #412]	; (8001724 <main+0x7d0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	dd0b      	ble.n	80015a6 <main+0x652>
				a = a - 1;
 800158e:	4b65      	ldr	r3, [pc, #404]	; (8001724 <main+0x7d0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	3b01      	subs	r3, #1
 8001594:	4a63      	ldr	r2, [pc, #396]	; (8001724 <main+0x7d0>)
 8001596:	6013      	str	r3, [r2, #0]
				sprintf(x, "%2d ", a);
 8001598:	4b62      	ldr	r3, [pc, #392]	; (8001724 <main+0x7d0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	4962      	ldr	r1, [pc, #392]	; (8001728 <main+0x7d4>)
 80015a0:	4862      	ldr	r0, [pc, #392]	; (800172c <main+0x7d8>)
 80015a2:	f007 ff3d 	bl	8009420 <siprintf>
			}
			if (a <= 0) {
 80015a6:	4b5f      	ldr	r3, [pc, #380]	; (8001724 <main+0x7d0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	dc09      	bgt.n	80015c2 <main+0x66e>
				a = 0;
 80015ae:	4b5d      	ldr	r3, [pc, #372]	; (8001724 <main+0x7d0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
				sprintf(x, "%2d ", a);
 80015b4:	4b5b      	ldr	r3, [pc, #364]	; (8001724 <main+0x7d0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	495b      	ldr	r1, [pc, #364]	; (8001728 <main+0x7d4>)
 80015bc:	485b      	ldr	r0, [pc, #364]	; (800172c <main+0x7d8>)
 80015be:	f007 ff2f 	bl	8009420 <siprintf>
			}
			intervalPreesed[0] = 0;
 80015c2:	4b53      	ldr	r3, [pc, #332]	; (8001710 <main+0x7bc>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
			ispressed[0] = 0;
 80015c8:	4b50      	ldr	r3, [pc, #320]	; (800170c <main+0x7b8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
		}
		//dpi+
		if (ispressed[1]) {
 80015ce:	4b4f      	ldr	r3, [pc, #316]	; (800170c <main+0x7b8>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00b      	beq.n	80015ee <main+0x69a>
			intervalPreesed[1] += count;
 80015d6:	4b4e      	ldr	r3, [pc, #312]	; (8001710 <main+0x7bc>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	461a      	mov	r2, r3
 80015dc:	4b4d      	ldr	r3, [pc, #308]	; (8001714 <main+0x7c0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	461a      	mov	r2, r3
 80015e4:	4b4a      	ldr	r3, [pc, #296]	; (8001710 <main+0x7bc>)
 80015e6:	605a      	str	r2, [r3, #4]
			count = 0;
 80015e8:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <main+0x7c0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
		}

		if (intervalPreesed[1] >= 500) {
 80015ee:	4b48      	ldr	r3, [pc, #288]	; (8001710 <main+0x7bc>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015f6:	db23      	blt.n	8001640 <main+0x6ec>
			if (a < 10) {
 80015f8:	4b4a      	ldr	r3, [pc, #296]	; (8001724 <main+0x7d0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b09      	cmp	r3, #9
 80015fe:	dc0b      	bgt.n	8001618 <main+0x6c4>
				a = a + 1;
 8001600:	4b48      	ldr	r3, [pc, #288]	; (8001724 <main+0x7d0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	4a47      	ldr	r2, [pc, #284]	; (8001724 <main+0x7d0>)
 8001608:	6013      	str	r3, [r2, #0]
				sprintf(x, "%2d ", a);
 800160a:	4b46      	ldr	r3, [pc, #280]	; (8001724 <main+0x7d0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	4945      	ldr	r1, [pc, #276]	; (8001728 <main+0x7d4>)
 8001612:	4846      	ldr	r0, [pc, #280]	; (800172c <main+0x7d8>)
 8001614:	f007 ff04 	bl	8009420 <siprintf>
			}
			if (a > 10) {
 8001618:	4b42      	ldr	r3, [pc, #264]	; (8001724 <main+0x7d0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b0a      	cmp	r3, #10
 800161e:	dd09      	ble.n	8001634 <main+0x6e0>
				a = 10;
 8001620:	4b40      	ldr	r3, [pc, #256]	; (8001724 <main+0x7d0>)
 8001622:	220a      	movs	r2, #10
 8001624:	601a      	str	r2, [r3, #0]
				sprintf(x, "%2d ", a);
 8001626:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <main+0x7d0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	493e      	ldr	r1, [pc, #248]	; (8001728 <main+0x7d4>)
 800162e:	483f      	ldr	r0, [pc, #252]	; (800172c <main+0x7d8>)
 8001630:	f007 fef6 	bl	8009420 <siprintf>
			}
			intervalPreesed[1] = 0;
 8001634:	4b36      	ldr	r3, [pc, #216]	; (8001710 <main+0x7bc>)
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]
			ispressed[1] = 0;
 800163a:	4b34      	ldr	r3, [pc, #208]	; (800170c <main+0x7b8>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
		}
		//check up
		if (ispressed[2]) {
 8001640:	4b32      	ldr	r3, [pc, #200]	; (800170c <main+0x7b8>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00b      	beq.n	8001660 <main+0x70c>
			intervalPreesed[2] += count;
 8001648:	4b31      	ldr	r3, [pc, #196]	; (8001710 <main+0x7bc>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	461a      	mov	r2, r3
 800164e:	4b31      	ldr	r3, [pc, #196]	; (8001714 <main+0x7c0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	461a      	mov	r2, r3
 8001656:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <main+0x7bc>)
 8001658:	609a      	str	r2, [r3, #8]
			count = 0;
 800165a:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <main+0x7c0>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
		}

		if (intervalPreesed[2] >= 500) {
 8001660:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <main+0x7bc>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001668:	db14      	blt.n	8001694 <main+0x740>
			while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 800166a:	bf00      	nop
 800166c:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <main+0x7c4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001676:	2b40      	cmp	r3, #64	; 0x40
 8001678:	d1f8      	bne.n	800166c <main+0x718>
			}
//			HAL_UART_Transmit(&huart3, (uint8_t*) ex3, strlen(ex3), 1000);
			print("U");
 800167a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167e:	2201      	movs	r2, #1
 8001680:	492b      	ldr	r1, [pc, #172]	; (8001730 <main+0x7dc>)
 8001682:	4825      	ldr	r0, [pc, #148]	; (8001718 <main+0x7c4>)
 8001684:	f006 fd32 	bl	80080ec <HAL_UART_Transmit>
			intervalPreesed[2] = 0;
 8001688:	4b21      	ldr	r3, [pc, #132]	; (8001710 <main+0x7bc>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
			ispressed[2] = 0;
 800168e:	4b1f      	ldr	r3, [pc, #124]	; (800170c <main+0x7b8>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
		}

		////check down
		if (ispressed[3]) {
 8001694:	4b1d      	ldr	r3, [pc, #116]	; (800170c <main+0x7b8>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00b      	beq.n	80016b4 <main+0x760>
			intervalPreesed[3] += count;
 800169c:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <main+0x7bc>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <main+0x7c0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <main+0x7bc>)
 80016ac:	60da      	str	r2, [r3, #12]
			count = 0;
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <main+0x7c0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
		}

		if (intervalPreesed[3] >= 500) {
 80016b4:	4b16      	ldr	r3, [pc, #88]	; (8001710 <main+0x7bc>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016bc:	db14      	blt.n	80016e8 <main+0x794>
			while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 80016be:	bf00      	nop
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <main+0x7c4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ca:	2b40      	cmp	r3, #64	; 0x40
 80016cc:	d1f8      	bne.n	80016c0 <main+0x76c>
			}
//			HAL_UART_Transmit(&huart3, (uint8_t*) ex4, strlen(ex4), 1000);
			print("O");
 80016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d2:	2201      	movs	r2, #1
 80016d4:	4917      	ldr	r1, [pc, #92]	; (8001734 <main+0x7e0>)
 80016d6:	4810      	ldr	r0, [pc, #64]	; (8001718 <main+0x7c4>)
 80016d8:	f006 fd08 	bl	80080ec <HAL_UART_Transmit>
			intervalPreesed[3] = 0;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <main+0x7bc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
			ispressed[3] = 0;
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <main+0x7b8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	60da      	str	r2, [r3, #12]
		}
		//check left
		if (ispressed[4]) {
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <main+0x7b8>)
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d023      	beq.n	8001738 <main+0x7e4>
			intervalPreesed[4] += count;
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <main+0x7bc>)
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <main+0x7c0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <main+0x7bc>)
 8001700:	611a      	str	r2, [r3, #16]
			count = 0;
 8001702:	4b04      	ldr	r3, [pc, #16]	; (8001714 <main+0x7c0>)
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	e016      	b.n	8001738 <main+0x7e4>
 800170a:	bf00      	nop
 800170c:	2000037c 	.word	0x2000037c
 8001710:	2000039c 	.word	0x2000039c
 8001714:	20000358 	.word	0x20000358
 8001718:	20000dc8 	.word	0x20000dc8
 800171c:	0800c254 	.word	0x0800c254
 8001720:	0800c258 	.word	0x0800c258
 8001724:	200002f0 	.word	0x200002f0
 8001728:	0800c25c 	.word	0x0800c25c
 800172c:	200002f4 	.word	0x200002f4
 8001730:	0800c264 	.word	0x0800c264
 8001734:	0800c268 	.word	0x0800c268
		}

		if (intervalPreesed[4] >= 500) {
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <main+0x874>)
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001740:	db14      	blt.n	800176c <main+0x818>
			while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 8001742:	bf00      	nop
 8001744:	4b21      	ldr	r3, [pc, #132]	; (80017cc <main+0x878>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800174e:	2b40      	cmp	r3, #64	; 0x40
 8001750:	d1f8      	bne.n	8001744 <main+0x7f0>
			}
//			HAL_UART_Transmit(&huart3, (uint8_t*) ex5, strlen(ex5), 1000);
			print("L");
 8001752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001756:	2201      	movs	r2, #1
 8001758:	491d      	ldr	r1, [pc, #116]	; (80017d0 <main+0x87c>)
 800175a:	481c      	ldr	r0, [pc, #112]	; (80017cc <main+0x878>)
 800175c:	f006 fcc6 	bl	80080ec <HAL_UART_Transmit>
			intervalPreesed[4] = 0;
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <main+0x874>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
			ispressed[4] = 0;
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <main+0x880>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
		}
		//check right
		if (ispressed[5]) {
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <main+0x880>)
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00b      	beq.n	800178c <main+0x838>
			intervalPreesed[5] += count;
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <main+0x874>)
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	461a      	mov	r2, r3
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <main+0x884>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4413      	add	r3, r2
 8001780:	461a      	mov	r2, r3
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <main+0x874>)
 8001784:	615a      	str	r2, [r3, #20]
			count = 0;
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <main+0x884>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
		}

		if (intervalPreesed[5] >= 500) {
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <main+0x874>)
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001794:	f6ff ac10 	blt.w	8000fb8 <main+0x64>
			while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 8001798:	bf00      	nop
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <main+0x878>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a4:	2b40      	cmp	r3, #64	; 0x40
 80017a6:	d1f8      	bne.n	800179a <main+0x846>
			}
//			HAL_UART_Transmit(&huart3, (uint8_t*) ex6, strlen(ex6), 1000);
			print("R");
 80017a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ac:	2201      	movs	r2, #1
 80017ae:	490b      	ldr	r1, [pc, #44]	; (80017dc <main+0x888>)
 80017b0:	4806      	ldr	r0, [pc, #24]	; (80017cc <main+0x878>)
 80017b2:	f006 fc9b 	bl	80080ec <HAL_UART_Transmit>
			intervalPreesed[5] = 0;
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <main+0x874>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	615a      	str	r2, [r3, #20]
			ispressed[5] = 0;
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <main+0x880>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
		if (count >= 100) {
 80017c2:	f7ff bbf9 	b.w	8000fb8 <main+0x64>
 80017c6:	bf00      	nop
 80017c8:	2000039c 	.word	0x2000039c
 80017cc:	20000dc8 	.word	0x20000dc8
 80017d0:	0800c26c 	.word	0x0800c26c
 80017d4:	2000037c 	.word	0x2000037c
 80017d8:	20000358 	.word	0x20000358
 80017dc:	0800c270 	.word	0x0800c270

080017e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b094      	sub	sp, #80	; 0x50
 80017e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80017e6:	f107 031c 	add.w	r3, r7, #28
 80017ea:	2234      	movs	r2, #52	; 0x34
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f007 fe79 	bl	80094e6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001804:	f003 f9e0 	bl	8004bc8 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001808:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <SystemClock_Config+0xd8>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	4a2a      	ldr	r2, [pc, #168]	; (80018b8 <SystemClock_Config+0xd8>)
 800180e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001812:	6413      	str	r3, [r2, #64]	; 0x40
 8001814:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <SystemClock_Config+0xd8>)
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001820:	4b26      	ldr	r3, [pc, #152]	; (80018bc <SystemClock_Config+0xdc>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a25      	ldr	r2, [pc, #148]	; (80018bc <SystemClock_Config+0xdc>)
 8001826:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b23      	ldr	r3, [pc, #140]	; (80018bc <SystemClock_Config+0xdc>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001838:	2301      	movs	r3, #1
 800183a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800183c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001840:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001842:	2302      	movs	r3, #2
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001846:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800184a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 800184c:	2304      	movs	r3, #4
 800184e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 216;
 8001850:	23d8      	movs	r3, #216	; 0xd8
 8001852:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001854:	2302      	movs	r3, #2
 8001856:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8001858:	2309      	movs	r3, #9
 800185a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800185c:	2302      	movs	r3, #2
 800185e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	4618      	mov	r0, r3
 8001866:	f003 fa0f 	bl	8004c88 <HAL_RCC_OscConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SystemClock_Config+0x94>
		Error_Handler();
 8001870:	f000 f826 	bl	80018c0 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001874:	f003 f9b8 	bl	8004be8 <HAL_PWREx_EnableOverDrive>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <SystemClock_Config+0xa2>
		Error_Handler();
 800187e:	f000 f81f 	bl	80018c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001882:	230f      	movs	r3, #15
 8001884:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001886:	2302      	movs	r3, #2
 8001888:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800188e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001892:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001898:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 800189a:	f107 0308 	add.w	r3, r7, #8
 800189e:	2107      	movs	r1, #7
 80018a0:	4618      	mov	r0, r3
 80018a2:	f003 fc9f 	bl	80051e4 <HAL_RCC_ClockConfig>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <SystemClock_Config+0xd0>
		Error_Handler();
 80018ac:	f000 f808 	bl	80018c0 <Error_Handler>
	}
}
 80018b0:	bf00      	nop
 80018b2:	3750      	adds	r7, #80	; 0x50
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40007000 	.word	0x40007000

080018c0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 80018c4:	e7fe      	b.n	80018c4 <Error_Handler+0x4>
	...

080018c8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <MX_RNG_Init+0x20>)
 80018ce:	4a07      	ldr	r2, [pc, #28]	; (80018ec <MX_RNG_Init+0x24>)
 80018d0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_RNG_Init+0x20>)
 80018d4:	f004 fad4 	bl	8005e80 <HAL_RNG_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80018de:	f7ff ffef 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000c0c 	.word	0x20000c0c
 80018ec:	50060800 	.word	0x50060800

080018f0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b0a8      	sub	sp, #160	; 0xa0
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f8:	f107 0310 	add.w	r3, r7, #16
 80018fc:	2290      	movs	r2, #144	; 0x90
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f007 fdf0 	bl	80094e6 <memset>
  if(rngHandle->Instance==RNG)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a11      	ldr	r2, [pc, #68]	; (8001950 <HAL_RNG_MspInit+0x60>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d11b      	bne.n	8001948 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001910:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001914:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	4618      	mov	r0, r3
 8001922:	f003 fe85 	bl	8005630 <HAL_RCCEx_PeriphCLKConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800192c:	f7ff ffc8 	bl	80018c0 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <HAL_RNG_MspInit+0x64>)
 8001932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001934:	4a07      	ldr	r2, [pc, #28]	; (8001954 <HAL_RNG_MspInit+0x64>)
 8001936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800193a:	6353      	str	r3, [r2, #52]	; 0x34
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_RNG_MspInit+0x64>)
 800193e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001948:	bf00      	nop
 800194a:	37a0      	adds	r7, #160	; 0xa0
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	50060800 	.word	0x50060800
 8001954:	40023800 	.word	0x40023800

08001958 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <MX_SPI5_Init+0x74>)
 800195e:	4a1c      	ldr	r2, [pc, #112]	; (80019d0 <MX_SPI5_Init+0x78>)
 8001960:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001962:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <MX_SPI5_Init+0x74>)
 8001964:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001968:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <MX_SPI5_Init+0x74>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <MX_SPI5_Init+0x74>)
 8001972:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001976:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001978:	4b14      	ldr	r3, [pc, #80]	; (80019cc <MX_SPI5_Init+0x74>)
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <MX_SPI5_Init+0x74>)
 8001980:	2200      	movs	r2, #0
 8001982:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_SPI5_Init+0x74>)
 8001986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <MX_SPI5_Init+0x74>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_SPI5_Init+0x74>)
 8001994:	2200      	movs	r2, #0
 8001996:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_SPI5_Init+0x74>)
 800199a:	2200      	movs	r2, #0
 800199c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <MX_SPI5_Init+0x74>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_SPI5_Init+0x74>)
 80019a6:	2207      	movs	r2, #7
 80019a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <MX_SPI5_Init+0x74>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_SPI5_Init+0x74>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_SPI5_Init+0x74>)
 80019b8:	f004 fa8c 	bl	8005ed4 <HAL_SPI_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80019c2:	f7ff ff7d 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000c1c 	.word	0x20000c1c
 80019d0:	40015000 	.word	0x40015000

080019d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	; 0x28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a17      	ldr	r2, [pc, #92]	; (8001a50 <HAL_SPI_MspInit+0x7c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d128      	bne.n	8001a48 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80019f6:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <HAL_SPI_MspInit+0x80>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	4a16      	ldr	r2, [pc, #88]	; (8001a54 <HAL_SPI_MspInit+0x80>)
 80019fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a00:	6453      	str	r3, [r2, #68]	; 0x44
 8001a02:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_SPI_MspInit+0x80>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_SPI_MspInit+0x80>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a10      	ldr	r2, [pc, #64]	; (8001a54 <HAL_SPI_MspInit+0x80>)
 8001a14:	f043 0320 	orr.w	r3, r3, #32
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_SPI_MspInit+0x80>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0320 	and.w	r3, r3, #32
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001a26:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001a38:	2305      	movs	r3, #5
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <HAL_SPI_MspInit+0x84>)
 8001a44:	f002 fdba 	bl	80045bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3728      	adds	r7, #40	; 0x28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40015000 	.word	0x40015000
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40021400 	.word	0x40021400

08001a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_MspInit+0x44>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <HAL_MspInit+0x44>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_MspInit+0x44>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_MspInit+0x44>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	4a08      	ldr	r2, [pc, #32]	; (8001aa0 <HAL_MspInit+0x44>)
 8001a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a84:	6453      	str	r3, [r2, #68]	; 0x44
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_MspInit+0x44>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001a92:	2005      	movs	r0, #5
 8001a94:	f002 f9b6 	bl	8003e04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <NMI_Handler+0x4>

08001aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aae:	e7fe      	b.n	8001aae <HardFault_Handler+0x4>

08001ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <MemManage_Handler+0x4>

08001ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <BusFault_Handler+0x4>

08001abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <UsageFault_Handler+0x4>

08001ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af0:	f001 fc46 	bl	8003380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001afe:	f005 f9b3 	bl	8006e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000c84 	.word	0x20000c84

08001b0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b10:	4804      	ldr	r0, [pc, #16]	; (8001b24 <TIM4_IRQHandler+0x18>)
 8001b12:	f005 f9a9 	bl	8006e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  count++;
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <TIM4_IRQHandler+0x1c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	4a02      	ldr	r2, [pc, #8]	; (8001b28 <TIM4_IRQHandler+0x1c>)
 8001b1e:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM4_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000d1c 	.word	0x20000d1c
 8001b28:	20000358 	.word	0x20000358

08001b2c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <DMA2_Stream0_IRQHandler+0x10>)
 8001b32:	f002 fad9 	bl	80040e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000023c 	.word	0x2000023c

08001b40 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <DMA2_Stream1_IRQHandler+0x10>)
 8001b46:	f002 facf 	bl	80040e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000d68 	.word	0x20000d68

08001b54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
	return 1;
 8001b58:	2301      	movs	r3, #1
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_kill>:

int _kill(int pid, int sig)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b6e:	f007 fd0d 	bl	800958c <__errno>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2216      	movs	r2, #22
 8001b76:	601a      	str	r2, [r3, #0]
	return -1;
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_exit>:

void _exit (int status)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ffe7 	bl	8001b64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b96:	e7fe      	b.n	8001b96 <_exit+0x12>

08001b98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	e00a      	b.n	8001bc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001baa:	f3af 8000 	nop.w
 8001bae:	4601      	mov	r1, r0
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	60ba      	str	r2, [r7, #8]
 8001bb6:	b2ca      	uxtb	r2, r1
 8001bb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dbf0      	blt.n	8001baa <_read+0x12>
	}

return len;
 8001bc8:	687b      	ldr	r3, [r7, #4]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	e009      	b.n	8001bf8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60ba      	str	r2, [r7, #8]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dbf1      	blt.n	8001be4 <_write+0x12>
	}
	return len;
 8001c00:	687b      	ldr	r3, [r7, #4]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_close>:

int _close(int file)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
	return -1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c32:	605a      	str	r2, [r3, #4]
	return 0;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_isatty>:

int _isatty(int file)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
	return 1;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
	return 0;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c7c:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <_sbrk+0x5c>)
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <_sbrk+0x60>)
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <_sbrk+0x64>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <_sbrk+0x64>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <_sbrk+0x68>)
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d207      	bcs.n	8001cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca4:	f007 fc72 	bl	800958c <__errno>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	220c      	movs	r2, #12
 8001cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb2:	e009      	b.n	8001cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <_sbrk+0x64>)
 8001cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20080000 	.word	0x20080000
 8001cd4:	00000400 	.word	0x00000400
 8001cd8:	20000c80 	.word	0x20000c80
 8001cdc:	20000fa0 	.word	0x20000fa0

08001ce0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <SystemInit+0x5c>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cea:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <SystemInit+0x5c>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <SystemInit+0x60>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a11      	ldr	r2, [pc, #68]	; (8001d40 <SystemInit+0x60>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <SystemInit+0x60>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <SystemInit+0x60>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	490d      	ldr	r1, [pc, #52]	; (8001d40 <SystemInit+0x60>)
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <SystemInit+0x64>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <SystemInit+0x60>)
 8001d14:	4a0c      	ldr	r2, [pc, #48]	; (8001d48 <SystemInit+0x68>)
 8001d16:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <SystemInit+0x60>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <SystemInit+0x60>)
 8001d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <SystemInit+0x60>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d2a:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <SystemInit+0x5c>)
 8001d2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d30:	609a      	str	r2, [r3, #8]
#endif
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00
 8001d40:	40023800 	.word	0x40023800
 8001d44:	fef6ffff 	.word	0xfef6ffff
 8001d48:	24003010 	.word	0x24003010

08001d4c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b09a      	sub	sp, #104	; 0x68
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
 8001d7c:	615a      	str	r2, [r3, #20]
 8001d7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	222c      	movs	r2, #44	; 0x2c
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f007 fbad 	bl	80094e6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d8c:	4b43      	ldr	r3, [pc, #268]	; (8001e9c <MX_TIM1_Init+0x150>)
 8001d8e:	4a44      	ldr	r2, [pc, #272]	; (8001ea0 <MX_TIM1_Init+0x154>)
 8001d90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8001d92:	4b42      	ldr	r3, [pc, #264]	; (8001e9c <MX_TIM1_Init+0x150>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d98:	4b40      	ldr	r3, [pc, #256]	; (8001e9c <MX_TIM1_Init+0x150>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 216-1;
 8001d9e:	4b3f      	ldr	r3, [pc, #252]	; (8001e9c <MX_TIM1_Init+0x150>)
 8001da0:	22d7      	movs	r2, #215	; 0xd7
 8001da2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da4:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <MX_TIM1_Init+0x150>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001daa:	4b3c      	ldr	r3, [pc, #240]	; (8001e9c <MX_TIM1_Init+0x150>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db0:	4b3a      	ldr	r3, [pc, #232]	; (8001e9c <MX_TIM1_Init+0x150>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001db6:	4839      	ldr	r0, [pc, #228]	; (8001e9c <MX_TIM1_Init+0x150>)
 8001db8:	f004 fc2e 	bl	8006618 <HAL_TIM_Base_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001dc2:	f7ff fd7d 	bl	80018c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dca:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dcc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4832      	ldr	r0, [pc, #200]	; (8001e9c <MX_TIM1_Init+0x150>)
 8001dd4:	f005 fa7c 	bl	80072d0 <HAL_TIM_ConfigClockSource>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001dde:	f7ff fd6f 	bl	80018c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001de2:	482e      	ldr	r0, [pc, #184]	; (8001e9c <MX_TIM1_Init+0x150>)
 8001de4:	f004 fce8 	bl	80067b8 <HAL_TIM_PWM_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001dee:	f7ff fd67 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dfe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e02:	4619      	mov	r1, r3
 8001e04:	4825      	ldr	r0, [pc, #148]	; (8001e9c <MX_TIM1_Init+0x150>)
 8001e06:	f005 fff9 	bl	8007dfc <HAL_TIMEx_MasterConfigSynchronization>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001e10:	f7ff fd56 	bl	80018c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e14:	2360      	movs	r3, #96	; 0x60
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e20:	2300      	movs	r3, #0
 8001e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e34:	2200      	movs	r2, #0
 8001e36:	4619      	mov	r1, r3
 8001e38:	4818      	ldr	r0, [pc, #96]	; (8001e9c <MX_TIM1_Init+0x150>)
 8001e3a:	f005 f935 	bl	80070a8 <HAL_TIM_PWM_ConfigChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001e44:	f7ff fd3c 	bl	80018c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4807      	ldr	r0, [pc, #28]	; (8001e9c <MX_TIM1_Init+0x150>)
 8001e7e:	f006 f84b 	bl	8007f18 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001e88:	f7ff fd1a 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e8c:	4803      	ldr	r0, [pc, #12]	; (8001e9c <MX_TIM1_Init+0x150>)
 8001e8e:	f000 f955 	bl	800213c <HAL_TIM_MspPostInit>

}
 8001e92:	bf00      	nop
 8001e94:	3768      	adds	r7, #104	; 0x68
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000c84 	.word	0x20000c84
 8001ea0:	40010000 	.word	0x40010000

08001ea4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08e      	sub	sp, #56	; 0x38
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
 8001ed0:	611a      	str	r2, [r3, #16]
 8001ed2:	615a      	str	r2, [r3, #20]
 8001ed4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <MX_TIM2_Init+0xe8>)
 8001ed8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001edc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8001ede:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <MX_TIM2_Init+0xe8>)
 8001ee0:	226b      	movs	r2, #107	; 0x6b
 8001ee2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee4:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <MX_TIM2_Init+0xe8>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001eea:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <MX_TIM2_Init+0xe8>)
 8001eec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ef0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <MX_TIM2_Init+0xe8>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <MX_TIM2_Init+0xe8>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001efe:	4823      	ldr	r0, [pc, #140]	; (8001f8c <MX_TIM2_Init+0xe8>)
 8001f00:	f004 fb8a 	bl	8006618 <HAL_TIM_Base_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001f0a:	f7ff fcd9 	bl	80018c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f18:	4619      	mov	r1, r3
 8001f1a:	481c      	ldr	r0, [pc, #112]	; (8001f8c <MX_TIM2_Init+0xe8>)
 8001f1c:	f005 f9d8 	bl	80072d0 <HAL_TIM_ConfigClockSource>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001f26:	f7ff fccb 	bl	80018c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f2a:	4818      	ldr	r0, [pc, #96]	; (8001f8c <MX_TIM2_Init+0xe8>)
 8001f2c:	f004 fc44 	bl	80067b8 <HAL_TIM_PWM_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001f36:	f7ff fcc3 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	4619      	mov	r1, r3
 8001f48:	4810      	ldr	r0, [pc, #64]	; (8001f8c <MX_TIM2_Init+0xe8>)
 8001f4a:	f005 ff57 	bl	8007dfc <HAL_TIMEx_MasterConfigSynchronization>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001f54:	f7ff fcb4 	bl	80018c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f58:	2360      	movs	r3, #96	; 0x60
 8001f5a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000/4-1;
 8001f5c:	23f9      	movs	r3, #249	; 0xf9
 8001f5e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f68:	463b      	mov	r3, r7
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4807      	ldr	r0, [pc, #28]	; (8001f8c <MX_TIM2_Init+0xe8>)
 8001f70:	f005 f89a 	bl	80070a8 <HAL_TIM_PWM_ConfigChannel>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001f7a:	f7ff fca1 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f7e:	4803      	ldr	r0, [pc, #12]	; (8001f8c <MX_TIM2_Init+0xe8>)
 8001f80:	f000 f8dc 	bl	800213c <HAL_TIM_MspPostInit>

}
 8001f84:	bf00      	nop
 8001f86:	3738      	adds	r7, #56	; 0x38
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000cd0 	.word	0x20000cd0

08001f90 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f96:	f107 0310 	add.w	r3, r7, #16
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fae:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <MX_TIM4_Init+0x94>)
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <MX_TIM4_Init+0x98>)
 8001fb2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108-1;
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <MX_TIM4_Init+0x94>)
 8001fb6:	226b      	movs	r2, #107	; 0x6b
 8001fb8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <MX_TIM4_Init+0x94>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001fc0:	4b18      	ldr	r3, [pc, #96]	; (8002024 <MX_TIM4_Init+0x94>)
 8001fc2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fc6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc8:	4b16      	ldr	r3, [pc, #88]	; (8002024 <MX_TIM4_Init+0x94>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <MX_TIM4_Init+0x94>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fd4:	4813      	ldr	r0, [pc, #76]	; (8002024 <MX_TIM4_Init+0x94>)
 8001fd6:	f004 fb1f 	bl	8006618 <HAL_TIM_Base_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001fe0:	f7ff fc6e 	bl	80018c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fea:	f107 0310 	add.w	r3, r7, #16
 8001fee:	4619      	mov	r1, r3
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <MX_TIM4_Init+0x94>)
 8001ff2:	f005 f96d 	bl	80072d0 <HAL_TIM_ConfigClockSource>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001ffc:	f7ff fc60 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002000:	2300      	movs	r3, #0
 8002002:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	4619      	mov	r1, r3
 800200c:	4805      	ldr	r0, [pc, #20]	; (8002024 <MX_TIM4_Init+0x94>)
 800200e:	f005 fef5 	bl	8007dfc <HAL_TIMEx_MasterConfigSynchronization>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002018:	f7ff fc52 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	3720      	adds	r7, #32
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000d1c 	.word	0x20000d1c
 8002028:	40000800 	.word	0x40000800

0800202c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a3b      	ldr	r2, [pc, #236]	; (8002128 <HAL_TIM_Base_MspInit+0xfc>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d144      	bne.n	80020c8 <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800203e:	4b3b      	ldr	r3, [pc, #236]	; (800212c <HAL_TIM_Base_MspInit+0x100>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	4a3a      	ldr	r2, [pc, #232]	; (800212c <HAL_TIM_Base_MspInit+0x100>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6453      	str	r3, [r2, #68]	; 0x44
 800204a:	4b38      	ldr	r3, [pc, #224]	; (800212c <HAL_TIM_Base_MspInit+0x100>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8002056:	4b36      	ldr	r3, [pc, #216]	; (8002130 <HAL_TIM_Base_MspInit+0x104>)
 8002058:	4a36      	ldr	r2, [pc, #216]	; (8002134 <HAL_TIM_Base_MspInit+0x108>)
 800205a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800205c:	4b34      	ldr	r3, [pc, #208]	; (8002130 <HAL_TIM_Base_MspInit+0x104>)
 800205e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002062:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002064:	4b32      	ldr	r3, [pc, #200]	; (8002130 <HAL_TIM_Base_MspInit+0x104>)
 8002066:	2240      	movs	r2, #64	; 0x40
 8002068:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800206a:	4b31      	ldr	r3, [pc, #196]	; (8002130 <HAL_TIM_Base_MspInit+0x104>)
 800206c:	2200      	movs	r2, #0
 800206e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002070:	4b2f      	ldr	r3, [pc, #188]	; (8002130 <HAL_TIM_Base_MspInit+0x104>)
 8002072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002076:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002078:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <HAL_TIM_Base_MspInit+0x104>)
 800207a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800207e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002080:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <HAL_TIM_Base_MspInit+0x104>)
 8002082:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002086:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002088:	4b29      	ldr	r3, [pc, #164]	; (8002130 <HAL_TIM_Base_MspInit+0x104>)
 800208a:	2200      	movs	r2, #0
 800208c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800208e:	4b28      	ldr	r3, [pc, #160]	; (8002130 <HAL_TIM_Base_MspInit+0x104>)
 8002090:	2200      	movs	r2, #0
 8002092:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002094:	4b26      	ldr	r3, [pc, #152]	; (8002130 <HAL_TIM_Base_MspInit+0x104>)
 8002096:	2200      	movs	r2, #0
 8002098:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800209a:	4825      	ldr	r0, [pc, #148]	; (8002130 <HAL_TIM_Base_MspInit+0x104>)
 800209c:	f001 fef4 	bl	8003e88 <HAL_DMA_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 80020a6:	f7ff fc0b 	bl	80018c0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a20      	ldr	r2, [pc, #128]	; (8002130 <HAL_TIM_Base_MspInit+0x104>)
 80020ae:	625a      	str	r2, [r3, #36]	; 0x24
 80020b0:	4a1f      	ldr	r2, [pc, #124]	; (8002130 <HAL_TIM_Base_MspInit+0x104>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2101      	movs	r1, #1
 80020ba:	2019      	movs	r0, #25
 80020bc:	f001 fead 	bl	8003e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020c0:	2019      	movs	r0, #25
 80020c2:	f001 fec6 	bl	8003e52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80020c6:	e02a      	b.n	800211e <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d0:	d10c      	bne.n	80020ec <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020d2:	4b16      	ldr	r3, [pc, #88]	; (800212c <HAL_TIM_Base_MspInit+0x100>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a15      	ldr	r2, [pc, #84]	; (800212c <HAL_TIM_Base_MspInit+0x100>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b13      	ldr	r3, [pc, #76]	; (800212c <HAL_TIM_Base_MspInit+0x100>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]
}
 80020ea:	e018      	b.n	800211e <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM4)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a11      	ldr	r2, [pc, #68]	; (8002138 <HAL_TIM_Base_MspInit+0x10c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d113      	bne.n	800211e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020f6:	4b0d      	ldr	r3, [pc, #52]	; (800212c <HAL_TIM_Base_MspInit+0x100>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	4a0c      	ldr	r2, [pc, #48]	; (800212c <HAL_TIM_Base_MspInit+0x100>)
 80020fc:	f043 0304 	orr.w	r3, r3, #4
 8002100:	6413      	str	r3, [r2, #64]	; 0x40
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_TIM_Base_MspInit+0x100>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2101      	movs	r1, #1
 8002112:	201e      	movs	r0, #30
 8002114:	f001 fe81 	bl	8003e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002118:	201e      	movs	r0, #30
 800211a:	f001 fe9a 	bl	8003e52 <HAL_NVIC_EnableIRQ>
}
 800211e:	bf00      	nop
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40010000 	.word	0x40010000
 800212c:	40023800 	.word	0x40023800
 8002130:	20000d68 	.word	0x20000d68
 8002134:	40026428 	.word	0x40026428
 8002138:	40000800 	.word	0x40000800

0800213c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a22      	ldr	r2, [pc, #136]	; (80021e4 <HAL_TIM_MspPostInit+0xa8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d11d      	bne.n	800219a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800215e:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <HAL_TIM_MspPostInit+0xac>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a21      	ldr	r2, [pc, #132]	; (80021e8 <HAL_TIM_MspPostInit+0xac>)
 8002164:	f043 0310 	orr.w	r3, r3, #16
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <HAL_TIM_MspPostInit+0xac>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800217a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	2300      	movs	r3, #0
 8002186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002188:	2301      	movs	r3, #1
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	4619      	mov	r1, r3
 8002192:	4816      	ldr	r0, [pc, #88]	; (80021ec <HAL_TIM_MspPostInit+0xb0>)
 8002194:	f002 fa12 	bl	80045bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002198:	e020      	b.n	80021dc <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM2)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a2:	d11b      	bne.n	80021dc <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a4:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <HAL_TIM_MspPostInit+0xac>)
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	4a0f      	ldr	r2, [pc, #60]	; (80021e8 <HAL_TIM_MspPostInit+0xac>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6313      	str	r3, [r2, #48]	; 0x30
 80021b0:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_TIM_MspPostInit+0xac>)
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021bc:	2308      	movs	r3, #8
 80021be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c8:	2303      	movs	r3, #3
 80021ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021cc:	2301      	movs	r3, #1
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4619      	mov	r1, r3
 80021d6:	4806      	ldr	r0, [pc, #24]	; (80021f0 <HAL_TIM_MspPostInit+0xb4>)
 80021d8:	f002 f9f0 	bl	80045bc <HAL_GPIO_Init>
}
 80021dc:	bf00      	nop
 80021de:	3728      	adds	r7, #40	; 0x28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40010000 	.word	0x40010000
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40020000 	.word	0x40020000

080021f4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <MX_USART3_UART_Init+0x58>)
 80021fa:	4a15      	ldr	r2, [pc, #84]	; (8002250 <MX_USART3_UART_Init+0x5c>)
 80021fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021fe:	4b13      	ldr	r3, [pc, #76]	; (800224c <MX_USART3_UART_Init+0x58>)
 8002200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002204:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <MX_USART3_UART_Init+0x58>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800220c:	4b0f      	ldr	r3, [pc, #60]	; (800224c <MX_USART3_UART_Init+0x58>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002212:	4b0e      	ldr	r3, [pc, #56]	; (800224c <MX_USART3_UART_Init+0x58>)
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <MX_USART3_UART_Init+0x58>)
 800221a:	220c      	movs	r2, #12
 800221c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <MX_USART3_UART_Init+0x58>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <MX_USART3_UART_Init+0x58>)
 8002226:	2200      	movs	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <MX_USART3_UART_Init+0x58>)
 800222c:	2200      	movs	r2, #0
 800222e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <MX_USART3_UART_Init+0x58>)
 8002232:	2200      	movs	r2, #0
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002236:	4805      	ldr	r0, [pc, #20]	; (800224c <MX_USART3_UART_Init+0x58>)
 8002238:	f005 ff0a 	bl	8008050 <HAL_UART_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002242:	f7ff fb3d 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000dc8 	.word	0x20000dc8
 8002250:	40004800 	.word	0x40004800

08002254 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b0ae      	sub	sp, #184	; 0xb8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	2290      	movs	r2, #144	; 0x90
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f007 f936 	bl	80094e6 <memset>
  if(uartHandle->Instance==USART3)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a22      	ldr	r2, [pc, #136]	; (8002308 <HAL_UART_MspInit+0xb4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d13c      	bne.n	80022fe <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002288:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800228a:	2300      	movs	r3, #0
 800228c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	4618      	mov	r0, r3
 8002294:	f003 f9cc 	bl	8005630 <HAL_RCCEx_PeriphCLKConfig>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800229e:	f7ff fb0f 	bl	80018c0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022a2:	4b1a      	ldr	r3, [pc, #104]	; (800230c <HAL_UART_MspInit+0xb8>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a19      	ldr	r2, [pc, #100]	; (800230c <HAL_UART_MspInit+0xb8>)
 80022a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b17      	ldr	r3, [pc, #92]	; (800230c <HAL_UART_MspInit+0xb8>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ba:	4b14      	ldr	r3, [pc, #80]	; (800230c <HAL_UART_MspInit+0xb8>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a13      	ldr	r2, [pc, #76]	; (800230c <HAL_UART_MspInit+0xb8>)
 80022c0:	f043 0308 	orr.w	r3, r3, #8
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_UART_MspInit+0xb8>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80022d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e6:	2303      	movs	r3, #3
 80022e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022ec:	2307      	movs	r3, #7
 80022ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022f6:	4619      	mov	r1, r3
 80022f8:	4805      	ldr	r0, [pc, #20]	; (8002310 <HAL_UART_MspInit+0xbc>)
 80022fa:	f002 f95f 	bl	80045bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022fe:	bf00      	nop
 8002300:	37b8      	adds	r7, #184	; 0xb8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40004800 	.word	0x40004800
 800230c:	40023800 	.word	0x40023800
 8002310:	40020c00 	.word	0x40020c00

08002314 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800235c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002328:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800232a:	e003      	b.n	8002334 <LoopCopyDataInit>

0800232c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800232e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002330:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002332:	3104      	adds	r1, #4

08002334 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002334:	480b      	ldr	r0, [pc, #44]	; (8002364 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002338:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800233a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800233c:	d3f6      	bcc.n	800232c <CopyDataInit>
  ldr  r2, =_sbss
 800233e:	4a0b      	ldr	r2, [pc, #44]	; (800236c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002340:	e002      	b.n	8002348 <LoopFillZerobss>

08002342 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002342:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002344:	f842 3b04 	str.w	r3, [r2], #4

08002348 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800234a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800234c:	d3f9      	bcc.n	8002342 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800234e:	f7ff fcc7 	bl	8001ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002352:	f007 f921 	bl	8009598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002356:	f7fe fdfd 	bl	8000f54 <main>
  bx  lr    
 800235a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800235c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002360:	08032230 	.word	0x08032230
  ldr  r0, =_sdata
 8002364:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002368:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 800236c:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8002370:	20000fa0 	.word	0x20000fa0

08002374 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002374:	e7fe      	b.n	8002374 <ADC_IRQHandler>
	...

08002378 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af02      	add	r7, sp, #8
 800237e:	4604      	mov	r4, r0
 8002380:	4608      	mov	r0, r1
 8002382:	4611      	mov	r1, r2
 8002384:	461a      	mov	r2, r3
 8002386:	4623      	mov	r3, r4
 8002388:	71fb      	strb	r3, [r7, #7]
 800238a:	4603      	mov	r3, r0
 800238c:	71bb      	strb	r3, [r7, #6]
 800238e:	460b      	mov	r3, r1
 8002390:	717b      	strb	r3, [r7, #5]
 8002392:	4613      	mov	r3, r2
 8002394:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 800239a:	7dfb      	ldrb	r3, [r7, #23]
 800239c:	2b1f      	cmp	r3, #31
 800239e:	d802      	bhi.n	80023a6 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	71fb      	strb	r3, [r7, #7]
 80023a4:	e002      	b.n	80023ac <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80023a6:	7dfb      	ldrb	r3, [r7, #23]
 80023a8:	3b20      	subs	r3, #32
 80023aa:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80023ac:	2300      	movs	r3, #0
 80023ae:	753b      	strb	r3, [r7, #20]
 80023b0:	e012      	b.n	80023d8 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80023b2:	7dfa      	ldrb	r2, [r7, #23]
 80023b4:	7d38      	ldrb	r0, [r7, #20]
 80023b6:	7d39      	ldrb	r1, [r7, #20]
 80023b8:	4c3b      	ldr	r4, [pc, #236]	; (80024a8 <ILI9341_Draw_Char+0x130>)
 80023ba:	4613      	mov	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4413      	add	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4423      	add	r3, r4
 80023c4:	4403      	add	r3, r0
 80023c6:	781a      	ldrb	r2, [r3, #0]
 80023c8:	f101 0318 	add.w	r3, r1, #24
 80023cc:	443b      	add	r3, r7
 80023ce:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80023d2:	7d3b      	ldrb	r3, [r7, #20]
 80023d4:	3301      	adds	r3, #1
 80023d6:	753b      	strb	r3, [r7, #20]
 80023d8:	7d3b      	ldrb	r3, [r7, #20]
 80023da:	2b05      	cmp	r3, #5
 80023dc:	d9e9      	bls.n	80023b2 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80023de:	79bb      	ldrb	r3, [r7, #6]
 80023e0:	b298      	uxth	r0, r3
 80023e2:	797b      	ldrb	r3, [r7, #5]
 80023e4:	b299      	uxth	r1, r3
 80023e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023e8:	461a      	mov	r2, r3
 80023ea:	0052      	lsls	r2, r2, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	b29c      	uxth	r4, r3
 80023f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	4623      	mov	r3, r4
 80023fe:	f000 fde9 	bl	8002fd4 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002402:	2300      	movs	r3, #0
 8002404:	757b      	strb	r3, [r7, #21]
 8002406:	e047      	b.n	8002498 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002408:	2300      	movs	r3, #0
 800240a:	75bb      	strb	r3, [r7, #22]
 800240c:	e03e      	b.n	800248c <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 800240e:	7d7b      	ldrb	r3, [r7, #21]
 8002410:	3318      	adds	r3, #24
 8002412:	443b      	add	r3, r7
 8002414:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002418:	461a      	mov	r2, r3
 800241a:	7dbb      	ldrb	r3, [r7, #22]
 800241c:	fa42 f303 	asr.w	r3, r2, r3
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d02e      	beq.n	8002486 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8002428:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800242a:	2b01      	cmp	r3, #1
 800242c:	d110      	bne.n	8002450 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 800242e:	79bb      	ldrb	r3, [r7, #6]
 8002430:	b29a      	uxth	r2, r3
 8002432:	7d7b      	ldrb	r3, [r7, #21]
 8002434:	b29b      	uxth	r3, r3
 8002436:	4413      	add	r3, r2
 8002438:	b298      	uxth	r0, r3
 800243a:	797b      	ldrb	r3, [r7, #5]
 800243c:	b29a      	uxth	r2, r3
 800243e:	7dbb      	ldrb	r3, [r7, #22]
 8002440:	b29b      	uxth	r3, r3
 8002442:	4413      	add	r3, r2
 8002444:	b29b      	uxth	r3, r3
 8002446:	887a      	ldrh	r2, [r7, #2]
 8002448:	4619      	mov	r1, r3
 800244a:	f000 fce9 	bl	8002e20 <ILI9341_Draw_Pixel>
 800244e:	e01a      	b.n	8002486 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8002450:	79bb      	ldrb	r3, [r7, #6]
 8002452:	b29a      	uxth	r2, r3
 8002454:	7d7b      	ldrb	r3, [r7, #21]
 8002456:	b29b      	uxth	r3, r3
 8002458:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800245a:	fb11 f303 	smulbb	r3, r1, r3
 800245e:	b29b      	uxth	r3, r3
 8002460:	4413      	add	r3, r2
 8002462:	b298      	uxth	r0, r3
 8002464:	797b      	ldrb	r3, [r7, #5]
 8002466:	b29a      	uxth	r2, r3
 8002468:	7dbb      	ldrb	r3, [r7, #22]
 800246a:	b29b      	uxth	r3, r3
 800246c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800246e:	fb11 f303 	smulbb	r3, r1, r3
 8002472:	b29b      	uxth	r3, r3
 8002474:	4413      	add	r3, r2
 8002476:	b299      	uxth	r1, r3
 8002478:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800247a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800247c:	887b      	ldrh	r3, [r7, #2]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	4623      	mov	r3, r4
 8002482:	f000 fda7 	bl	8002fd4 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002486:	7dbb      	ldrb	r3, [r7, #22]
 8002488:	3301      	adds	r3, #1
 800248a:	75bb      	strb	r3, [r7, #22]
 800248c:	7dbb      	ldrb	r3, [r7, #22]
 800248e:	2b07      	cmp	r3, #7
 8002490:	d9bd      	bls.n	800240e <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002492:	7d7b      	ldrb	r3, [r7, #21]
 8002494:	3301      	adds	r3, #1
 8002496:	757b      	strb	r3, [r7, #21]
 8002498:	7d7b      	ldrb	r3, [r7, #21]
 800249a:	2b05      	cmp	r3, #5
 800249c:	d9b4      	bls.n	8002408 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 800249e:	bf00      	nop
 80024a0:	bf00      	nop
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd90      	pop	{r4, r7, pc}
 80024a8:	08031a8c 	.word	0x08031a8c

080024ac <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	4608      	mov	r0, r1
 80024b6:	4611      	mov	r1, r2
 80024b8:	461a      	mov	r2, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	70fb      	strb	r3, [r7, #3]
 80024be:	460b      	mov	r3, r1
 80024c0:	70bb      	strb	r3, [r7, #2]
 80024c2:	4613      	mov	r3, r2
 80024c4:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80024c6:	e017      	b.n	80024f8 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	7818      	ldrb	r0, [r3, #0]
 80024d0:	883c      	ldrh	r4, [r7, #0]
 80024d2:	78ba      	ldrb	r2, [r7, #2]
 80024d4:	78f9      	ldrb	r1, [r7, #3]
 80024d6:	8bbb      	ldrh	r3, [r7, #28]
 80024d8:	9301      	str	r3, [sp, #4]
 80024da:	8b3b      	ldrh	r3, [r7, #24]
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	4623      	mov	r3, r4
 80024e0:	f7ff ff4a 	bl	8002378 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80024e4:	8b3b      	ldrh	r3, [r7, #24]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	0052      	lsls	r2, r2, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	4413      	add	r3, r2
 80024f6:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1e3      	bne.n	80024c8 <ILI9341_Draw_Text+0x1c>
    }
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	bd90      	pop	{r4, r7, pc}
	...

0800250c <ILI9341_Draw_Image>:

/*Draws a full screen picture from flash. Image converted from RGB .jpeg/other to C array using online converter*/
//USING CONVERTER: http://www.digole.com/tools/PicturetoC_Hex_converter.php
//65K colour (2Bytes / Pixel)
void ILI9341_Draw_Image(const char* Image_Array, uint8_t Orientation)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8002512:	af00      	add	r7, sp, #0
 8002514:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002518:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800251c:	6018      	str	r0, [r3, #0]
 800251e:	460a      	mov	r2, r1
 8002520:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002524:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8002528:	701a      	strb	r2, [r3, #0]
	if(Orientation == SCREEN_HORIZONTAL_1)
 800252a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800252e:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d15e      	bne.n	80025f6 <ILI9341_Draw_Image+0xea>
	{
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8002538:	2001      	movs	r0, #1
 800253a:	f000 fa67 	bl	8002a0c <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 800253e:	23f0      	movs	r3, #240	; 0xf0
 8002540:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002544:	2100      	movs	r1, #0
 8002546:	2000      	movs	r0, #0
 8002548:	f000 f9f6 	bl	8002938 <ILI9341_Set_Address>
			
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800254c:	2201      	movs	r2, #1
 800254e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002552:	48c4      	ldr	r0, [pc, #784]	; (8002864 <ILI9341_Draw_Image+0x358>)
 8002554:	f002 f9f6 	bl	8004944 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002558:	2200      	movs	r2, #0
 800255a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800255e:	48c1      	ldr	r0, [pc, #772]	; (8002864 <ILI9341_Draw_Image+0x358>)
 8002560:	f002 f9f0 	bl	8004944 <HAL_GPIO_WritePin>
		
		unsigned char Temp_small_buffer[BURST_MAX_SIZE];
		uint32_t counter = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 800256a:	2300      	movs	r3, #0
 800256c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8002570:	e035      	b.n	80025de <ILI9341_Draw_Image+0xd2>
		{			
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002572:	2300      	movs	r3, #0
 8002574:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8002578:	e019      	b.n	80025ae <ILI9341_Draw_Image+0xa2>
				{
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 800257a:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 800257e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002582:	4413      	add	r3, r2
 8002584:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8002588:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	4413      	add	r3, r2
 8002590:	7819      	ldrb	r1, [r3, #0]
 8002592:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002596:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 800259a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800259e:	4413      	add	r3, r2
 80025a0:	460a      	mov	r2, r1
 80025a2:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80025a4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80025a8:	3301      	adds	r3, #1
 80025aa:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80025ae:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80025b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025b6:	d3e0      	bcc.n	800257a <ILI9341_Draw_Image+0x6e>
				}						
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 80025b8:	f107 010c 	add.w	r1, r7, #12
 80025bc:	230a      	movs	r3, #10
 80025be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80025c2:	48a9      	ldr	r0, [pc, #676]	; (8002868 <ILI9341_Draw_Image+0x35c>)
 80025c4:	f003 fd31 	bl	800602a <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 80025c8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80025cc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80025d0:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80025d4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80025d8:	3301      	adds	r3, #1
 80025da:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 80025de:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80025e2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80025e6:	d9c4      	bls.n	8002572 <ILI9341_Draw_Image+0x66>
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80025e8:	2201      	movs	r2, #1
 80025ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025ee:	489d      	ldr	r0, [pc, #628]	; (8002864 <ILI9341_Draw_Image+0x358>)
 80025f0:	f002 f9a8 	bl	8004944 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
				counter += BURST_MAX_SIZE;			
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	}
}
 80025f4:	e130      	b.n	8002858 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_HORIZONTAL_2)
 80025f6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80025fa:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d15e      	bne.n	80026c2 <ILI9341_Draw_Image+0x1b6>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8002604:	2003      	movs	r0, #3
 8002606:	f000 fa01 	bl	8002a0c <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 800260a:	23f0      	movs	r3, #240	; 0xf0
 800260c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002610:	2100      	movs	r1, #0
 8002612:	2000      	movs	r0, #0
 8002614:	f000 f990 	bl	8002938 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002618:	2201      	movs	r2, #1
 800261a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800261e:	4891      	ldr	r0, [pc, #580]	; (8002864 <ILI9341_Draw_Image+0x358>)
 8002620:	f002 f990 	bl	8004944 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002624:	2200      	movs	r2, #0
 8002626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800262a:	488e      	ldr	r0, [pc, #568]	; (8002864 <ILI9341_Draw_Image+0x358>)
 800262c:	f002 f98a 	bl	8004944 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002636:	2300      	movs	r3, #0
 8002638:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800263c:	e035      	b.n	80026aa <ILI9341_Draw_Image+0x19e>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800263e:	2300      	movs	r3, #0
 8002640:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8002644:	e019      	b.n	800267a <ILI9341_Draw_Image+0x16e>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002646:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800264a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800264e:	4413      	add	r3, r2
 8002650:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8002654:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	4413      	add	r3, r2
 800265c:	7819      	ldrb	r1, [r3, #0]
 800265e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002662:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8002666:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800266a:	4413      	add	r3, r2
 800266c:	460a      	mov	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002670:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002674:	3301      	adds	r3, #1
 8002676:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800267a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800267e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002682:	d3e0      	bcc.n	8002646 <ILI9341_Draw_Image+0x13a>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002684:	f107 010c 	add.w	r1, r7, #12
 8002688:	230a      	movs	r3, #10
 800268a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800268e:	4876      	ldr	r0, [pc, #472]	; (8002868 <ILI9341_Draw_Image+0x35c>)
 8002690:	f003 fccb 	bl	800602a <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002694:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002698:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800269c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80026a0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80026a4:	3301      	adds	r3, #1
 80026a6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80026aa:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80026ae:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80026b2:	d9c4      	bls.n	800263e <ILI9341_Draw_Image+0x132>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80026b4:	2201      	movs	r2, #1
 80026b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026ba:	486a      	ldr	r0, [pc, #424]	; (8002864 <ILI9341_Draw_Image+0x358>)
 80026bc:	f002 f942 	bl	8004944 <HAL_GPIO_WritePin>
}
 80026c0:	e0ca      	b.n	8002858 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_2)
 80026c2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80026c6:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d15e      	bne.n	800278e <ILI9341_Draw_Image+0x282>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 80026d0:	2002      	movs	r0, #2
 80026d2:	f000 f99b 	bl	8002a0c <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 80026d6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80026da:	22f0      	movs	r2, #240	; 0xf0
 80026dc:	2100      	movs	r1, #0
 80026de:	2000      	movs	r0, #0
 80026e0:	f000 f92a 	bl	8002938 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80026e4:	2201      	movs	r2, #1
 80026e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026ea:	485e      	ldr	r0, [pc, #376]	; (8002864 <ILI9341_Draw_Image+0x358>)
 80026ec:	f002 f92a 	bl	8004944 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80026f0:	2200      	movs	r2, #0
 80026f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026f6:	485b      	ldr	r0, [pc, #364]	; (8002864 <ILI9341_Draw_Image+0x358>)
 80026f8:	f002 f924 	bl	8004944 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002702:	2300      	movs	r3, #0
 8002704:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002708:	e035      	b.n	8002776 <ILI9341_Draw_Image+0x26a>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800270a:	2300      	movs	r3, #0
 800270c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002710:	e019      	b.n	8002746 <ILI9341_Draw_Image+0x23a>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002712:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002716:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800271a:	4413      	add	r3, r2
 800271c:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8002720:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	4413      	add	r3, r2
 8002728:	7819      	ldrb	r1, [r3, #0]
 800272a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800272e:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8002732:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002736:	4413      	add	r3, r2
 8002738:	460a      	mov	r2, r1
 800273a:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800273c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002740:	3301      	adds	r3, #1
 8002742:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002746:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800274a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800274e:	d3e0      	bcc.n	8002712 <ILI9341_Draw_Image+0x206>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002750:	f107 010c 	add.w	r1, r7, #12
 8002754:	230a      	movs	r3, #10
 8002756:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800275a:	4843      	ldr	r0, [pc, #268]	; (8002868 <ILI9341_Draw_Image+0x35c>)
 800275c:	f003 fc65 	bl	800602a <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002760:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002764:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002768:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 800276c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002770:	3301      	adds	r3, #1
 8002772:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002776:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800277a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800277e:	d9c4      	bls.n	800270a <ILI9341_Draw_Image+0x1fe>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002780:	2201      	movs	r2, #1
 8002782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002786:	4837      	ldr	r0, [pc, #220]	; (8002864 <ILI9341_Draw_Image+0x358>)
 8002788:	f002 f8dc 	bl	8004944 <HAL_GPIO_WritePin>
}
 800278c:	e064      	b.n	8002858 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_1)
 800278e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002792:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d15d      	bne.n	8002858 <ILI9341_Draw_Image+0x34c>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800279c:	2000      	movs	r0, #0
 800279e:	f000 f935 	bl	8002a0c <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 80027a2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80027a6:	22f0      	movs	r2, #240	; 0xf0
 80027a8:	2100      	movs	r1, #0
 80027aa:	2000      	movs	r0, #0
 80027ac:	f000 f8c4 	bl	8002938 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80027b0:	2201      	movs	r2, #1
 80027b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027b6:	482b      	ldr	r0, [pc, #172]	; (8002864 <ILI9341_Draw_Image+0x358>)
 80027b8:	f002 f8c4 	bl	8004944 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80027bc:	2200      	movs	r2, #0
 80027be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027c2:	4828      	ldr	r0, [pc, #160]	; (8002864 <ILI9341_Draw_Image+0x358>)
 80027c4:	f002 f8be 	bl	8004944 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80027d4:	e035      	b.n	8002842 <ILI9341_Draw_Image+0x336>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 80027dc:	e019      	b.n	8002812 <ILI9341_Draw_Image+0x306>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 80027de:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80027e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027e6:	4413      	add	r3, r2
 80027e8:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80027ec:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	7819      	ldrb	r1, [r3, #0]
 80027f6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80027fa:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 80027fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002802:	4413      	add	r3, r2
 8002804:	460a      	mov	r2, r1
 8002806:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002808:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800280c:	3301      	adds	r3, #1
 800280e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8002812:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002816:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800281a:	d3e0      	bcc.n	80027de <ILI9341_Draw_Image+0x2d2>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 800281c:	f107 010c 	add.w	r1, r7, #12
 8002820:	230a      	movs	r3, #10
 8002822:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002826:	4810      	ldr	r0, [pc, #64]	; (8002868 <ILI9341_Draw_Image+0x35c>)
 8002828:	f003 fbff 	bl	800602a <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 800282c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002830:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002834:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002838:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800283c:	3301      	adds	r3, #1
 800283e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002842:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002846:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800284a:	d9c4      	bls.n	80027d6 <ILI9341_Draw_Image+0x2ca>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800284c:	2201      	movs	r2, #1
 800284e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002852:	4804      	ldr	r0, [pc, #16]	; (8002864 <ILI9341_Draw_Image+0x358>)
 8002854:	f002 f876 	bl	8004944 <HAL_GPIO_WritePin>
}
 8002858:	bf00      	nop
 800285a:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40020800 	.word	0x40020800
 8002868:	20000c1c 	.word	0x20000c1c

0800286c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8002870:	f7ff f872 	bl	8001958 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8002874:	f7fd ffea 	bl	800084c <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002878:	2200      	movs	r2, #0
 800287a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800287e:	4802      	ldr	r0, [pc, #8]	; (8002888 <ILI9341_SPI_Init+0x1c>)
 8002880:	f002 f860 	bl	8004944 <HAL_GPIO_WritePin>
}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40020800 	.word	0x40020800

0800288c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8002896:	1df9      	adds	r1, r7, #7
 8002898:	2301      	movs	r3, #1
 800289a:	2201      	movs	r2, #1
 800289c:	4803      	ldr	r0, [pc, #12]	; (80028ac <ILI9341_SPI_Send+0x20>)
 800289e:	f003 fbc4 	bl	800602a <HAL_SPI_Transmit>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000c1c 	.word	0x20000c1c

080028b0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80028ba:	2200      	movs	r2, #0
 80028bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028c0:	480b      	ldr	r0, [pc, #44]	; (80028f0 <ILI9341_Write_Command+0x40>)
 80028c2:	f002 f83f 	bl	8004944 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80028c6:	2200      	movs	r2, #0
 80028c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028cc:	4808      	ldr	r0, [pc, #32]	; (80028f0 <ILI9341_Write_Command+0x40>)
 80028ce:	f002 f839 	bl	8004944 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ffd9 	bl	800288c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80028da:	2201      	movs	r2, #1
 80028dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028e0:	4803      	ldr	r0, [pc, #12]	; (80028f0 <ILI9341_Write_Command+0x40>)
 80028e2:	f002 f82f 	bl	8004944 <HAL_GPIO_WritePin>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40020800 	.word	0x40020800

080028f4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80028fe:	2201      	movs	r2, #1
 8002900:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002904:	480b      	ldr	r0, [pc, #44]	; (8002934 <ILI9341_Write_Data+0x40>)
 8002906:	f002 f81d 	bl	8004944 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800290a:	2200      	movs	r2, #0
 800290c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002910:	4808      	ldr	r0, [pc, #32]	; (8002934 <ILI9341_Write_Data+0x40>)
 8002912:	f002 f817 	bl	8004944 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ffb7 	bl	800288c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800291e:	2201      	movs	r2, #1
 8002920:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002924:	4803      	ldr	r0, [pc, #12]	; (8002934 <ILI9341_Write_Data+0x40>)
 8002926:	f002 f80d 	bl	8004944 <HAL_GPIO_WritePin>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40020800 	.word	0x40020800

08002938 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4604      	mov	r4, r0
 8002940:	4608      	mov	r0, r1
 8002942:	4611      	mov	r1, r2
 8002944:	461a      	mov	r2, r3
 8002946:	4623      	mov	r3, r4
 8002948:	80fb      	strh	r3, [r7, #6]
 800294a:	4603      	mov	r3, r0
 800294c:	80bb      	strh	r3, [r7, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	807b      	strh	r3, [r7, #2]
 8002952:	4613      	mov	r3, r2
 8002954:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8002956:	202a      	movs	r0, #42	; 0x2a
 8002958:	f7ff ffaa 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	0a1b      	lsrs	r3, r3, #8
 8002960:	b29b      	uxth	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ffc5 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff ffc0 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002974:	887b      	ldrh	r3, [r7, #2]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	b29b      	uxth	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ffb9 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8002982:	887b      	ldrh	r3, [r7, #2]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff ffb4 	bl	80028f4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 800298c:	202b      	movs	r0, #43	; 0x2b
 800298e:	f7ff ff8f 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8002992:	88bb      	ldrh	r3, [r7, #4]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	b29b      	uxth	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff ffaa 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80029a0:	88bb      	ldrh	r3, [r7, #4]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ffa5 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80029aa:	883b      	ldrh	r3, [r7, #0]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff ff9e 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80029b8:	883b      	ldrh	r3, [r7, #0]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff99 	bl	80028f4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80029c2:	202c      	movs	r0, #44	; 0x2c
 80029c4:	f7ff ff74 	bl	80028b0 <ILI9341_Write_Command>
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd90      	pop	{r4, r7, pc}

080029d0 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80029d4:	2201      	movs	r2, #1
 80029d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029da:	480b      	ldr	r0, [pc, #44]	; (8002a08 <ILI9341_Reset+0x38>)
 80029dc:	f001 ffb2 	bl	8004944 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80029e0:	20c8      	movs	r0, #200	; 0xc8
 80029e2:	f000 fced 	bl	80033c0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80029e6:	2200      	movs	r2, #0
 80029e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029ec:	4806      	ldr	r0, [pc, #24]	; (8002a08 <ILI9341_Reset+0x38>)
 80029ee:	f001 ffa9 	bl	8004944 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80029f2:	20c8      	movs	r0, #200	; 0xc8
 80029f4:	f000 fce4 	bl	80033c0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80029f8:	2201      	movs	r2, #1
 80029fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029fe:	4802      	ldr	r0, [pc, #8]	; (8002a08 <ILI9341_Reset+0x38>)
 8002a00:	f001 ffa0 	bl	8004944 <HAL_GPIO_WritePin>
}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40020800 	.word	0x40020800

08002a0c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8002a1a:	2036      	movs	r0, #54	; 0x36
 8002a1c:	f7ff ff48 	bl	80028b0 <ILI9341_Write_Command>
HAL_Delay(1);
 8002a20:	2001      	movs	r0, #1
 8002a22:	f000 fccd 	bl	80033c0 <HAL_Delay>
	
switch(screen_rotation) 
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d837      	bhi.n	8002a9c <ILI9341_Set_Rotation+0x90>
 8002a2c:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <ILI9341_Set_Rotation+0x28>)
 8002a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a32:	bf00      	nop
 8002a34:	08002a45 	.word	0x08002a45
 8002a38:	08002a5b 	.word	0x08002a5b
 8002a3c:	08002a71 	.word	0x08002a71
 8002a40:	08002a87 	.word	0x08002a87
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8002a44:	2048      	movs	r0, #72	; 0x48
 8002a46:	f7ff ff55 	bl	80028f4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8002a4a:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <ILI9341_Set_Rotation+0x9c>)
 8002a4c:	22f0      	movs	r2, #240	; 0xf0
 8002a4e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002a50:	4b16      	ldr	r3, [pc, #88]	; (8002aac <ILI9341_Set_Rotation+0xa0>)
 8002a52:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a56:	801a      	strh	r2, [r3, #0]
			break;
 8002a58:	e021      	b.n	8002a9e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8002a5a:	2028      	movs	r0, #40	; 0x28
 8002a5c:	f7ff ff4a 	bl	80028f4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002a60:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <ILI9341_Set_Rotation+0x9c>)
 8002a62:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a66:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002a68:	4b10      	ldr	r3, [pc, #64]	; (8002aac <ILI9341_Set_Rotation+0xa0>)
 8002a6a:	22f0      	movs	r2, #240	; 0xf0
 8002a6c:	801a      	strh	r2, [r3, #0]
			break;
 8002a6e:	e016      	b.n	8002a9e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002a70:	2088      	movs	r0, #136	; 0x88
 8002a72:	f7ff ff3f 	bl	80028f4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <ILI9341_Set_Rotation+0x9c>)
 8002a78:	22f0      	movs	r2, #240	; 0xf0
 8002a7a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <ILI9341_Set_Rotation+0xa0>)
 8002a7e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a82:	801a      	strh	r2, [r3, #0]
			break;
 8002a84:	e00b      	b.n	8002a9e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8002a86:	20e8      	movs	r0, #232	; 0xe8
 8002a88:	f7ff ff34 	bl	80028f4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <ILI9341_Set_Rotation+0x9c>)
 8002a8e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a92:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <ILI9341_Set_Rotation+0xa0>)
 8002a96:	22f0      	movs	r2, #240	; 0xf0
 8002a98:	801a      	strh	r2, [r3, #0]
			break;
 8002a9a:	e000      	b.n	8002a9e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002a9c:	bf00      	nop
	}
}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000006 	.word	0x20000006
 8002aac:	20000004 	.word	0x20000004

08002ab0 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002aba:	4802      	ldr	r0, [pc, #8]	; (8002ac4 <ILI9341_Enable+0x14>)
 8002abc:	f001 ff42 	bl	8004944 <HAL_GPIO_WritePin>
}
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40020800 	.word	0x40020800

08002ac8 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002acc:	f7ff fff0 	bl	8002ab0 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002ad0:	f7ff fecc 	bl	800286c <ILI9341_SPI_Init>
ILI9341_Reset();
 8002ad4:	f7ff ff7c 	bl	80029d0 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002ad8:	2001      	movs	r0, #1
 8002ada:	f7ff fee9 	bl	80028b0 <ILI9341_Write_Command>
HAL_Delay(1000);
 8002ade:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ae2:	f000 fc6d 	bl	80033c0 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8002ae6:	20cb      	movs	r0, #203	; 0xcb
 8002ae8:	f7ff fee2 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002aec:	2039      	movs	r0, #57	; 0x39
 8002aee:	f7ff ff01 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8002af2:	202c      	movs	r0, #44	; 0x2c
 8002af4:	f7ff fefe 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002af8:	2000      	movs	r0, #0
 8002afa:	f7ff fefb 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8002afe:	2034      	movs	r0, #52	; 0x34
 8002b00:	f7ff fef8 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002b04:	2002      	movs	r0, #2
 8002b06:	f7ff fef5 	bl	80028f4 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8002b0a:	20cf      	movs	r0, #207	; 0xcf
 8002b0c:	f7ff fed0 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7ff feef 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002b16:	20c1      	movs	r0, #193	; 0xc1
 8002b18:	f7ff feec 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8002b1c:	2030      	movs	r0, #48	; 0x30
 8002b1e:	f7ff fee9 	bl	80028f4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8002b22:	20e8      	movs	r0, #232	; 0xe8
 8002b24:	f7ff fec4 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8002b28:	2085      	movs	r0, #133	; 0x85
 8002b2a:	f7ff fee3 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f7ff fee0 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002b34:	2078      	movs	r0, #120	; 0x78
 8002b36:	f7ff fedd 	bl	80028f4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8002b3a:	20ea      	movs	r0, #234	; 0xea
 8002b3c:	f7ff feb8 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002b40:	2000      	movs	r0, #0
 8002b42:	f7ff fed7 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002b46:	2000      	movs	r0, #0
 8002b48:	f7ff fed4 	bl	80028f4 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8002b4c:	20ed      	movs	r0, #237	; 0xed
 8002b4e:	f7ff feaf 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8002b52:	2064      	movs	r0, #100	; 0x64
 8002b54:	f7ff fece 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002b58:	2003      	movs	r0, #3
 8002b5a:	f7ff fecb 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8002b5e:	2012      	movs	r0, #18
 8002b60:	f7ff fec8 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002b64:	2081      	movs	r0, #129	; 0x81
 8002b66:	f7ff fec5 	bl	80028f4 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8002b6a:	20f7      	movs	r0, #247	; 0xf7
 8002b6c:	f7ff fea0 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002b70:	2020      	movs	r0, #32
 8002b72:	f7ff febf 	bl	80028f4 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8002b76:	20c0      	movs	r0, #192	; 0xc0
 8002b78:	f7ff fe9a 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002b7c:	2023      	movs	r0, #35	; 0x23
 8002b7e:	f7ff feb9 	bl	80028f4 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8002b82:	20c1      	movs	r0, #193	; 0xc1
 8002b84:	f7ff fe94 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002b88:	2010      	movs	r0, #16
 8002b8a:	f7ff feb3 	bl	80028f4 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8002b8e:	20c5      	movs	r0, #197	; 0xc5
 8002b90:	f7ff fe8e 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002b94:	203e      	movs	r0, #62	; 0x3e
 8002b96:	f7ff fead 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002b9a:	2028      	movs	r0, #40	; 0x28
 8002b9c:	f7ff feaa 	bl	80028f4 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002ba0:	20c7      	movs	r0, #199	; 0xc7
 8002ba2:	f7ff fe85 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8002ba6:	2086      	movs	r0, #134	; 0x86
 8002ba8:	f7ff fea4 	bl	80028f4 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002bac:	2036      	movs	r0, #54	; 0x36
 8002bae:	f7ff fe7f 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8002bb2:	2048      	movs	r0, #72	; 0x48
 8002bb4:	f7ff fe9e 	bl	80028f4 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002bb8:	203a      	movs	r0, #58	; 0x3a
 8002bba:	f7ff fe79 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002bbe:	2055      	movs	r0, #85	; 0x55
 8002bc0:	f7ff fe98 	bl	80028f4 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8002bc4:	20b1      	movs	r0, #177	; 0xb1
 8002bc6:	f7ff fe73 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f7ff fe92 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002bd0:	2018      	movs	r0, #24
 8002bd2:	f7ff fe8f 	bl	80028f4 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8002bd6:	20b6      	movs	r0, #182	; 0xb6
 8002bd8:	f7ff fe6a 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002bdc:	2008      	movs	r0, #8
 8002bde:	f7ff fe89 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8002be2:	2082      	movs	r0, #130	; 0x82
 8002be4:	f7ff fe86 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002be8:	2027      	movs	r0, #39	; 0x27
 8002bea:	f7ff fe83 	bl	80028f4 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8002bee:	20f2      	movs	r0, #242	; 0xf2
 8002bf0:	f7ff fe5e 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f7ff fe7d 	bl	80028f4 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8002bfa:	2026      	movs	r0, #38	; 0x26
 8002bfc:	f7ff fe58 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002c00:	2001      	movs	r0, #1
 8002c02:	f7ff fe77 	bl	80028f4 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8002c06:	20e0      	movs	r0, #224	; 0xe0
 8002c08:	f7ff fe52 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8002c0c:	200f      	movs	r0, #15
 8002c0e:	f7ff fe71 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002c12:	2031      	movs	r0, #49	; 0x31
 8002c14:	f7ff fe6e 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8002c18:	202b      	movs	r0, #43	; 0x2b
 8002c1a:	f7ff fe6b 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002c1e:	200c      	movs	r0, #12
 8002c20:	f7ff fe68 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002c24:	200e      	movs	r0, #14
 8002c26:	f7ff fe65 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002c2a:	2008      	movs	r0, #8
 8002c2c:	f7ff fe62 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002c30:	204e      	movs	r0, #78	; 0x4e
 8002c32:	f7ff fe5f 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8002c36:	20f1      	movs	r0, #241	; 0xf1
 8002c38:	f7ff fe5c 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8002c3c:	2037      	movs	r0, #55	; 0x37
 8002c3e:	f7ff fe59 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002c42:	2007      	movs	r0, #7
 8002c44:	f7ff fe56 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8002c48:	2010      	movs	r0, #16
 8002c4a:	f7ff fe53 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002c4e:	2003      	movs	r0, #3
 8002c50:	f7ff fe50 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002c54:	200e      	movs	r0, #14
 8002c56:	f7ff fe4d 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8002c5a:	2009      	movs	r0, #9
 8002c5c:	f7ff fe4a 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002c60:	2000      	movs	r0, #0
 8002c62:	f7ff fe47 	bl	80028f4 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002c66:	20e1      	movs	r0, #225	; 0xe1
 8002c68:	f7ff fe22 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7ff fe41 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002c72:	200e      	movs	r0, #14
 8002c74:	f7ff fe3e 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002c78:	2014      	movs	r0, #20
 8002c7a:	f7ff fe3b 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002c7e:	2003      	movs	r0, #3
 8002c80:	f7ff fe38 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002c84:	2011      	movs	r0, #17
 8002c86:	f7ff fe35 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002c8a:	2007      	movs	r0, #7
 8002c8c:	f7ff fe32 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002c90:	2031      	movs	r0, #49	; 0x31
 8002c92:	f7ff fe2f 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002c96:	20c1      	movs	r0, #193	; 0xc1
 8002c98:	f7ff fe2c 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002c9c:	2048      	movs	r0, #72	; 0x48
 8002c9e:	f7ff fe29 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002ca2:	2008      	movs	r0, #8
 8002ca4:	f7ff fe26 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002ca8:	200f      	movs	r0, #15
 8002caa:	f7ff fe23 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002cae:	200c      	movs	r0, #12
 8002cb0:	f7ff fe20 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002cb4:	2031      	movs	r0, #49	; 0x31
 8002cb6:	f7ff fe1d 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8002cba:	2036      	movs	r0, #54	; 0x36
 8002cbc:	f7ff fe1a 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002cc0:	200f      	movs	r0, #15
 8002cc2:	f7ff fe17 	bl	80028f4 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8002cc6:	2011      	movs	r0, #17
 8002cc8:	f7ff fdf2 	bl	80028b0 <ILI9341_Write_Command>
HAL_Delay(120);
 8002ccc:	2078      	movs	r0, #120	; 0x78
 8002cce:	f000 fb77 	bl	80033c0 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002cd2:	2029      	movs	r0, #41	; 0x29
 8002cd4:	f7ff fdec 	bl	80028b0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f7ff fe97 	bl	8002a0c <ILI9341_Set_Rotation>
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ce8:	b08d      	sub	sp, #52	; 0x34
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	6039      	str	r1, [r7, #0]
 8002cf0:	80fb      	strh	r3, [r7, #6]
 8002cf2:	466b      	mov	r3, sp
 8002cf4:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d02:	d202      	bcs.n	8002d0a <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d08:	e002      	b.n	8002d10 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002d0a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002d10:	2201      	movs	r2, #1
 8002d12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d16:	4840      	ldr	r0, [pc, #256]	; (8002e18 <ILI9341_Draw_Colour_Burst+0x134>)
 8002d18:	f001 fe14 	bl	8004944 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d22:	483d      	ldr	r0, [pc, #244]	; (8002e18 <ILI9341_Draw_Colour_Burst+0x134>)
 8002d24:	f001 fe0e 	bl	8004944 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002d28:	88fb      	ldrh	r3, [r7, #6]
 8002d2a:	0a1b      	lsrs	r3, r3, #8
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8002d32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d34:	460b      	mov	r3, r1
 8002d36:	3b01      	subs	r3, #1
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	4688      	mov	r8, r1
 8002d3e:	4699      	mov	r9, r3
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d54:	2300      	movs	r3, #0
 8002d56:	460c      	mov	r4, r1
 8002d58:	461d      	mov	r5, r3
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	00eb      	lsls	r3, r5, #3
 8002d64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d68:	00e2      	lsls	r2, r4, #3
 8002d6a:	1dcb      	adds	r3, r1, #7
 8002d6c:	08db      	lsrs	r3, r3, #3
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	ebad 0d03 	sub.w	sp, sp, r3
 8002d74:	466b      	mov	r3, sp
 8002d76:	3300      	adds	r3, #0
 8002d78:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d7e:	e00e      	b.n	8002d9e <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d84:	4413      	add	r3, r2
 8002d86:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002d8a:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	3301      	adds	r3, #1
 8002d90:	88fa      	ldrh	r2, [r7, #6]
 8002d92:	b2d1      	uxtb	r1, r2
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d3ec      	bcc.n	8002d80 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db4:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dba:	fbb3 f2f2 	udiv	r2, r3, r2
 8002dbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dc0:	fb01 f202 	mul.w	r2, r1, r2
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d010      	beq.n	8002df0 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd2:	e009      	b.n	8002de8 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	230a      	movs	r3, #10
 8002dda:	69b9      	ldr	r1, [r7, #24]
 8002ddc:	480f      	ldr	r0, [pc, #60]	; (8002e1c <ILI9341_Draw_Colour_Burst+0x138>)
 8002dde:	f003 f924 	bl	800602a <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	3301      	adds	r3, #1
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
 8002de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d3f1      	bcc.n	8002dd4 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	230a      	movs	r3, #10
 8002df6:	69b9      	ldr	r1, [r7, #24]
 8002df8:	4808      	ldr	r0, [pc, #32]	; (8002e1c <ILI9341_Draw_Colour_Burst+0x138>)
 8002dfa:	f003 f916 	bl	800602a <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e04:	4804      	ldr	r0, [pc, #16]	; (8002e18 <ILI9341_Draw_Colour_Burst+0x134>)
 8002e06:	f001 fd9d 	bl	8004944 <HAL_GPIO_WritePin>
 8002e0a:	46b5      	mov	sp, r6
}
 8002e0c:	bf00      	nop
 8002e0e:	3734      	adds	r7, #52	; 0x34
 8002e10:	46bd      	mov	sp, r7
 8002e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e16:	bf00      	nop
 8002e18:	40020800 	.word	0x40020800
 8002e1c:	20000c1c 	.word	0x20000c1c

08002e20 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	80fb      	strh	r3, [r7, #6]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	80bb      	strh	r3, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002e32:	4b64      	ldr	r3, [pc, #400]	; (8002fc4 <ILI9341_Draw_Pixel+0x1a4>)
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	88fa      	ldrh	r2, [r7, #6]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	f080 80be 	bcs.w	8002fbc <ILI9341_Draw_Pixel+0x19c>
 8002e40:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <ILI9341_Draw_Pixel+0x1a8>)
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	88ba      	ldrh	r2, [r7, #4]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	f080 80b7 	bcs.w	8002fbc <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e54:	485d      	ldr	r0, [pc, #372]	; (8002fcc <ILI9341_Draw_Pixel+0x1ac>)
 8002e56:	f001 fd75 	bl	8004944 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e60:	485a      	ldr	r0, [pc, #360]	; (8002fcc <ILI9341_Draw_Pixel+0x1ac>)
 8002e62:	f001 fd6f 	bl	8004944 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002e66:	202a      	movs	r0, #42	; 0x2a
 8002e68:	f7ff fd10 	bl	800288c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e72:	4856      	ldr	r0, [pc, #344]	; (8002fcc <ILI9341_Draw_Pixel+0x1ac>)
 8002e74:	f001 fd66 	bl	8004944 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e7e:	4853      	ldr	r0, [pc, #332]	; (8002fcc <ILI9341_Draw_Pixel+0x1ac>)
 8002e80:	f001 fd60 	bl	8004944 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002e84:	2200      	movs	r2, #0
 8002e86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e8a:	4850      	ldr	r0, [pc, #320]	; (8002fcc <ILI9341_Draw_Pixel+0x1ac>)
 8002e8c:	f001 fd5a 	bl	8004944 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	753b      	strb	r3, [r7, #20]
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	757b      	strb	r3, [r7, #21]
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	121b      	asrs	r3, r3, #8
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	75bb      	strb	r3, [r7, #22]
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002eb4:	f107 0114 	add.w	r1, r7, #20
 8002eb8:	2301      	movs	r3, #1
 8002eba:	2204      	movs	r2, #4
 8002ebc:	4844      	ldr	r0, [pc, #272]	; (8002fd0 <ILI9341_Draw_Pixel+0x1b0>)
 8002ebe:	f003 f8b4 	bl	800602a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ec8:	4840      	ldr	r0, [pc, #256]	; (8002fcc <ILI9341_Draw_Pixel+0x1ac>)
 8002eca:	f001 fd3b 	bl	8004944 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ed4:	483d      	ldr	r0, [pc, #244]	; (8002fcc <ILI9341_Draw_Pixel+0x1ac>)
 8002ed6:	f001 fd35 	bl	8004944 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002eda:	2200      	movs	r2, #0
 8002edc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ee0:	483a      	ldr	r0, [pc, #232]	; (8002fcc <ILI9341_Draw_Pixel+0x1ac>)
 8002ee2:	f001 fd2f 	bl	8004944 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002ee6:	202b      	movs	r0, #43	; 0x2b
 8002ee8:	f7ff fcd0 	bl	800288c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002eec:	2201      	movs	r2, #1
 8002eee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ef2:	4836      	ldr	r0, [pc, #216]	; (8002fcc <ILI9341_Draw_Pixel+0x1ac>)
 8002ef4:	f001 fd26 	bl	8004944 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002efe:	4833      	ldr	r0, [pc, #204]	; (8002fcc <ILI9341_Draw_Pixel+0x1ac>)
 8002f00:	f001 fd20 	bl	8004944 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002f04:	2200      	movs	r2, #0
 8002f06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f0a:	4830      	ldr	r0, [pc, #192]	; (8002fcc <ILI9341_Draw_Pixel+0x1ac>)
 8002f0c:	f001 fd1a 	bl	8004944 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002f10:	88bb      	ldrh	r3, [r7, #4]
 8002f12:	0a1b      	lsrs	r3, r3, #8
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	743b      	strb	r3, [r7, #16]
 8002f1a:	88bb      	ldrh	r3, [r7, #4]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	747b      	strb	r3, [r7, #17]
 8002f20:	88bb      	ldrh	r3, [r7, #4]
 8002f22:	3301      	adds	r3, #1
 8002f24:	121b      	asrs	r3, r3, #8
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	74bb      	strb	r3, [r7, #18]
 8002f2a:	88bb      	ldrh	r3, [r7, #4]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	3301      	adds	r3, #1
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002f34:	f107 0110 	add.w	r1, r7, #16
 8002f38:	2301      	movs	r3, #1
 8002f3a:	2204      	movs	r2, #4
 8002f3c:	4824      	ldr	r0, [pc, #144]	; (8002fd0 <ILI9341_Draw_Pixel+0x1b0>)
 8002f3e:	f003 f874 	bl	800602a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002f42:	2201      	movs	r2, #1
 8002f44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f48:	4820      	ldr	r0, [pc, #128]	; (8002fcc <ILI9341_Draw_Pixel+0x1ac>)
 8002f4a:	f001 fcfb 	bl	8004944 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f54:	481d      	ldr	r0, [pc, #116]	; (8002fcc <ILI9341_Draw_Pixel+0x1ac>)
 8002f56:	f001 fcf5 	bl	8004944 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f60:	481a      	ldr	r0, [pc, #104]	; (8002fcc <ILI9341_Draw_Pixel+0x1ac>)
 8002f62:	f001 fcef 	bl	8004944 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002f66:	202c      	movs	r0, #44	; 0x2c
 8002f68:	f7ff fc90 	bl	800288c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f72:	4816      	ldr	r0, [pc, #88]	; (8002fcc <ILI9341_Draw_Pixel+0x1ac>)
 8002f74:	f001 fce6 	bl	8004944 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f7e:	4813      	ldr	r0, [pc, #76]	; (8002fcc <ILI9341_Draw_Pixel+0x1ac>)
 8002f80:	f001 fce0 	bl	8004944 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002f84:	2200      	movs	r2, #0
 8002f86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f8a:	4810      	ldr	r0, [pc, #64]	; (8002fcc <ILI9341_Draw_Pixel+0x1ac>)
 8002f8c:	f001 fcda 	bl	8004944 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002f90:	887b      	ldrh	r3, [r7, #2]
 8002f92:	0a1b      	lsrs	r3, r3, #8
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	733b      	strb	r3, [r7, #12]
 8002f9a:	887b      	ldrh	r3, [r7, #2]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002fa0:	f107 010c 	add.w	r1, r7, #12
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	4809      	ldr	r0, [pc, #36]	; (8002fd0 <ILI9341_Draw_Pixel+0x1b0>)
 8002faa:	f003 f83e 	bl	800602a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fb4:	4805      	ldr	r0, [pc, #20]	; (8002fcc <ILI9341_Draw_Pixel+0x1ac>)
 8002fb6:	f001 fcc5 	bl	8004944 <HAL_GPIO_WritePin>
 8002fba:	e000      	b.n	8002fbe <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002fbc:	bf00      	nop
	
}
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20000006 	.word	0x20000006
 8002fc8:	20000004 	.word	0x20000004
 8002fcc:	40020800 	.word	0x40020800
 8002fd0:	20000c1c 	.word	0x20000c1c

08002fd4 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4604      	mov	r4, r0
 8002fdc:	4608      	mov	r0, r1
 8002fde:	4611      	mov	r1, r2
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4623      	mov	r3, r4
 8002fe4:	80fb      	strh	r3, [r7, #6]
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	80bb      	strh	r3, [r7, #4]
 8002fea:	460b      	mov	r3, r1
 8002fec:	807b      	strh	r3, [r7, #2]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002ff2:	4b24      	ldr	r3, [pc, #144]	; (8003084 <ILI9341_Draw_Rectangle+0xb0>)
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	88fa      	ldrh	r2, [r7, #6]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d23d      	bcs.n	800307a <ILI9341_Draw_Rectangle+0xa6>
 8002ffe:	4b22      	ldr	r3, [pc, #136]	; (8003088 <ILI9341_Draw_Rectangle+0xb4>)
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	b29b      	uxth	r3, r3
 8003004:	88ba      	ldrh	r2, [r7, #4]
 8003006:	429a      	cmp	r2, r3
 8003008:	d237      	bcs.n	800307a <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800300a:	88fa      	ldrh	r2, [r7, #6]
 800300c:	887b      	ldrh	r3, [r7, #2]
 800300e:	4413      	add	r3, r2
 8003010:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <ILI9341_Draw_Rectangle+0xb0>)
 8003012:	8812      	ldrh	r2, [r2, #0]
 8003014:	b292      	uxth	r2, r2
 8003016:	4293      	cmp	r3, r2
 8003018:	dd05      	ble.n	8003026 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 800301a:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <ILI9341_Draw_Rectangle+0xb0>)
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	b29a      	uxth	r2, r3
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8003026:	88ba      	ldrh	r2, [r7, #4]
 8003028:	883b      	ldrh	r3, [r7, #0]
 800302a:	4413      	add	r3, r2
 800302c:	4a16      	ldr	r2, [pc, #88]	; (8003088 <ILI9341_Draw_Rectangle+0xb4>)
 800302e:	8812      	ldrh	r2, [r2, #0]
 8003030:	b292      	uxth	r2, r2
 8003032:	4293      	cmp	r3, r2
 8003034:	dd05      	ble.n	8003042 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8003036:	4b14      	ldr	r3, [pc, #80]	; (8003088 <ILI9341_Draw_Rectangle+0xb4>)
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	b29a      	uxth	r2, r3
 800303c:	88bb      	ldrh	r3, [r7, #4]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8003042:	88fa      	ldrh	r2, [r7, #6]
 8003044:	887b      	ldrh	r3, [r7, #2]
 8003046:	4413      	add	r3, r2
 8003048:	b29b      	uxth	r3, r3
 800304a:	3b01      	subs	r3, #1
 800304c:	b29c      	uxth	r4, r3
 800304e:	88ba      	ldrh	r2, [r7, #4]
 8003050:	883b      	ldrh	r3, [r7, #0]
 8003052:	4413      	add	r3, r2
 8003054:	b29b      	uxth	r3, r3
 8003056:	3b01      	subs	r3, #1
 8003058:	b29b      	uxth	r3, r3
 800305a:	88b9      	ldrh	r1, [r7, #4]
 800305c:	88f8      	ldrh	r0, [r7, #6]
 800305e:	4622      	mov	r2, r4
 8003060:	f7ff fc6a 	bl	8002938 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8003064:	883b      	ldrh	r3, [r7, #0]
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	fb02 f303 	mul.w	r3, r2, r3
 800306c:	461a      	mov	r2, r3
 800306e:	8b3b      	ldrh	r3, [r7, #24]
 8003070:	4611      	mov	r1, r2
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff fe36 	bl	8002ce4 <ILI9341_Draw_Colour_Burst>
 8003078:	e000      	b.n	800307c <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800307a:	bf00      	nop
}
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	bd90      	pop	{r4, r7, pc}
 8003082:	bf00      	nop
 8003084:	20000006 	.word	0x20000006
 8003088:	20000004 	.word	0x20000004

0800308c <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8003092:	2310      	movs	r3, #16
 8003094:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 800309a:	e019      	b.n	80030d0 <TP_Read+0x44>
    {
        value <<= 1;
 800309c:	88bb      	ldrh	r3, [r7, #4]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80030a2:	2201      	movs	r2, #1
 80030a4:	2108      	movs	r1, #8
 80030a6:	480e      	ldr	r0, [pc, #56]	; (80030e0 <TP_Read+0x54>)
 80030a8:	f001 fc4c 	bl	8004944 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 80030ac:	2200      	movs	r2, #0
 80030ae:	2108      	movs	r1, #8
 80030b0:	480b      	ldr	r0, [pc, #44]	; (80030e0 <TP_Read+0x54>)
 80030b2:	f001 fc47 	bl	8004944 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 80030b6:	2110      	movs	r1, #16
 80030b8:	4809      	ldr	r0, [pc, #36]	; (80030e0 <TP_Read+0x54>)
 80030ba:	f001 fc2b 	bl	8004914 <HAL_GPIO_ReadPin>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <TP_Read+0x3e>
        {
            value++;
 80030c4:	88bb      	ldrh	r3, [r7, #4]
 80030c6:	3301      	adds	r3, #1
 80030c8:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1e2      	bne.n	800309c <TP_Read+0x10>
    };

    return value;
 80030d6:	88bb      	ldrh	r3, [r7, #4]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40021000 	.word	0x40021000

080030e4 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 80030ee:	2308      	movs	r3, #8
 80030f0:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 80030f2:	2200      	movs	r2, #0
 80030f4:	2108      	movs	r1, #8
 80030f6:	4815      	ldr	r0, [pc, #84]	; (800314c <TP_Write+0x68>)
 80030f8:	f001 fc24 	bl	8004944 <HAL_GPIO_WritePin>
	
    while(i > 0)
 80030fc:	e01e      	b.n	800313c <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 80030fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003102:	2b00      	cmp	r3, #0
 8003104:	da05      	bge.n	8003112 <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8003106:	2201      	movs	r2, #1
 8003108:	2120      	movs	r1, #32
 800310a:	4810      	ldr	r0, [pc, #64]	; (800314c <TP_Write+0x68>)
 800310c:	f001 fc1a 	bl	8004944 <HAL_GPIO_WritePin>
 8003110:	e004      	b.n	800311c <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8003112:	2200      	movs	r2, #0
 8003114:	2120      	movs	r1, #32
 8003116:	480d      	ldr	r0, [pc, #52]	; (800314c <TP_Write+0x68>)
 8003118:	f001 fc14 	bl	8004944 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8003122:	2201      	movs	r2, #1
 8003124:	2108      	movs	r1, #8
 8003126:	4809      	ldr	r0, [pc, #36]	; (800314c <TP_Write+0x68>)
 8003128:	f001 fc0c 	bl	8004944 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 800312c:	2200      	movs	r2, #0
 800312e:	2108      	movs	r1, #8
 8003130:	4806      	ldr	r0, [pc, #24]	; (800314c <TP_Write+0x68>)
 8003132:	f001 fc07 	bl	8004944 <HAL_GPIO_WritePin>
        i--;
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	3b01      	subs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1dd      	bne.n	80030fe <TP_Write+0x1a>
    };
}
 8003142:	bf00      	nop
 8003144:	bf00      	nop
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000

08003150 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	; 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8003158:	2201      	movs	r2, #1
 800315a:	2108      	movs	r1, #8
 800315c:	485a      	ldr	r0, [pc, #360]	; (80032c8 <TP_Read_Coordinates+0x178>)
 800315e:	f001 fbf1 	bl	8004944 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 8003162:	2201      	movs	r2, #1
 8003164:	2120      	movs	r1, #32
 8003166:	4858      	ldr	r0, [pc, #352]	; (80032c8 <TP_Read_Coordinates+0x178>)
 8003168:	f001 fbec 	bl	8004944 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 800316c:	2201      	movs	r2, #1
 800316e:	2140      	movs	r1, #64	; 0x40
 8003170:	4855      	ldr	r0, [pc, #340]	; (80032c8 <TP_Read_Coordinates+0x178>)
 8003172:	f001 fbe7 	bl	8004944 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8003176:	2300      	movs	r3, #0
 8003178:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 800317a:	2300      	movs	r3, #0
 800317c:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8003182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003186:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 800318c:	2200      	movs	r2, #0
 800318e:	2140      	movs	r1, #64	; 0x40
 8003190:	484d      	ldr	r0, [pc, #308]	; (80032c8 <TP_Read_Coordinates+0x178>)
 8003192:	f001 fbd7 	bl	8004944 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8003196:	e023      	b.n	80031e0 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8003198:	2090      	movs	r0, #144	; 0x90
 800319a:	f7ff ffa3 	bl	80030e4 <TP_Write>

				rawy = TP_Read();	
 800319e:	f7ff ff75 	bl	800308c <TP_Read>
 80031a2:	4603      	mov	r3, r0
 80031a4:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 80031a6:	89fb      	ldrh	r3, [r7, #14]
 80031a8:	6a3a      	ldr	r2, [r7, #32]
 80031aa:	4413      	add	r3, r2
 80031ac:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 80031ae:	89fb      	ldrh	r3, [r7, #14]
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4413      	add	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 80031b6:	20d0      	movs	r0, #208	; 0xd0
 80031b8:	f7ff ff94 	bl	80030e4 <TP_Write>
        rawx = TP_Read();
 80031bc:	f7ff ff66 	bl	800308c <TP_Read>
 80031c0:	4603      	mov	r3, r0
 80031c2:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 80031c4:	89bb      	ldrh	r3, [r7, #12]
 80031c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c8:	4413      	add	r3, r2
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 80031cc:	89bb      	ldrh	r3, [r7, #12]
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	4413      	add	r3, r2
 80031d2:	61fb      	str	r3, [r7, #28]
        samples--;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	617b      	str	r3, [r7, #20]
				counted_samples++;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	3301      	adds	r3, #1
 80031de:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d006      	beq.n	80031f4 <TP_Read_Coordinates+0xa4>
 80031e6:	2104      	movs	r1, #4
 80031e8:	4837      	ldr	r0, [pc, #220]	; (80032c8 <TP_Read_Coordinates+0x178>)
 80031ea:	f001 fb93 	bl	8004914 <HAL_GPIO_ReadPin>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0d1      	beq.n	8003198 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 80031f4:	2201      	movs	r2, #1
 80031f6:	2140      	movs	r1, #64	; 0x40
 80031f8:	4833      	ldr	r0, [pc, #204]	; (80032c8 <TP_Read_Coordinates+0x178>)
 80031fa:	f001 fba3 	bl	8004944 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003204:	d14d      	bne.n	80032a2 <TP_Read_Coordinates+0x152>
 8003206:	2104      	movs	r1, #4
 8003208:	482f      	ldr	r0, [pc, #188]	; (80032c8 <TP_Read_Coordinates+0x178>)
 800320a:	f001 fb83 	bl	8004914 <HAL_GPIO_ReadPin>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d146      	bne.n	80032a2 <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	fbb2 f3f3 	udiv	r3, r2, r3
 8003226:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8003230:	89bb      	ldrh	r3, [r7, #12]
 8003232:	425b      	negs	r3, r3
 8003234:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8003236:	89fb      	ldrh	r3, [r7, #14]
 8003238:	425b      	negs	r3, r3
 800323a:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 800323c:	89ba      	ldrh	r2, [r7, #12]
 800323e:	4b23      	ldr	r3, [pc, #140]	; (80032cc <TP_Read_Coordinates+0x17c>)
 8003240:	fba3 1302 	umull	r1, r3, r3, r2
 8003244:	1ad2      	subs	r2, r2, r3
 8003246:	0852      	lsrs	r2, r2, #1
 8003248:	4413      	add	r3, r2
 800324a:	0a1b      	lsrs	r3, r3, #8
 800324c:	b29b      	uxth	r3, r3
 800324e:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8003252:	ee07 3a90 	vmov	s15, r3
 8003256:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800325a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80032c0 <TP_Read_Coordinates+0x170>
 800325e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003262:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003266:	ee17 3a90 	vmov	r3, s15
 800326a:	b29a      	uxth	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8003270:	89fb      	ldrh	r3, [r7, #14]
 8003272:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <TP_Read_Coordinates+0x180>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	09db      	lsrs	r3, r3, #7
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b0f      	subs	r3, #15
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003286:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 80032c0 <TP_Read_Coordinates+0x170>
 800328a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3302      	adds	r3, #2
 8003292:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003296:	ee17 2a90 	vmov	r2, s15
 800329a:	b292      	uxth	r2, r2
 800329c:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 800329e:	2301      	movs	r3, #1
 80032a0:	e007      	b.n	80032b2 <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3302      	adds	r3, #2
 80032ac:	2200      	movs	r2, #0
 80032ae:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 80032b0:	2300      	movs	r3, #0
		}
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3728      	adds	r7, #40	; 0x28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	f3af 8000 	nop.w
 80032c0:	28f5c28f 	.word	0x28f5c28f
 80032c4:	3ff28f5c 	.word	0x3ff28f5c
 80032c8:	40021000 	.word	0x40021000
 80032cc:	e01e01e1 	.word	0xe01e01e1
 80032d0:	a0a0a0a1 	.word	0xa0a0a0a1

080032d4 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 80032d8:	2104      	movs	r1, #4
 80032da:	4805      	ldr	r0, [pc, #20]	; (80032f0 <TP_Touchpad_Pressed+0x1c>)
 80032dc:	f001 fb1a 	bl	8004914 <HAL_GPIO_ReadPin>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 80032ea:	2300      	movs	r3, #0
	}
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40021000 	.word	0x40021000

080032f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032f8:	4b08      	ldr	r3, [pc, #32]	; (800331c <HAL_Init+0x28>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a07      	ldr	r2, [pc, #28]	; (800331c <HAL_Init+0x28>)
 80032fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003304:	2003      	movs	r0, #3
 8003306:	f000 fd7d 	bl	8003e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800330a:	2000      	movs	r0, #0
 800330c:	f000 f808 	bl	8003320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003310:	f7fe fba4 	bl	8001a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40023c00 	.word	0x40023c00

08003320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003328:	4b12      	ldr	r3, [pc, #72]	; (8003374 <HAL_InitTick+0x54>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4b12      	ldr	r3, [pc, #72]	; (8003378 <HAL_InitTick+0x58>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	4619      	mov	r1, r3
 8003332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003336:	fbb3 f3f1 	udiv	r3, r3, r1
 800333a:	fbb2 f3f3 	udiv	r3, r2, r3
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fd95 	bl	8003e6e <HAL_SYSTICK_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e00e      	b.n	800336c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b0f      	cmp	r3, #15
 8003352:	d80a      	bhi.n	800336a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003354:	2200      	movs	r2, #0
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	f04f 30ff 	mov.w	r0, #4294967295
 800335c:	f000 fd5d 	bl	8003e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003360:	4a06      	ldr	r2, [pc, #24]	; (800337c <HAL_InitTick+0x5c>)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	e000      	b.n	800336c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20000000 	.word	0x20000000
 8003378:	2000000c 	.word	0x2000000c
 800337c:	20000008 	.word	0x20000008

08003380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <HAL_IncTick+0x20>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <HAL_IncTick+0x24>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4413      	add	r3, r2
 8003390:	4a04      	ldr	r2, [pc, #16]	; (80033a4 <HAL_IncTick+0x24>)
 8003392:	6013      	str	r3, [r2, #0]
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	2000000c 	.word	0x2000000c
 80033a4:	20000e50 	.word	0x20000e50

080033a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return uwTick;
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <HAL_GetTick+0x14>)
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000e50 	.word	0x20000e50

080033c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033c8:	f7ff ffee 	bl	80033a8 <HAL_GetTick>
 80033cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d005      	beq.n	80033e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033da:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <HAL_Delay+0x44>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033e6:	bf00      	nop
 80033e8:	f7ff ffde 	bl	80033a8 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d8f7      	bhi.n	80033e8 <HAL_Delay+0x28>
  {
  }
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	2000000c 	.word	0x2000000c

08003408 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e031      	b.n	8003482 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fd f95c 	bl	80006e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	2b00      	cmp	r3, #0
 8003444:	d116      	bne.n	8003474 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <HAL_ADC_Init+0x84>)
 800344c:	4013      	ands	r3, r2
 800344e:	f043 0202 	orr.w	r2, r3, #2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fa88 	bl	800396c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f023 0303 	bic.w	r3, r3, #3
 800346a:	f043 0201 	orr.w	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
 8003472:	e001      	b.n	8003478 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003480:	7bfb      	ldrb	r3, [r7, #15]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	ffffeefd 	.word	0xffffeefd

08003490 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_ADC_Start_DMA+0x1e>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e0d4      	b.n	8003658 <HAL_ADC_Start_DMA+0x1c8>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d018      	beq.n	80034f6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80034d4:	4b62      	ldr	r3, [pc, #392]	; (8003660 <HAL_ADC_Start_DMA+0x1d0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a62      	ldr	r2, [pc, #392]	; (8003664 <HAL_ADC_Start_DMA+0x1d4>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	0c9a      	lsrs	r2, r3, #18
 80034e0:	4613      	mov	r3, r2
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	4413      	add	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80034e8:	e002      	b.n	80034f0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	3b01      	subs	r3, #1
 80034ee:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f9      	bne.n	80034ea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b01      	cmp	r3, #1
 8003502:	f040 809c 	bne.w	800363e <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800350a:	4b57      	ldr	r3, [pc, #348]	; (8003668 <HAL_ADC_Start_DMA+0x1d8>)
 800350c:	4013      	ands	r3, r2
 800350e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003520:	2b00      	cmp	r3, #0
 8003522:	d007      	beq.n	8003534 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800352c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800353c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003540:	d106      	bne.n	8003550 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	f023 0206 	bic.w	r2, r3, #6
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	645a      	str	r2, [r3, #68]	; 0x44
 800354e:	e002      	b.n	8003556 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	4a42      	ldr	r2, [pc, #264]	; (800366c <HAL_ADC_Start_DMA+0x1dc>)
 8003564:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	4a41      	ldr	r2, [pc, #260]	; (8003670 <HAL_ADC_Start_DMA+0x1e0>)
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	4a40      	ldr	r2, [pc, #256]	; (8003674 <HAL_ADC_Start_DMA+0x1e4>)
 8003574:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800357e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800358e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800359e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	334c      	adds	r3, #76	; 0x4c
 80035aa:	4619      	mov	r1, r3
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f000 fd18 	bl	8003fe4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80035b4:	4b30      	ldr	r3, [pc, #192]	; (8003678 <HAL_ADC_Start_DMA+0x1e8>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10f      	bne.n	80035e0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d143      	bne.n	8003656 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035dc:	609a      	str	r2, [r3, #8]
 80035de:	e03a      	b.n	8003656 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a25      	ldr	r2, [pc, #148]	; (800367c <HAL_ADC_Start_DMA+0x1ec>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d10e      	bne.n	8003608 <HAL_ADC_Start_DMA+0x178>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d107      	bne.n	8003608 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003606:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003608:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <HAL_ADC_Start_DMA+0x1e8>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 0310 	and.w	r3, r3, #16
 8003610:	2b00      	cmp	r3, #0
 8003612:	d120      	bne.n	8003656 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a19      	ldr	r2, [pc, #100]	; (8003680 <HAL_ADC_Start_DMA+0x1f0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d11b      	bne.n	8003656 <HAL_ADC_Start_DMA+0x1c6>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d114      	bne.n	8003656 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	e00b      	b.n	8003656 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f043 0210 	orr.w	r2, r3, #16
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	f043 0201 	orr.w	r2, r3, #1
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000000 	.word	0x20000000
 8003664:	431bde83 	.word	0x431bde83
 8003668:	fffff8fe 	.word	0xfffff8fe
 800366c:	08003b61 	.word	0x08003b61
 8003670:	08003c1b 	.word	0x08003c1b
 8003674:	08003c37 	.word	0x08003c37
 8003678:	40012300 	.word	0x40012300
 800367c:	40012000 	.word	0x40012000
 8003680:	40012200 	.word	0x40012200

08003684 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x1c>
 80036d8:	2302      	movs	r3, #2
 80036da:	e136      	b.n	800394a <HAL_ADC_ConfigChannel+0x28a>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b09      	cmp	r3, #9
 80036ea:	d93a      	bls.n	8003762 <HAL_ADC_ConfigChannel+0xa2>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036f4:	d035      	beq.n	8003762 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68d9      	ldr	r1, [r3, #12]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	b29b      	uxth	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	4613      	mov	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	3b1e      	subs	r3, #30
 800370c:	2207      	movs	r2, #7
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43da      	mvns	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	400a      	ands	r2, r1
 800371a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a8d      	ldr	r2, [pc, #564]	; (8003958 <HAL_ADC_ConfigChannel+0x298>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d10a      	bne.n	800373c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68d9      	ldr	r1, [r3, #12]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	061a      	lsls	r2, r3, #24
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800373a:	e035      	b.n	80037a8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68d9      	ldr	r1, [r3, #12]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	4618      	mov	r0, r3
 800374e:	4603      	mov	r3, r0
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4403      	add	r3, r0
 8003754:	3b1e      	subs	r3, #30
 8003756:	409a      	lsls	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003760:	e022      	b.n	80037a8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6919      	ldr	r1, [r3, #16]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	b29b      	uxth	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	4613      	mov	r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	4413      	add	r3, r2
 8003776:	2207      	movs	r2, #7
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43da      	mvns	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	400a      	ands	r2, r1
 8003784:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6919      	ldr	r1, [r3, #16]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	b29b      	uxth	r3, r3
 8003796:	4618      	mov	r0, r3
 8003798:	4603      	mov	r3, r0
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4403      	add	r3, r0
 800379e:	409a      	lsls	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b06      	cmp	r3, #6
 80037ae:	d824      	bhi.n	80037fa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	3b05      	subs	r3, #5
 80037c2:	221f      	movs	r2, #31
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43da      	mvns	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	400a      	ands	r2, r1
 80037d0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	4618      	mov	r0, r3
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	3b05      	subs	r3, #5
 80037ec:	fa00 f203 	lsl.w	r2, r0, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	635a      	str	r2, [r3, #52]	; 0x34
 80037f8:	e04c      	b.n	8003894 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d824      	bhi.n	800384c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	3b23      	subs	r3, #35	; 0x23
 8003814:	221f      	movs	r2, #31
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43da      	mvns	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	400a      	ands	r2, r1
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	4618      	mov	r0, r3
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	3b23      	subs	r3, #35	; 0x23
 800383e:	fa00 f203 	lsl.w	r2, r0, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
 800384a:	e023      	b.n	8003894 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	3b41      	subs	r3, #65	; 0x41
 800385e:	221f      	movs	r2, #31
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43da      	mvns	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	400a      	ands	r2, r1
 800386c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	b29b      	uxth	r3, r3
 800387a:	4618      	mov	r0, r3
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	3b41      	subs	r3, #65	; 0x41
 8003888:	fa00 f203 	lsl.w	r2, r0, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a30      	ldr	r2, [pc, #192]	; (800395c <HAL_ADC_ConfigChannel+0x29c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d10a      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x1f4>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038a6:	d105      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80038a8:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4a2c      	ldr	r2, [pc, #176]	; (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038ae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80038b2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a28      	ldr	r2, [pc, #160]	; (800395c <HAL_ADC_ConfigChannel+0x29c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d10f      	bne.n	80038de <HAL_ADC_ConfigChannel+0x21e>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b12      	cmp	r3, #18
 80038c4:	d10b      	bne.n	80038de <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80038c6:	4b26      	ldr	r3, [pc, #152]	; (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4a25      	ldr	r2, [pc, #148]	; (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038d0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80038d2:	4b23      	ldr	r3, [pc, #140]	; (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4a22      	ldr	r2, [pc, #136]	; (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038dc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1e      	ldr	r2, [pc, #120]	; (800395c <HAL_ADC_ConfigChannel+0x29c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d12b      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x280>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1a      	ldr	r2, [pc, #104]	; (8003958 <HAL_ADC_ConfigChannel+0x298>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d003      	beq.n	80038fa <HAL_ADC_ConfigChannel+0x23a>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b11      	cmp	r3, #17
 80038f8:	d122      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80038fa:	4b19      	ldr	r3, [pc, #100]	; (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4a18      	ldr	r2, [pc, #96]	; (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 8003900:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003904:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003906:	4b16      	ldr	r3, [pc, #88]	; (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	4a15      	ldr	r2, [pc, #84]	; (8003960 <HAL_ADC_ConfigChannel+0x2a0>)
 800390c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003910:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a10      	ldr	r2, [pc, #64]	; (8003958 <HAL_ADC_ConfigChannel+0x298>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d111      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <HAL_ADC_ConfigChannel+0x2a4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a11      	ldr	r2, [pc, #68]	; (8003968 <HAL_ADC_ConfigChannel+0x2a8>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	0c9a      	lsrs	r2, r3, #18
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003932:	e002      	b.n	800393a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3b01      	subs	r3, #1
 8003938:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f9      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	10000012 	.word	0x10000012
 800395c:	40012000 	.word	0x40012000
 8003960:	40012300 	.word	0x40012300
 8003964:	20000000 	.word	0x20000000
 8003968:	431bde83 	.word	0x431bde83

0800396c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003974:	4b78      	ldr	r3, [pc, #480]	; (8003b58 <ADC_Init+0x1ec>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	4a77      	ldr	r2, [pc, #476]	; (8003b58 <ADC_Init+0x1ec>)
 800397a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800397e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003980:	4b75      	ldr	r3, [pc, #468]	; (8003b58 <ADC_Init+0x1ec>)
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4973      	ldr	r1, [pc, #460]	; (8003b58 <ADC_Init+0x1ec>)
 800398a:	4313      	orrs	r3, r2
 800398c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800399c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6859      	ldr	r1, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	021a      	lsls	r2, r3, #8
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80039c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6859      	ldr	r1, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6899      	ldr	r1, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	4a58      	ldr	r2, [pc, #352]	; (8003b5c <ADC_Init+0x1f0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d022      	beq.n	8003a46 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6899      	ldr	r1, [r3, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6899      	ldr	r1, [r3, #8]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	609a      	str	r2, [r3, #8]
 8003a44:	e00f      	b.n	8003a66 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0202 	bic.w	r2, r2, #2
 8003a74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6899      	ldr	r1, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	005a      	lsls	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01b      	beq.n	8003acc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aa2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ab2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6859      	ldr	r1, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	035a      	lsls	r2, r3, #13
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	605a      	str	r2, [r3, #4]
 8003aca:	e007      	b.n	8003adc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ada:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003aea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	051a      	lsls	r2, r3, #20
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6899      	ldr	r1, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b1e:	025a      	lsls	r2, r3, #9
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6899      	ldr	r1, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	029a      	lsls	r2, r3, #10
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	609a      	str	r2, [r3, #8]
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	40012300 	.word	0x40012300
 8003b5c:	0f000001 	.word	0x0f000001

08003b60 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d13c      	bne.n	8003bf4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d12b      	bne.n	8003bec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d127      	bne.n	8003bec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d006      	beq.n	8003bb8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d119      	bne.n	8003bec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0220 	bic.w	r2, r2, #32
 8003bc6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d105      	bne.n	8003bec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	f043 0201 	orr.w	r2, r3, #1
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f7ff fd49 	bl	8003684 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003bf2:	e00e      	b.n	8003c12 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	f003 0310 	and.w	r3, r3, #16
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f7ff fd53 	bl	80036ac <HAL_ADC_ErrorCallback>
}
 8003c06:	e004      	b.n	8003c12 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	4798      	blx	r3
}
 8003c12:	bf00      	nop
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f7ff fd35 	bl	8003698 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c2e:	bf00      	nop
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2240      	movs	r2, #64	; 0x40
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	f043 0204 	orr.w	r2, r3, #4
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f7ff fd28 	bl	80036ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <__NVIC_SetPriorityGrouping>:
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c74:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <__NVIC_SetPriorityGrouping+0x40>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c80:	4013      	ands	r3, r2
 8003c82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c92:	4a04      	ldr	r2, [pc, #16]	; (8003ca4 <__NVIC_SetPriorityGrouping+0x40>)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	60d3      	str	r3, [r2, #12]
}
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	e000ed00 	.word	0xe000ed00
 8003ca8:	05fa0000 	.word	0x05fa0000

08003cac <__NVIC_GetPriorityGrouping>:
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cb0:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	0a1b      	lsrs	r3, r3, #8
 8003cb6:	f003 0307 	and.w	r3, r3, #7
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	e000ed00 	.word	0xe000ed00

08003cc8 <__NVIC_EnableIRQ>:
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	db0b      	blt.n	8003cf2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	f003 021f 	and.w	r2, r3, #31
 8003ce0:	4907      	ldr	r1, [pc, #28]	; (8003d00 <__NVIC_EnableIRQ+0x38>)
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	2001      	movs	r0, #1
 8003cea:	fa00 f202 	lsl.w	r2, r0, r2
 8003cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	e000e100 	.word	0xe000e100

08003d04 <__NVIC_SetPriority>:
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	6039      	str	r1, [r7, #0]
 8003d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	db0a      	blt.n	8003d2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	490c      	ldr	r1, [pc, #48]	; (8003d50 <__NVIC_SetPriority+0x4c>)
 8003d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d22:	0112      	lsls	r2, r2, #4
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	440b      	add	r3, r1
 8003d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003d2c:	e00a      	b.n	8003d44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	4908      	ldr	r1, [pc, #32]	; (8003d54 <__NVIC_SetPriority+0x50>)
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	3b04      	subs	r3, #4
 8003d3c:	0112      	lsls	r2, r2, #4
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	440b      	add	r3, r1
 8003d42:	761a      	strb	r2, [r3, #24]
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	e000e100 	.word	0xe000e100
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <NVIC_EncodePriority>:
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b089      	sub	sp, #36	; 0x24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f1c3 0307 	rsb	r3, r3, #7
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	bf28      	it	cs
 8003d76:	2304      	movcs	r3, #4
 8003d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	2b06      	cmp	r3, #6
 8003d80:	d902      	bls.n	8003d88 <NVIC_EncodePriority+0x30>
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	3b03      	subs	r3, #3
 8003d86:	e000      	b.n	8003d8a <NVIC_EncodePriority+0x32>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	43da      	mvns	r2, r3
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	401a      	ands	r2, r3
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003da0:	f04f 31ff 	mov.w	r1, #4294967295
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	fa01 f303 	lsl.w	r3, r1, r3
 8003daa:	43d9      	mvns	r1, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db0:	4313      	orrs	r3, r2
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3724      	adds	r7, #36	; 0x24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dd0:	d301      	bcc.n	8003dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e00f      	b.n	8003df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dd6:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <SysTick_Config+0x40>)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dde:	210f      	movs	r1, #15
 8003de0:	f04f 30ff 	mov.w	r0, #4294967295
 8003de4:	f7ff ff8e 	bl	8003d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003de8:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <SysTick_Config+0x40>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dee:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <SysTick_Config+0x40>)
 8003df0:	2207      	movs	r2, #7
 8003df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	e000e010 	.word	0xe000e010

08003e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff ff29 	bl	8003c64 <__NVIC_SetPriorityGrouping>
}
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b086      	sub	sp, #24
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	4603      	mov	r3, r0
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e2c:	f7ff ff3e 	bl	8003cac <__NVIC_GetPriorityGrouping>
 8003e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	6978      	ldr	r0, [r7, #20]
 8003e38:	f7ff ff8e 	bl	8003d58 <NVIC_EncodePriority>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ff5d 	bl	8003d04 <__NVIC_SetPriority>
}
 8003e4a:	bf00      	nop
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	4603      	mov	r3, r0
 8003e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff ff31 	bl	8003cc8 <__NVIC_EnableIRQ>
}
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff ffa2 	bl	8003dc0 <SysTick_Config>
 8003e7c:	4603      	mov	r3, r0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e94:	f7ff fa88 	bl	80033a8 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e099      	b.n	8003fd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ec4:	e00f      	b.n	8003ee6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ec6:	f7ff fa6f 	bl	80033a8 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b05      	cmp	r3, #5
 8003ed2:	d908      	bls.n	8003ee6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2203      	movs	r2, #3
 8003ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e078      	b.n	8003fd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e8      	bne.n	8003ec6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4b38      	ldr	r3, [pc, #224]	; (8003fe0 <HAL_DMA_Init+0x158>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d107      	bne.n	8003f50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f023 0307 	bic.w	r3, r3, #7
 8003f66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d117      	bne.n	8003faa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00e      	beq.n	8003faa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fa99 	bl	80044c4 <DMA_CheckFifoParam>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2240      	movs	r2, #64	; 0x40
 8003f9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e016      	b.n	8003fd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fa50 	bl	8004458 <DMA_CalcBaseAndBitshift>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc0:	223f      	movs	r2, #63	; 0x3f
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	e010803f 	.word	0xe010803f

08003fe4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_DMA_Start_IT+0x26>
 8004006:	2302      	movs	r3, #2
 8004008:	e048      	b.n	800409c <HAL_DMA_Start_IT+0xb8>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b01      	cmp	r3, #1
 800401c:	d137      	bne.n	800408e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2202      	movs	r2, #2
 8004022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f9e2 	bl	80043fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403c:	223f      	movs	r2, #63	; 0x3f
 800403e:	409a      	lsls	r2, r3
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0216 	orr.w	r2, r2, #22
 8004052:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695a      	ldr	r2, [r3, #20]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004062:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	2b00      	cmp	r3, #0
 800406a:	d007      	beq.n	800407c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0208 	orr.w	r2, r2, #8
 800407a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	e005      	b.n	800409a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004096:	2302      	movs	r3, #2
 8004098:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800409a:	7dfb      	ldrb	r3, [r7, #23]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d004      	beq.n	80040c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2280      	movs	r2, #128	; 0x80
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e00c      	b.n	80040dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2205      	movs	r2, #5
 80040c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0201 	bic.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80040f4:	4b8e      	ldr	r3, [pc, #568]	; (8004330 <HAL_DMA_IRQHandler+0x248>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a8e      	ldr	r2, [pc, #568]	; (8004334 <HAL_DMA_IRQHandler+0x24c>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	0a9b      	lsrs	r3, r3, #10
 8004100:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004106:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004112:	2208      	movs	r2, #8
 8004114:	409a      	lsls	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4013      	ands	r3, r2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d01a      	beq.n	8004154 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d013      	beq.n	8004154 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0204 	bic.w	r2, r2, #4
 800413a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004140:	2208      	movs	r2, #8
 8004142:	409a      	lsls	r2, r3
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414c:	f043 0201 	orr.w	r2, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004158:	2201      	movs	r2, #1
 800415a:	409a      	lsls	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d012      	beq.n	800418a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00b      	beq.n	800418a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004176:	2201      	movs	r2, #1
 8004178:	409a      	lsls	r2, r3
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	f043 0202 	orr.w	r2, r3, #2
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418e:	2204      	movs	r2, #4
 8004190:	409a      	lsls	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4013      	ands	r3, r2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d012      	beq.n	80041c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00b      	beq.n	80041c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ac:	2204      	movs	r2, #4
 80041ae:	409a      	lsls	r2, r3
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	f043 0204 	orr.w	r2, r3, #4
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c4:	2210      	movs	r2, #16
 80041c6:	409a      	lsls	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d043      	beq.n	8004258 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d03c      	beq.n	8004258 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e2:	2210      	movs	r2, #16
 80041e4:	409a      	lsls	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d018      	beq.n	800422a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d108      	bne.n	8004218 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d024      	beq.n	8004258 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	4798      	blx	r3
 8004216:	e01f      	b.n	8004258 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01b      	beq.n	8004258 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	4798      	blx	r3
 8004228:	e016      	b.n	8004258 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d107      	bne.n	8004248 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0208 	bic.w	r2, r2, #8
 8004246:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425c:	2220      	movs	r2, #32
 800425e:	409a      	lsls	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4013      	ands	r3, r2
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 808f 	beq.w	8004388 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0310 	and.w	r3, r3, #16
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8087 	beq.w	8004388 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427e:	2220      	movs	r2, #32
 8004280:	409a      	lsls	r2, r3
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b05      	cmp	r3, #5
 8004290:	d136      	bne.n	8004300 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0216 	bic.w	r2, r2, #22
 80042a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695a      	ldr	r2, [r3, #20]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d103      	bne.n	80042c2 <HAL_DMA_IRQHandler+0x1da>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d007      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0208 	bic.w	r2, r2, #8
 80042d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d6:	223f      	movs	r2, #63	; 0x3f
 80042d8:	409a      	lsls	r2, r3
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d07e      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	4798      	blx	r3
        }
        return;
 80042fe:	e079      	b.n	80043f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d01d      	beq.n	800434a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10d      	bne.n	8004338 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004320:	2b00      	cmp	r3, #0
 8004322:	d031      	beq.n	8004388 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4798      	blx	r3
 800432c:	e02c      	b.n	8004388 <HAL_DMA_IRQHandler+0x2a0>
 800432e:	bf00      	nop
 8004330:	20000000 	.word	0x20000000
 8004334:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433c:	2b00      	cmp	r3, #0
 800433e:	d023      	beq.n	8004388 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	4798      	blx	r3
 8004348:	e01e      	b.n	8004388 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10f      	bne.n	8004378 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0210 	bic.w	r2, r2, #16
 8004366:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438c:	2b00      	cmp	r3, #0
 800438e:	d032      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d022      	beq.n	80043e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2205      	movs	r2, #5
 80043a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0201 	bic.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	3301      	adds	r3, #1
 80043b8:	60bb      	str	r3, [r7, #8]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d307      	bcc.n	80043d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f2      	bne.n	80043b4 <HAL_DMA_IRQHandler+0x2cc>
 80043ce:	e000      	b.n	80043d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80043d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d005      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	4798      	blx	r3
 80043f2:	e000      	b.n	80043f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80043f4:	bf00      	nop
    }
  }
}
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004418:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	2b40      	cmp	r3, #64	; 0x40
 8004428:	d108      	bne.n	800443c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800443a:	e007      	b.n	800444c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	60da      	str	r2, [r3, #12]
}
 800444c:	bf00      	nop
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	3b10      	subs	r3, #16
 8004468:	4a13      	ldr	r2, [pc, #76]	; (80044b8 <DMA_CalcBaseAndBitshift+0x60>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004472:	4a12      	ldr	r2, [pc, #72]	; (80044bc <DMA_CalcBaseAndBitshift+0x64>)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4413      	add	r3, r2
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b03      	cmp	r3, #3
 8004484:	d908      	bls.n	8004498 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <DMA_CalcBaseAndBitshift+0x68>)
 800448e:	4013      	ands	r3, r2
 8004490:	1d1a      	adds	r2, r3, #4
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	659a      	str	r2, [r3, #88]	; 0x58
 8004496:	e006      	b.n	80044a6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	4b08      	ldr	r3, [pc, #32]	; (80044c0 <DMA_CalcBaseAndBitshift+0x68>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	aaaaaaab 	.word	0xaaaaaaab
 80044bc:	08031ccc 	.word	0x08031ccc
 80044c0:	fffffc00 	.word	0xfffffc00

080044c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d11f      	bne.n	800451e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d856      	bhi.n	8004592 <DMA_CheckFifoParam+0xce>
 80044e4:	a201      	add	r2, pc, #4	; (adr r2, 80044ec <DMA_CheckFifoParam+0x28>)
 80044e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ea:	bf00      	nop
 80044ec:	080044fd 	.word	0x080044fd
 80044f0:	0800450f 	.word	0x0800450f
 80044f4:	080044fd 	.word	0x080044fd
 80044f8:	08004593 	.word	0x08004593
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d046      	beq.n	8004596 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800450c:	e043      	b.n	8004596 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004512:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004516:	d140      	bne.n	800459a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800451c:	e03d      	b.n	800459a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004526:	d121      	bne.n	800456c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b03      	cmp	r3, #3
 800452c:	d837      	bhi.n	800459e <DMA_CheckFifoParam+0xda>
 800452e:	a201      	add	r2, pc, #4	; (adr r2, 8004534 <DMA_CheckFifoParam+0x70>)
 8004530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004534:	08004545 	.word	0x08004545
 8004538:	0800454b 	.word	0x0800454b
 800453c:	08004545 	.word	0x08004545
 8004540:	0800455d 	.word	0x0800455d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
      break;
 8004548:	e030      	b.n	80045ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d025      	beq.n	80045a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800455a:	e022      	b.n	80045a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004564:	d11f      	bne.n	80045a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800456a:	e01c      	b.n	80045a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d903      	bls.n	800457a <DMA_CheckFifoParam+0xb6>
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b03      	cmp	r3, #3
 8004576:	d003      	beq.n	8004580 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004578:	e018      	b.n	80045ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
      break;
 800457e:	e015      	b.n	80045ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00e      	beq.n	80045aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
      break;
 8004590:	e00b      	b.n	80045aa <DMA_CheckFifoParam+0xe6>
      break;
 8004592:	bf00      	nop
 8004594:	e00a      	b.n	80045ac <DMA_CheckFifoParam+0xe8>
      break;
 8004596:	bf00      	nop
 8004598:	e008      	b.n	80045ac <DMA_CheckFifoParam+0xe8>
      break;
 800459a:	bf00      	nop
 800459c:	e006      	b.n	80045ac <DMA_CheckFifoParam+0xe8>
      break;
 800459e:	bf00      	nop
 80045a0:	e004      	b.n	80045ac <DMA_CheckFifoParam+0xe8>
      break;
 80045a2:	bf00      	nop
 80045a4:	e002      	b.n	80045ac <DMA_CheckFifoParam+0xe8>
      break;   
 80045a6:	bf00      	nop
 80045a8:	e000      	b.n	80045ac <DMA_CheckFifoParam+0xe8>
      break;
 80045aa:	bf00      	nop
    }
  } 
  
  return status; 
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop

080045bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045bc:	b480      	push	{r7}
 80045be:	b089      	sub	sp, #36	; 0x24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80045c6:	2300      	movs	r3, #0
 80045c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80045ce:	2300      	movs	r3, #0
 80045d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80045d6:	2300      	movs	r3, #0
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	e175      	b.n	80048c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80045dc:	2201      	movs	r2, #1
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4013      	ands	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	f040 8164 	bne.w	80048c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	2b01      	cmp	r3, #1
 8004604:	d005      	beq.n	8004612 <HAL_GPIO_Init+0x56>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d130      	bne.n	8004674 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	2203      	movs	r2, #3
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43db      	mvns	r3, r3
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	4013      	ands	r3, r2
 8004628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	4313      	orrs	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004648:	2201      	movs	r2, #1
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	43db      	mvns	r3, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4013      	ands	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	091b      	lsrs	r3, r3, #4
 800465e:	f003 0201 	and.w	r2, r3, #1
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4313      	orrs	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f003 0303 	and.w	r3, r3, #3
 800467c:	2b03      	cmp	r3, #3
 800467e:	d017      	beq.n	80046b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	2203      	movs	r2, #3
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	43db      	mvns	r3, r3
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	4013      	ands	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f003 0303 	and.w	r3, r3, #3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d123      	bne.n	8004704 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	08da      	lsrs	r2, r3, #3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3208      	adds	r2, #8
 80046c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	220f      	movs	r2, #15
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	43db      	mvns	r3, r3
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4013      	ands	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	08da      	lsrs	r2, r3, #3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3208      	adds	r2, #8
 80046fe:	69b9      	ldr	r1, [r7, #24]
 8004700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	2203      	movs	r2, #3
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	43db      	mvns	r3, r3
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	4013      	ands	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 0203 	and.w	r2, r3, #3
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80be 	beq.w	80048c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004746:	4b66      	ldr	r3, [pc, #408]	; (80048e0 <HAL_GPIO_Init+0x324>)
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	4a65      	ldr	r2, [pc, #404]	; (80048e0 <HAL_GPIO_Init+0x324>)
 800474c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004750:	6453      	str	r3, [r2, #68]	; 0x44
 8004752:	4b63      	ldr	r3, [pc, #396]	; (80048e0 <HAL_GPIO_Init+0x324>)
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800475e:	4a61      	ldr	r2, [pc, #388]	; (80048e4 <HAL_GPIO_Init+0x328>)
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	089b      	lsrs	r3, r3, #2
 8004764:	3302      	adds	r3, #2
 8004766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800476a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	220f      	movs	r2, #15
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43db      	mvns	r3, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4013      	ands	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a58      	ldr	r2, [pc, #352]	; (80048e8 <HAL_GPIO_Init+0x32c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d037      	beq.n	80047fa <HAL_GPIO_Init+0x23e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a57      	ldr	r2, [pc, #348]	; (80048ec <HAL_GPIO_Init+0x330>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d031      	beq.n	80047f6 <HAL_GPIO_Init+0x23a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a56      	ldr	r2, [pc, #344]	; (80048f0 <HAL_GPIO_Init+0x334>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d02b      	beq.n	80047f2 <HAL_GPIO_Init+0x236>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a55      	ldr	r2, [pc, #340]	; (80048f4 <HAL_GPIO_Init+0x338>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d025      	beq.n	80047ee <HAL_GPIO_Init+0x232>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a54      	ldr	r2, [pc, #336]	; (80048f8 <HAL_GPIO_Init+0x33c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d01f      	beq.n	80047ea <HAL_GPIO_Init+0x22e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a53      	ldr	r2, [pc, #332]	; (80048fc <HAL_GPIO_Init+0x340>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d019      	beq.n	80047e6 <HAL_GPIO_Init+0x22a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a52      	ldr	r2, [pc, #328]	; (8004900 <HAL_GPIO_Init+0x344>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <HAL_GPIO_Init+0x226>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a51      	ldr	r2, [pc, #324]	; (8004904 <HAL_GPIO_Init+0x348>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00d      	beq.n	80047de <HAL_GPIO_Init+0x222>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a50      	ldr	r2, [pc, #320]	; (8004908 <HAL_GPIO_Init+0x34c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d007      	beq.n	80047da <HAL_GPIO_Init+0x21e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a4f      	ldr	r2, [pc, #316]	; (800490c <HAL_GPIO_Init+0x350>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d101      	bne.n	80047d6 <HAL_GPIO_Init+0x21a>
 80047d2:	2309      	movs	r3, #9
 80047d4:	e012      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047d6:	230a      	movs	r3, #10
 80047d8:	e010      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047da:	2308      	movs	r3, #8
 80047dc:	e00e      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047de:	2307      	movs	r3, #7
 80047e0:	e00c      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047e2:	2306      	movs	r3, #6
 80047e4:	e00a      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047e6:	2305      	movs	r3, #5
 80047e8:	e008      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047ea:	2304      	movs	r3, #4
 80047ec:	e006      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047ee:	2303      	movs	r3, #3
 80047f0:	e004      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047f2:	2302      	movs	r3, #2
 80047f4:	e002      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047fa:	2300      	movs	r3, #0
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	f002 0203 	and.w	r2, r2, #3
 8004802:	0092      	lsls	r2, r2, #2
 8004804:	4093      	lsls	r3, r2
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	4313      	orrs	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800480c:	4935      	ldr	r1, [pc, #212]	; (80048e4 <HAL_GPIO_Init+0x328>)
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	089b      	lsrs	r3, r3, #2
 8004812:	3302      	adds	r3, #2
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800481a:	4b3d      	ldr	r3, [pc, #244]	; (8004910 <HAL_GPIO_Init+0x354>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800483e:	4a34      	ldr	r2, [pc, #208]	; (8004910 <HAL_GPIO_Init+0x354>)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004844:	4b32      	ldr	r3, [pc, #200]	; (8004910 <HAL_GPIO_Init+0x354>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	43db      	mvns	r3, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4013      	ands	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004868:	4a29      	ldr	r2, [pc, #164]	; (8004910 <HAL_GPIO_Init+0x354>)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800486e:	4b28      	ldr	r3, [pc, #160]	; (8004910 <HAL_GPIO_Init+0x354>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	43db      	mvns	r3, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4013      	ands	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004892:	4a1f      	ldr	r2, [pc, #124]	; (8004910 <HAL_GPIO_Init+0x354>)
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004898:	4b1d      	ldr	r3, [pc, #116]	; (8004910 <HAL_GPIO_Init+0x354>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	43db      	mvns	r3, r3
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	4013      	ands	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048bc:	4a14      	ldr	r2, [pc, #80]	; (8004910 <HAL_GPIO_Init+0x354>)
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	3301      	adds	r3, #1
 80048c6:	61fb      	str	r3, [r7, #28]
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	2b0f      	cmp	r3, #15
 80048cc:	f67f ae86 	bls.w	80045dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80048d0:	bf00      	nop
 80048d2:	bf00      	nop
 80048d4:	3724      	adds	r7, #36	; 0x24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40023800 	.word	0x40023800
 80048e4:	40013800 	.word	0x40013800
 80048e8:	40020000 	.word	0x40020000
 80048ec:	40020400 	.word	0x40020400
 80048f0:	40020800 	.word	0x40020800
 80048f4:	40020c00 	.word	0x40020c00
 80048f8:	40021000 	.word	0x40021000
 80048fc:	40021400 	.word	0x40021400
 8004900:	40021800 	.word	0x40021800
 8004904:	40021c00 	.word	0x40021c00
 8004908:	40022000 	.word	0x40022000
 800490c:	40022400 	.word	0x40022400
 8004910:	40013c00 	.word	0x40013c00

08004914 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	887b      	ldrh	r3, [r7, #2]
 8004926:	4013      	ands	r3, r2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
 8004930:	e001      	b.n	8004936 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004932:	2300      	movs	r3, #0
 8004934:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004936:	7bfb      	ldrb	r3, [r7, #15]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	807b      	strh	r3, [r7, #2]
 8004950:	4613      	mov	r3, r2
 8004952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004954:	787b      	ldrb	r3, [r7, #1]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800495a:	887a      	ldrh	r2, [r7, #2]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004960:	e003      	b.n	800496a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004962:	887b      	ldrh	r3, [r7, #2]
 8004964:	041a      	lsls	r2, r3, #16
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	619a      	str	r2, [r3, #24]
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
	...

08004978 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e07f      	b.n	8004a8a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fc f8e6 	bl	8000b70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2224      	movs	r2, #36	; 0x24
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0201 	bic.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d107      	bne.n	80049f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ee:	609a      	str	r2, [r3, #8]
 80049f0:	e006      	b.n	8004a00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80049fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d104      	bne.n	8004a12 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6859      	ldr	r1, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4b1d      	ldr	r3, [pc, #116]	; (8004a94 <HAL_I2C_Init+0x11c>)
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691a      	ldr	r2, [r3, #16]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69d9      	ldr	r1, [r3, #28]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1a      	ldr	r2, [r3, #32]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	02008000 	.word	0x02008000

08004a98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d138      	bne.n	8004b20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e032      	b.n	8004b22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2224      	movs	r2, #36	; 0x24
 8004ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0201 	bic.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004aea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6819      	ldr	r1, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0201 	orr.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	e000      	b.n	8004b22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b20:	2302      	movs	r3, #2
  }
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b085      	sub	sp, #20
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d139      	bne.n	8004bb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e033      	b.n	8004bba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2224      	movs	r2, #36	; 0x24
 8004b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0201 	bic.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	021b      	lsls	r3, r3, #8
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	e000      	b.n	8004bba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004bb8:	2302      	movs	r3, #2
  }
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
	...

08004bc8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bcc:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a04      	ldr	r2, [pc, #16]	; (8004be4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd6:	6013      	str	r3, [r2, #0]
}
 8004bd8:	bf00      	nop
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40007000 	.word	0x40007000

08004be8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bf2:	4b23      	ldr	r3, [pc, #140]	; (8004c80 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	4a22      	ldr	r2, [pc, #136]	; (8004c80 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8004bfe:	4b20      	ldr	r3, [pc, #128]	; (8004c80 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004c0a:	4b1e      	ldr	r3, [pc, #120]	; (8004c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1d      	ldr	r2, [pc, #116]	; (8004c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c16:	f7fe fbc7 	bl	80033a8 <HAL_GetTick>
 8004c1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c1c:	e009      	b.n	8004c32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c1e:	f7fe fbc3 	bl	80033a8 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c2c:	d901      	bls.n	8004c32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e022      	b.n	8004c78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c32:	4b14      	ldr	r3, [pc, #80]	; (8004c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3e:	d1ee      	bne.n	8004c1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004c40:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a0f      	ldr	r2, [pc, #60]	; (8004c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c4c:	f7fe fbac 	bl	80033a8 <HAL_GetTick>
 8004c50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c52:	e009      	b.n	8004c68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c54:	f7fe fba8 	bl	80033a8 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c62:	d901      	bls.n	8004c68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e007      	b.n	8004c78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c68:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c74:	d1ee      	bne.n	8004c54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40023800 	.word	0x40023800
 8004c84:	40007000 	.word	0x40007000

08004c88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c90:	2300      	movs	r3, #0
 8004c92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e29b      	b.n	80051d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 8087 	beq.w	8004dba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cac:	4b96      	ldr	r3, [pc, #600]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 030c 	and.w	r3, r3, #12
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d00c      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cb8:	4b93      	ldr	r3, [pc, #588]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 030c 	and.w	r3, r3, #12
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d112      	bne.n	8004cea <HAL_RCC_OscConfig+0x62>
 8004cc4:	4b90      	ldr	r3, [pc, #576]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ccc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cd0:	d10b      	bne.n	8004cea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd2:	4b8d      	ldr	r3, [pc, #564]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d06c      	beq.n	8004db8 <HAL_RCC_OscConfig+0x130>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d168      	bne.n	8004db8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e275      	b.n	80051d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf2:	d106      	bne.n	8004d02 <HAL_RCC_OscConfig+0x7a>
 8004cf4:	4b84      	ldr	r3, [pc, #528]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a83      	ldr	r2, [pc, #524]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	e02e      	b.n	8004d60 <HAL_RCC_OscConfig+0xd8>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x9c>
 8004d0a:	4b7f      	ldr	r3, [pc, #508]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a7e      	ldr	r2, [pc, #504]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	4b7c      	ldr	r3, [pc, #496]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a7b      	ldr	r2, [pc, #492]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e01d      	b.n	8004d60 <HAL_RCC_OscConfig+0xd8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d2c:	d10c      	bne.n	8004d48 <HAL_RCC_OscConfig+0xc0>
 8004d2e:	4b76      	ldr	r3, [pc, #472]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a75      	ldr	r2, [pc, #468]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	4b73      	ldr	r3, [pc, #460]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a72      	ldr	r2, [pc, #456]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	e00b      	b.n	8004d60 <HAL_RCC_OscConfig+0xd8>
 8004d48:	4b6f      	ldr	r3, [pc, #444]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a6e      	ldr	r2, [pc, #440]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d52:	6013      	str	r3, [r2, #0]
 8004d54:	4b6c      	ldr	r3, [pc, #432]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a6b      	ldr	r2, [pc, #428]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d013      	beq.n	8004d90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fe fb1e 	bl	80033a8 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d70:	f7fe fb1a 	bl	80033a8 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b64      	cmp	r3, #100	; 0x64
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e229      	b.n	80051d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d82:	4b61      	ldr	r3, [pc, #388]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0f0      	beq.n	8004d70 <HAL_RCC_OscConfig+0xe8>
 8004d8e:	e014      	b.n	8004dba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d90:	f7fe fb0a 	bl	80033a8 <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d98:	f7fe fb06 	bl	80033a8 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b64      	cmp	r3, #100	; 0x64
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e215      	b.n	80051d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004daa:	4b57      	ldr	r3, [pc, #348]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1f0      	bne.n	8004d98 <HAL_RCC_OscConfig+0x110>
 8004db6:	e000      	b.n	8004dba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d069      	beq.n	8004e9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dc6:	4b50      	ldr	r3, [pc, #320]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 030c 	and.w	r3, r3, #12
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00b      	beq.n	8004dea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dd2:	4b4d      	ldr	r3, [pc, #308]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 030c 	and.w	r3, r3, #12
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d11c      	bne.n	8004e18 <HAL_RCC_OscConfig+0x190>
 8004dde:	4b4a      	ldr	r3, [pc, #296]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d116      	bne.n	8004e18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dea:	4b47      	ldr	r3, [pc, #284]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <HAL_RCC_OscConfig+0x17a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d001      	beq.n	8004e02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e1e9      	b.n	80051d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e02:	4b41      	ldr	r3, [pc, #260]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	493d      	ldr	r1, [pc, #244]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e16:	e040      	b.n	8004e9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d023      	beq.n	8004e68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e20:	4b39      	ldr	r3, [pc, #228]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a38      	ldr	r2, [pc, #224]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004e26:	f043 0301 	orr.w	r3, r3, #1
 8004e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fe fabc 	bl	80033a8 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e34:	f7fe fab8 	bl	80033a8 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e1c7      	b.n	80051d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e46:	4b30      	ldr	r3, [pc, #192]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e52:	4b2d      	ldr	r3, [pc, #180]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	4929      	ldr	r1, [pc, #164]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	600b      	str	r3, [r1, #0]
 8004e66:	e018      	b.n	8004e9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e68:	4b27      	ldr	r3, [pc, #156]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a26      	ldr	r2, [pc, #152]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004e6e:	f023 0301 	bic.w	r3, r3, #1
 8004e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e74:	f7fe fa98 	bl	80033a8 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e7c:	f7fe fa94 	bl	80033a8 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e1a3      	b.n	80051d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e8e:	4b1e      	ldr	r3, [pc, #120]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f0      	bne.n	8004e7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d038      	beq.n	8004f18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d019      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eae:	4b16      	ldr	r3, [pc, #88]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb2:	4a15      	ldr	r2, [pc, #84]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004eb4:	f043 0301 	orr.w	r3, r3, #1
 8004eb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eba:	f7fe fa75 	bl	80033a8 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec2:	f7fe fa71 	bl	80033a8 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e180      	b.n	80051d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ed4:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0f0      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x23a>
 8004ee0:	e01a      	b.n	8004f18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ee2:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee6:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <HAL_RCC_OscConfig+0x280>)
 8004ee8:	f023 0301 	bic.w	r3, r3, #1
 8004eec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eee:	f7fe fa5b 	bl	80033a8 <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef4:	e00a      	b.n	8004f0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ef6:	f7fe fa57 	bl	80033a8 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d903      	bls.n	8004f0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e166      	b.n	80051d6 <HAL_RCC_OscConfig+0x54e>
 8004f08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f0c:	4b92      	ldr	r3, [pc, #584]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8004f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1ee      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80a4 	beq.w	800506e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f26:	4b8c      	ldr	r3, [pc, #560]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10d      	bne.n	8004f4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f32:	4b89      	ldr	r3, [pc, #548]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	4a88      	ldr	r2, [pc, #544]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8004f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f3e:	4b86      	ldr	r3, [pc, #536]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f46:	60bb      	str	r3, [r7, #8]
 8004f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f4e:	4b83      	ldr	r3, [pc, #524]	; (800515c <HAL_RCC_OscConfig+0x4d4>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d118      	bne.n	8004f8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004f5a:	4b80      	ldr	r3, [pc, #512]	; (800515c <HAL_RCC_OscConfig+0x4d4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a7f      	ldr	r2, [pc, #508]	; (800515c <HAL_RCC_OscConfig+0x4d4>)
 8004f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f66:	f7fe fa1f 	bl	80033a8 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f6e:	f7fe fa1b 	bl	80033a8 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b64      	cmp	r3, #100	; 0x64
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e12a      	b.n	80051d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f80:	4b76      	ldr	r3, [pc, #472]	; (800515c <HAL_RCC_OscConfig+0x4d4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0f0      	beq.n	8004f6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d106      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x31a>
 8004f94:	4b70      	ldr	r3, [pc, #448]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8004f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f98:	4a6f      	ldr	r2, [pc, #444]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8004f9a:	f043 0301 	orr.w	r3, r3, #1
 8004f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa0:	e02d      	b.n	8004ffe <HAL_RCC_OscConfig+0x376>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10c      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x33c>
 8004faa:	4b6b      	ldr	r3, [pc, #428]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fae:	4a6a      	ldr	r2, [pc, #424]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8004fb0:	f023 0301 	bic.w	r3, r3, #1
 8004fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb6:	4b68      	ldr	r3, [pc, #416]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fba:	4a67      	ldr	r2, [pc, #412]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8004fbc:	f023 0304 	bic.w	r3, r3, #4
 8004fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004fc2:	e01c      	b.n	8004ffe <HAL_RCC_OscConfig+0x376>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2b05      	cmp	r3, #5
 8004fca:	d10c      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x35e>
 8004fcc:	4b62      	ldr	r3, [pc, #392]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8004fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd0:	4a61      	ldr	r2, [pc, #388]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8004fd2:	f043 0304 	orr.w	r3, r3, #4
 8004fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8004fd8:	4b5f      	ldr	r3, [pc, #380]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8004fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fdc:	4a5e      	ldr	r2, [pc, #376]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8004fde:	f043 0301 	orr.w	r3, r3, #1
 8004fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe4:	e00b      	b.n	8004ffe <HAL_RCC_OscConfig+0x376>
 8004fe6:	4b5c      	ldr	r3, [pc, #368]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fea:	4a5b      	ldr	r2, [pc, #364]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8004fec:	f023 0301 	bic.w	r3, r3, #1
 8004ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff2:	4b59      	ldr	r3, [pc, #356]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff6:	4a58      	ldr	r2, [pc, #352]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8004ff8:	f023 0304 	bic.w	r3, r3, #4
 8004ffc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d015      	beq.n	8005032 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005006:	f7fe f9cf 	bl	80033a8 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800500c:	e00a      	b.n	8005024 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800500e:	f7fe f9cb 	bl	80033a8 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	f241 3288 	movw	r2, #5000	; 0x1388
 800501c:	4293      	cmp	r3, r2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e0d8      	b.n	80051d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005024:	4b4c      	ldr	r3, [pc, #304]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8005026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0ee      	beq.n	800500e <HAL_RCC_OscConfig+0x386>
 8005030:	e014      	b.n	800505c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005032:	f7fe f9b9 	bl	80033a8 <HAL_GetTick>
 8005036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005038:	e00a      	b.n	8005050 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503a:	f7fe f9b5 	bl	80033a8 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	f241 3288 	movw	r2, #5000	; 0x1388
 8005048:	4293      	cmp	r3, r2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e0c2      	b.n	80051d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005050:	4b41      	ldr	r3, [pc, #260]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8005052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1ee      	bne.n	800503a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800505c:	7dfb      	ldrb	r3, [r7, #23]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d105      	bne.n	800506e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005062:	4b3d      	ldr	r3, [pc, #244]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	4a3c      	ldr	r2, [pc, #240]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8005068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800506c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 80ae 	beq.w	80051d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005078:	4b37      	ldr	r3, [pc, #220]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 030c 	and.w	r3, r3, #12
 8005080:	2b08      	cmp	r3, #8
 8005082:	d06d      	beq.n	8005160 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	2b02      	cmp	r3, #2
 800508a:	d14b      	bne.n	8005124 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800508c:	4b32      	ldr	r3, [pc, #200]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a31      	ldr	r2, [pc, #196]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8005092:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005098:	f7fe f986 	bl	80033a8 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a0:	f7fe f982 	bl	80033a8 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e091      	b.n	80051d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b2:	4b29      	ldr	r3, [pc, #164]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69da      	ldr	r2, [r3, #28]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	431a      	orrs	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	019b      	lsls	r3, r3, #6
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	085b      	lsrs	r3, r3, #1
 80050d6:	3b01      	subs	r3, #1
 80050d8:	041b      	lsls	r3, r3, #16
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	061b      	lsls	r3, r3, #24
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e8:	071b      	lsls	r3, r3, #28
 80050ea:	491b      	ldr	r1, [pc, #108]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050f0:	4b19      	ldr	r3, [pc, #100]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a18      	ldr	r2, [pc, #96]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 80050f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fc:	f7fe f954 	bl	80033a8 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005104:	f7fe f950 	bl	80033a8 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e05f      	b.n	80051d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005116:	4b10      	ldr	r3, [pc, #64]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0f0      	beq.n	8005104 <HAL_RCC_OscConfig+0x47c>
 8005122:	e057      	b.n	80051d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005124:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a0b      	ldr	r2, [pc, #44]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 800512a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800512e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005130:	f7fe f93a 	bl	80033a8 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005138:	f7fe f936 	bl	80033a8 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e045      	b.n	80051d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800514a:	4b03      	ldr	r3, [pc, #12]	; (8005158 <HAL_RCC_OscConfig+0x4d0>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f0      	bne.n	8005138 <HAL_RCC_OscConfig+0x4b0>
 8005156:	e03d      	b.n	80051d4 <HAL_RCC_OscConfig+0x54c>
 8005158:	40023800 	.word	0x40023800
 800515c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005160:	4b1f      	ldr	r3, [pc, #124]	; (80051e0 <HAL_RCC_OscConfig+0x558>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d030      	beq.n	80051d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005178:	429a      	cmp	r2, r3
 800517a:	d129      	bne.n	80051d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005186:	429a      	cmp	r2, r3
 8005188:	d122      	bne.n	80051d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005190:	4013      	ands	r3, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005196:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005198:	4293      	cmp	r3, r2
 800519a:	d119      	bne.n	80051d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	085b      	lsrs	r3, r3, #1
 80051a8:	3b01      	subs	r3, #1
 80051aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d10f      	bne.n	80051d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80051bc:	429a      	cmp	r2, r3
 80051be:	d107      	bne.n	80051d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d001      	beq.n	80051d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e000      	b.n	80051d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40023800 	.word	0x40023800

080051e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e0d0      	b.n	800539e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051fc:	4b6a      	ldr	r3, [pc, #424]	; (80053a8 <HAL_RCC_ClockConfig+0x1c4>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 030f 	and.w	r3, r3, #15
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d910      	bls.n	800522c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520a:	4b67      	ldr	r3, [pc, #412]	; (80053a8 <HAL_RCC_ClockConfig+0x1c4>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f023 020f 	bic.w	r2, r3, #15
 8005212:	4965      	ldr	r1, [pc, #404]	; (80053a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	4313      	orrs	r3, r2
 8005218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800521a:	4b63      	ldr	r3, [pc, #396]	; (80053a8 <HAL_RCC_ClockConfig+0x1c4>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d001      	beq.n	800522c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e0b8      	b.n	800539e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d020      	beq.n	800527a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	d005      	beq.n	8005250 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005244:	4b59      	ldr	r3, [pc, #356]	; (80053ac <HAL_RCC_ClockConfig+0x1c8>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	4a58      	ldr	r2, [pc, #352]	; (80053ac <HAL_RCC_ClockConfig+0x1c8>)
 800524a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800524e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d005      	beq.n	8005268 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800525c:	4b53      	ldr	r3, [pc, #332]	; (80053ac <HAL_RCC_ClockConfig+0x1c8>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	4a52      	ldr	r2, [pc, #328]	; (80053ac <HAL_RCC_ClockConfig+0x1c8>)
 8005262:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005266:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005268:	4b50      	ldr	r3, [pc, #320]	; (80053ac <HAL_RCC_ClockConfig+0x1c8>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	494d      	ldr	r1, [pc, #308]	; (80053ac <HAL_RCC_ClockConfig+0x1c8>)
 8005276:	4313      	orrs	r3, r2
 8005278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d040      	beq.n	8005308 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d107      	bne.n	800529e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800528e:	4b47      	ldr	r3, [pc, #284]	; (80053ac <HAL_RCC_ClockConfig+0x1c8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d115      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e07f      	b.n	800539e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d107      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a6:	4b41      	ldr	r3, [pc, #260]	; (80053ac <HAL_RCC_ClockConfig+0x1c8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d109      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e073      	b.n	800539e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052b6:	4b3d      	ldr	r3, [pc, #244]	; (80053ac <HAL_RCC_ClockConfig+0x1c8>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e06b      	b.n	800539e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052c6:	4b39      	ldr	r3, [pc, #228]	; (80053ac <HAL_RCC_ClockConfig+0x1c8>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f023 0203 	bic.w	r2, r3, #3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	4936      	ldr	r1, [pc, #216]	; (80053ac <HAL_RCC_ClockConfig+0x1c8>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052d8:	f7fe f866 	bl	80033a8 <HAL_GetTick>
 80052dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052de:	e00a      	b.n	80052f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e0:	f7fe f862 	bl	80033a8 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e053      	b.n	800539e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052f6:	4b2d      	ldr	r3, [pc, #180]	; (80053ac <HAL_RCC_ClockConfig+0x1c8>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 020c 	and.w	r2, r3, #12
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	429a      	cmp	r2, r3
 8005306:	d1eb      	bne.n	80052e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005308:	4b27      	ldr	r3, [pc, #156]	; (80053a8 <HAL_RCC_ClockConfig+0x1c4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 030f 	and.w	r3, r3, #15
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d210      	bcs.n	8005338 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005316:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f023 020f 	bic.w	r2, r3, #15
 800531e:	4922      	ldr	r1, [pc, #136]	; (80053a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	4313      	orrs	r3, r2
 8005324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005326:	4b20      	ldr	r3, [pc, #128]	; (80053a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d001      	beq.n	8005338 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e032      	b.n	800539e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b00      	cmp	r3, #0
 8005342:	d008      	beq.n	8005356 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005344:	4b19      	ldr	r3, [pc, #100]	; (80053ac <HAL_RCC_ClockConfig+0x1c8>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	4916      	ldr	r1, [pc, #88]	; (80053ac <HAL_RCC_ClockConfig+0x1c8>)
 8005352:	4313      	orrs	r3, r2
 8005354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0308 	and.w	r3, r3, #8
 800535e:	2b00      	cmp	r3, #0
 8005360:	d009      	beq.n	8005376 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005362:	4b12      	ldr	r3, [pc, #72]	; (80053ac <HAL_RCC_ClockConfig+0x1c8>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	490e      	ldr	r1, [pc, #56]	; (80053ac <HAL_RCC_ClockConfig+0x1c8>)
 8005372:	4313      	orrs	r3, r2
 8005374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005376:	f000 f821 	bl	80053bc <HAL_RCC_GetSysClockFreq>
 800537a:	4602      	mov	r2, r0
 800537c:	4b0b      	ldr	r3, [pc, #44]	; (80053ac <HAL_RCC_ClockConfig+0x1c8>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	091b      	lsrs	r3, r3, #4
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	490a      	ldr	r1, [pc, #40]	; (80053b0 <HAL_RCC_ClockConfig+0x1cc>)
 8005388:	5ccb      	ldrb	r3, [r1, r3]
 800538a:	fa22 f303 	lsr.w	r3, r2, r3
 800538e:	4a09      	ldr	r2, [pc, #36]	; (80053b4 <HAL_RCC_ClockConfig+0x1d0>)
 8005390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005392:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <HAL_RCC_ClockConfig+0x1d4>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f7fd ffc2 	bl	8003320 <HAL_InitTick>

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	40023c00 	.word	0x40023c00
 80053ac:	40023800 	.word	0x40023800
 80053b0:	08031a74 	.word	0x08031a74
 80053b4:	20000000 	.word	0x20000000
 80053b8:	20000008 	.word	0x20000008

080053bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053c0:	b094      	sub	sp, #80	; 0x50
 80053c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80053c4:	2300      	movs	r3, #0
 80053c6:	647b      	str	r3, [r7, #68]	; 0x44
 80053c8:	2300      	movs	r3, #0
 80053ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053cc:	2300      	movs	r3, #0
 80053ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053d4:	4b79      	ldr	r3, [pc, #484]	; (80055bc <HAL_RCC_GetSysClockFreq+0x200>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f003 030c 	and.w	r3, r3, #12
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d00d      	beq.n	80053fc <HAL_RCC_GetSysClockFreq+0x40>
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	f200 80e1 	bhi.w	80055a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <HAL_RCC_GetSysClockFreq+0x34>
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d003      	beq.n	80053f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80053ee:	e0db      	b.n	80055a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053f0:	4b73      	ldr	r3, [pc, #460]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80053f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053f4:	e0db      	b.n	80055ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053f6:	4b73      	ldr	r3, [pc, #460]	; (80055c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80053f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053fa:	e0d8      	b.n	80055ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053fc:	4b6f      	ldr	r3, [pc, #444]	; (80055bc <HAL_RCC_GetSysClockFreq+0x200>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005404:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005406:	4b6d      	ldr	r3, [pc, #436]	; (80055bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d063      	beq.n	80054da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005412:	4b6a      	ldr	r3, [pc, #424]	; (80055bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	099b      	lsrs	r3, r3, #6
 8005418:	2200      	movs	r2, #0
 800541a:	63bb      	str	r3, [r7, #56]	; 0x38
 800541c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800541e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005424:	633b      	str	r3, [r7, #48]	; 0x30
 8005426:	2300      	movs	r3, #0
 8005428:	637b      	str	r3, [r7, #52]	; 0x34
 800542a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800542e:	4622      	mov	r2, r4
 8005430:	462b      	mov	r3, r5
 8005432:	f04f 0000 	mov.w	r0, #0
 8005436:	f04f 0100 	mov.w	r1, #0
 800543a:	0159      	lsls	r1, r3, #5
 800543c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005440:	0150      	lsls	r0, r2, #5
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	4621      	mov	r1, r4
 8005448:	1a51      	subs	r1, r2, r1
 800544a:	6139      	str	r1, [r7, #16]
 800544c:	4629      	mov	r1, r5
 800544e:	eb63 0301 	sbc.w	r3, r3, r1
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005460:	4659      	mov	r1, fp
 8005462:	018b      	lsls	r3, r1, #6
 8005464:	4651      	mov	r1, sl
 8005466:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800546a:	4651      	mov	r1, sl
 800546c:	018a      	lsls	r2, r1, #6
 800546e:	4651      	mov	r1, sl
 8005470:	ebb2 0801 	subs.w	r8, r2, r1
 8005474:	4659      	mov	r1, fp
 8005476:	eb63 0901 	sbc.w	r9, r3, r1
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	f04f 0300 	mov.w	r3, #0
 8005482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800548a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800548e:	4690      	mov	r8, r2
 8005490:	4699      	mov	r9, r3
 8005492:	4623      	mov	r3, r4
 8005494:	eb18 0303 	adds.w	r3, r8, r3
 8005498:	60bb      	str	r3, [r7, #8]
 800549a:	462b      	mov	r3, r5
 800549c:	eb49 0303 	adc.w	r3, r9, r3
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	f04f 0200 	mov.w	r2, #0
 80054a6:	f04f 0300 	mov.w	r3, #0
 80054aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054ae:	4629      	mov	r1, r5
 80054b0:	024b      	lsls	r3, r1, #9
 80054b2:	4621      	mov	r1, r4
 80054b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054b8:	4621      	mov	r1, r4
 80054ba:	024a      	lsls	r2, r1, #9
 80054bc:	4610      	mov	r0, r2
 80054be:	4619      	mov	r1, r3
 80054c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c2:	2200      	movs	r2, #0
 80054c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054cc:	f7fa ff10 	bl	80002f0 <__aeabi_uldivmod>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4613      	mov	r3, r2
 80054d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d8:	e058      	b.n	800558c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054da:	4b38      	ldr	r3, [pc, #224]	; (80055bc <HAL_RCC_GetSysClockFreq+0x200>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	099b      	lsrs	r3, r3, #6
 80054e0:	2200      	movs	r2, #0
 80054e2:	4618      	mov	r0, r3
 80054e4:	4611      	mov	r1, r2
 80054e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054ea:	623b      	str	r3, [r7, #32]
 80054ec:	2300      	movs	r3, #0
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
 80054f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054f4:	4642      	mov	r2, r8
 80054f6:	464b      	mov	r3, r9
 80054f8:	f04f 0000 	mov.w	r0, #0
 80054fc:	f04f 0100 	mov.w	r1, #0
 8005500:	0159      	lsls	r1, r3, #5
 8005502:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005506:	0150      	lsls	r0, r2, #5
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	4641      	mov	r1, r8
 800550e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005512:	4649      	mov	r1, r9
 8005514:	eb63 0b01 	sbc.w	fp, r3, r1
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005524:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005528:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800552c:	ebb2 040a 	subs.w	r4, r2, sl
 8005530:	eb63 050b 	sbc.w	r5, r3, fp
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	00eb      	lsls	r3, r5, #3
 800553e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005542:	00e2      	lsls	r2, r4, #3
 8005544:	4614      	mov	r4, r2
 8005546:	461d      	mov	r5, r3
 8005548:	4643      	mov	r3, r8
 800554a:	18e3      	adds	r3, r4, r3
 800554c:	603b      	str	r3, [r7, #0]
 800554e:	464b      	mov	r3, r9
 8005550:	eb45 0303 	adc.w	r3, r5, r3
 8005554:	607b      	str	r3, [r7, #4]
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005562:	4629      	mov	r1, r5
 8005564:	028b      	lsls	r3, r1, #10
 8005566:	4621      	mov	r1, r4
 8005568:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800556c:	4621      	mov	r1, r4
 800556e:	028a      	lsls	r2, r1, #10
 8005570:	4610      	mov	r0, r2
 8005572:	4619      	mov	r1, r3
 8005574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005576:	2200      	movs	r2, #0
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	61fa      	str	r2, [r7, #28]
 800557c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005580:	f7fa feb6 	bl	80002f0 <__aeabi_uldivmod>
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	4613      	mov	r3, r2
 800558a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800558c:	4b0b      	ldr	r3, [pc, #44]	; (80055bc <HAL_RCC_GetSysClockFreq+0x200>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	0c1b      	lsrs	r3, r3, #16
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	3301      	adds	r3, #1
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800559c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800559e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055a6:	e002      	b.n	80055ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055a8:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80055aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3750      	adds	r7, #80	; 0x50
 80055b4:	46bd      	mov	sp, r7
 80055b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ba:	bf00      	nop
 80055bc:	40023800 	.word	0x40023800
 80055c0:	00f42400 	.word	0x00f42400
 80055c4:	007a1200 	.word	0x007a1200

080055c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055cc:	4b03      	ldr	r3, [pc, #12]	; (80055dc <HAL_RCC_GetHCLKFreq+0x14>)
 80055ce:	681b      	ldr	r3, [r3, #0]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	20000000 	.word	0x20000000

080055e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055e4:	f7ff fff0 	bl	80055c8 <HAL_RCC_GetHCLKFreq>
 80055e8:	4602      	mov	r2, r0
 80055ea:	4b05      	ldr	r3, [pc, #20]	; (8005600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	0a9b      	lsrs	r3, r3, #10
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	4903      	ldr	r1, [pc, #12]	; (8005604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055f6:	5ccb      	ldrb	r3, [r1, r3]
 80055f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40023800 	.word	0x40023800
 8005604:	08031a84 	.word	0x08031a84

08005608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800560c:	f7ff ffdc 	bl	80055c8 <HAL_RCC_GetHCLKFreq>
 8005610:	4602      	mov	r2, r0
 8005612:	4b05      	ldr	r3, [pc, #20]	; (8005628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	0b5b      	lsrs	r3, r3, #13
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	4903      	ldr	r1, [pc, #12]	; (800562c <HAL_RCC_GetPCLK2Freq+0x24>)
 800561e:	5ccb      	ldrb	r3, [r1, r3]
 8005620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005624:	4618      	mov	r0, r3
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40023800 	.word	0x40023800
 800562c:	08031a84 	.word	0x08031a84

08005630 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005638:	2300      	movs	r3, #0
 800563a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800563c:	2300      	movs	r3, #0
 800563e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005640:	2300      	movs	r3, #0
 8005642:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005644:	2300      	movs	r3, #0
 8005646:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d012      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005658:	4b69      	ldr	r3, [pc, #420]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	4a68      	ldr	r2, [pc, #416]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800565e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005662:	6093      	str	r3, [r2, #8]
 8005664:	4b66      	ldr	r3, [pc, #408]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566c:	4964      	ldr	r1, [pc, #400]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800566e:	4313      	orrs	r3, r2
 8005670:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800567a:	2301      	movs	r3, #1
 800567c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d017      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800568a:	4b5d      	ldr	r3, [pc, #372]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800568c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005690:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005698:	4959      	ldr	r1, [pc, #356]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056a8:	d101      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80056aa:	2301      	movs	r3, #1
 80056ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80056b6:	2301      	movs	r3, #1
 80056b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d017      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056c6:	4b4e      	ldr	r3, [pc, #312]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d4:	494a      	ldr	r1, [pc, #296]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056e4:	d101      	bne.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80056e6:	2301      	movs	r3, #1
 80056e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80056f2:	2301      	movs	r3, #1
 80056f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005702:	2301      	movs	r3, #1
 8005704:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0320 	and.w	r3, r3, #32
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 808b 	beq.w	800582a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005714:	4b3a      	ldr	r3, [pc, #232]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	4a39      	ldr	r2, [pc, #228]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800571a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800571e:	6413      	str	r3, [r2, #64]	; 0x40
 8005720:	4b37      	ldr	r3, [pc, #220]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005728:	60bb      	str	r3, [r7, #8]
 800572a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800572c:	4b35      	ldr	r3, [pc, #212]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a34      	ldr	r2, [pc, #208]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005736:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005738:	f7fd fe36 	bl	80033a8 <HAL_GetTick>
 800573c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005740:	f7fd fe32 	bl	80033a8 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b64      	cmp	r3, #100	; 0x64
 800574c:	d901      	bls.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e38f      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005752:	4b2c      	ldr	r3, [pc, #176]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0f0      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800575e:	4b28      	ldr	r3, [pc, #160]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005766:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d035      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	429a      	cmp	r2, r3
 800577a:	d02e      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800577c:	4b20      	ldr	r3, [pc, #128]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800577e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005784:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005786:	4b1e      	ldr	r3, [pc, #120]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578a:	4a1d      	ldr	r2, [pc, #116]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800578c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005790:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005792:	4b1b      	ldr	r3, [pc, #108]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005796:	4a1a      	ldr	r2, [pc, #104]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800579c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800579e:	4a18      	ldr	r2, [pc, #96]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057a4:	4b16      	ldr	r3, [pc, #88]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d114      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b0:	f7fd fdfa 	bl	80033a8 <HAL_GetTick>
 80057b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057b6:	e00a      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057b8:	f7fd fdf6 	bl	80033a8 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d901      	bls.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e351      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ce:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0ee      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057e6:	d111      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80057e8:	4b05      	ldr	r3, [pc, #20]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80057f4:	4b04      	ldr	r3, [pc, #16]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057f6:	400b      	ands	r3, r1
 80057f8:	4901      	ldr	r1, [pc, #4]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	608b      	str	r3, [r1, #8]
 80057fe:	e00b      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005800:	40023800 	.word	0x40023800
 8005804:	40007000 	.word	0x40007000
 8005808:	0ffffcff 	.word	0x0ffffcff
 800580c:	4bac      	ldr	r3, [pc, #688]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	4aab      	ldr	r2, [pc, #684]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005812:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005816:	6093      	str	r3, [r2, #8]
 8005818:	4ba9      	ldr	r3, [pc, #676]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800581a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005824:	49a6      	ldr	r1, [pc, #664]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005826:	4313      	orrs	r3, r2
 8005828:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0310 	and.w	r3, r3, #16
 8005832:	2b00      	cmp	r3, #0
 8005834:	d010      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005836:	4ba2      	ldr	r3, [pc, #648]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800583c:	4aa0      	ldr	r2, [pc, #640]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800583e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005842:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005846:	4b9e      	ldr	r3, [pc, #632]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005848:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	499b      	ldr	r1, [pc, #620]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005864:	4b96      	ldr	r3, [pc, #600]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005872:	4993      	ldr	r1, [pc, #588]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005886:	4b8e      	ldr	r3, [pc, #568]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005894:	498a      	ldr	r1, [pc, #552]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005896:	4313      	orrs	r3, r2
 8005898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058a8:	4b85      	ldr	r3, [pc, #532]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058b6:	4982      	ldr	r1, [pc, #520]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058ca:	4b7d      	ldr	r3, [pc, #500]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d8:	4979      	ldr	r1, [pc, #484]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058ec:	4b74      	ldr	r3, [pc, #464]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f2:	f023 0203 	bic.w	r2, r3, #3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fa:	4971      	ldr	r1, [pc, #452]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800590e:	4b6c      	ldr	r3, [pc, #432]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005914:	f023 020c 	bic.w	r2, r3, #12
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800591c:	4968      	ldr	r1, [pc, #416]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800591e:	4313      	orrs	r3, r2
 8005920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005930:	4b63      	ldr	r3, [pc, #396]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005936:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800593e:	4960      	ldr	r1, [pc, #384]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005952:	4b5b      	ldr	r3, [pc, #364]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005958:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005960:	4957      	ldr	r1, [pc, #348]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005962:	4313      	orrs	r3, r2
 8005964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005974:	4b52      	ldr	r3, [pc, #328]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005982:	494f      	ldr	r1, [pc, #316]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005984:	4313      	orrs	r3, r2
 8005986:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005996:	4b4a      	ldr	r3, [pc, #296]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a4:	4946      	ldr	r1, [pc, #280]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80059b8:	4b41      	ldr	r3, [pc, #260]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c6:	493e      	ldr	r1, [pc, #248]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80059da:	4b39      	ldr	r3, [pc, #228]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e8:	4935      	ldr	r1, [pc, #212]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00a      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059fc:	4b30      	ldr	r3, [pc, #192]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a0a:	492d      	ldr	r1, [pc, #180]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d011      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005a1e:	4b28      	ldr	r3, [pc, #160]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a24:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a2c:	4924      	ldr	r1, [pc, #144]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a3c:	d101      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0308 	and.w	r3, r3, #8
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a5e:	4b18      	ldr	r3, [pc, #96]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a64:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a6c:	4914      	ldr	r1, [pc, #80]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00b      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a80:	4b0f      	ldr	r3, [pc, #60]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a86:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a90:	490b      	ldr	r1, [pc, #44]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00f      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005aa4:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aaa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab4:	4902      	ldr	r1, [pc, #8]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005abc:	e002      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005abe:	bf00      	nop
 8005ac0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00b      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ad0:	4b8a      	ldr	r3, [pc, #552]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ad6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae0:	4986      	ldr	r1, [pc, #536]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00b      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005af4:	4b81      	ldr	r3, [pc, #516]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005afa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b04:	497d      	ldr	r1, [pc, #500]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d006      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 80d6 	beq.w	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b20:	4b76      	ldr	r3, [pc, #472]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a75      	ldr	r2, [pc, #468]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b2c:	f7fd fc3c 	bl	80033a8 <HAL_GetTick>
 8005b30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b32:	e008      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b34:	f7fd fc38 	bl	80033a8 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b64      	cmp	r3, #100	; 0x64
 8005b40:	d901      	bls.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e195      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b46:	4b6d      	ldr	r3, [pc, #436]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1f0      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d021      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d11d      	bne.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b66:	4b65      	ldr	r3, [pc, #404]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b6c:	0c1b      	lsrs	r3, r3, #16
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b74:	4b61      	ldr	r3, [pc, #388]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b7a:	0e1b      	lsrs	r3, r3, #24
 8005b7c:	f003 030f 	and.w	r3, r3, #15
 8005b80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	019a      	lsls	r2, r3, #6
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	041b      	lsls	r3, r3, #16
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	061b      	lsls	r3, r3, #24
 8005b92:	431a      	orrs	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	071b      	lsls	r3, r3, #28
 8005b9a:	4958      	ldr	r1, [pc, #352]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d004      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bb6:	d00a      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d02e      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bcc:	d129      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005bce:	4b4b      	ldr	r3, [pc, #300]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bd4:	0c1b      	lsrs	r3, r3, #16
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005bdc:	4b47      	ldr	r3, [pc, #284]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005be2:	0f1b      	lsrs	r3, r3, #28
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	019a      	lsls	r2, r3, #6
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	041b      	lsls	r3, r3, #16
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	061b      	lsls	r3, r3, #24
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	071b      	lsls	r3, r3, #28
 8005c02:	493e      	ldr	r1, [pc, #248]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c0a:	4b3c      	ldr	r3, [pc, #240]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c10:	f023 021f 	bic.w	r2, r3, #31
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	4938      	ldr	r1, [pc, #224]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d01d      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c2e:	4b33      	ldr	r3, [pc, #204]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c34:	0e1b      	lsrs	r3, r3, #24
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c3c:	4b2f      	ldr	r3, [pc, #188]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c42:	0f1b      	lsrs	r3, r3, #28
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	019a      	lsls	r2, r3, #6
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	041b      	lsls	r3, r3, #16
 8005c56:	431a      	orrs	r2, r3
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	061b      	lsls	r3, r3, #24
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	071b      	lsls	r3, r3, #28
 8005c62:	4926      	ldr	r1, [pc, #152]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d011      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	019a      	lsls	r2, r3, #6
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	041b      	lsls	r3, r3, #16
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	061b      	lsls	r3, r3, #24
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	071b      	lsls	r3, r3, #28
 8005c92:	491a      	ldr	r1, [pc, #104]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c9a:	4b18      	ldr	r3, [pc, #96]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a17      	ldr	r2, [pc, #92]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ca0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca6:	f7fd fb7f 	bl	80033a8 <HAL_GetTick>
 8005caa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cac:	e008      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005cae:	f7fd fb7b 	bl	80033a8 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b64      	cmp	r3, #100	; 0x64
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e0d8      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cc0:	4b0e      	ldr	r3, [pc, #56]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0f0      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	f040 80ce 	bne.w	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005cd4:	4b09      	ldr	r3, [pc, #36]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a08      	ldr	r2, [pc, #32]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ce0:	f7fd fb62 	bl	80033a8 <HAL_GetTick>
 8005ce4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ce6:	e00b      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ce8:	f7fd fb5e 	bl	80033a8 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b64      	cmp	r3, #100	; 0x64
 8005cf4:	d904      	bls.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e0bb      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005cfa:	bf00      	nop
 8005cfc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d00:	4b5e      	ldr	r3, [pc, #376]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d0c:	d0ec      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d02e      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d12a      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d36:	4b51      	ldr	r3, [pc, #324]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3c:	0c1b      	lsrs	r3, r3, #16
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d44:	4b4d      	ldr	r3, [pc, #308]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4a:	0f1b      	lsrs	r3, r3, #28
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	019a      	lsls	r2, r3, #6
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	041b      	lsls	r3, r3, #16
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	061b      	lsls	r3, r3, #24
 8005d64:	431a      	orrs	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	071b      	lsls	r3, r3, #28
 8005d6a:	4944      	ldr	r1, [pc, #272]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d72:	4b42      	ldr	r3, [pc, #264]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d80:	3b01      	subs	r3, #1
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	493d      	ldr	r1, [pc, #244]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d022      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005da0:	d11d      	bne.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005da2:	4b36      	ldr	r3, [pc, #216]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da8:	0e1b      	lsrs	r3, r3, #24
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005db0:	4b32      	ldr	r3, [pc, #200]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db6:	0f1b      	lsrs	r3, r3, #28
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	019a      	lsls	r2, r3, #6
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	041b      	lsls	r3, r3, #16
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	061b      	lsls	r3, r3, #24
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	071b      	lsls	r3, r3, #28
 8005dd6:	4929      	ldr	r1, [pc, #164]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0308 	and.w	r3, r3, #8
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d028      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005dea:	4b24      	ldr	r3, [pc, #144]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df0:	0e1b      	lsrs	r3, r3, #24
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005df8:	4b20      	ldr	r3, [pc, #128]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfe:	0c1b      	lsrs	r3, r3, #16
 8005e00:	f003 0303 	and.w	r3, r3, #3
 8005e04:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	019a      	lsls	r2, r3, #6
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	041b      	lsls	r3, r3, #16
 8005e10:	431a      	orrs	r2, r3
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	061b      	lsls	r3, r3, #24
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	071b      	lsls	r3, r3, #28
 8005e1e:	4917      	ldr	r1, [pc, #92]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005e26:	4b15      	ldr	r3, [pc, #84]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e34:	4911      	ldr	r1, [pc, #68]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e3c:	4b0f      	ldr	r3, [pc, #60]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a0e      	ldr	r2, [pc, #56]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e48:	f7fd faae 	bl	80033a8 <HAL_GetTick>
 8005e4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e50:	f7fd faaa 	bl	80033a8 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b64      	cmp	r3, #100	; 0x64
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e007      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e62:	4b06      	ldr	r3, [pc, #24]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e6e:	d1ef      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3720      	adds	r7, #32
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40023800 	.word	0x40023800

08005e80 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e01c      	b.n	8005ecc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	795b      	ldrb	r3, [r3, #5]
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d105      	bne.n	8005ea8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fb fd24 	bl	80018f0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0204 	orr.w	r2, r2, #4
 8005ebc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e09d      	b.n	8006022 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d108      	bne.n	8005f00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ef6:	d009      	beq.n	8005f0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	61da      	str	r2, [r3, #28]
 8005efe:	e005      	b.n	8005f0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d106      	bne.n	8005f2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fb fd54 	bl	80019d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f4c:	d902      	bls.n	8005f54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	e002      	b.n	8005f5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005f62:	d007      	beq.n	8005f74 <HAL_SPI_Init+0xa0>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f6c:	d002      	beq.n	8005f74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f84:	431a      	orrs	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fac:	431a      	orrs	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb6:	ea42 0103 	orr.w	r1, r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	0c1b      	lsrs	r3, r3, #16
 8005fd0:	f003 0204 	and.w	r2, r3, #4
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	f003 0310 	and.w	r3, r3, #16
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe2:	f003 0308 	and.w	r3, r3, #8
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005ff0:	ea42 0103 	orr.w	r1, r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69da      	ldr	r2, [r3, #28]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006010:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b088      	sub	sp, #32
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	603b      	str	r3, [r7, #0]
 8006036:	4613      	mov	r3, r2
 8006038:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800603a:	2300      	movs	r3, #0
 800603c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006044:	2b01      	cmp	r3, #1
 8006046:	d101      	bne.n	800604c <HAL_SPI_Transmit+0x22>
 8006048:	2302      	movs	r3, #2
 800604a:	e158      	b.n	80062fe <HAL_SPI_Transmit+0x2d4>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006054:	f7fd f9a8 	bl	80033a8 <HAL_GetTick>
 8006058:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800605a:	88fb      	ldrh	r3, [r7, #6]
 800605c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b01      	cmp	r3, #1
 8006068:	d002      	beq.n	8006070 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800606a:	2302      	movs	r3, #2
 800606c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800606e:	e13d      	b.n	80062ec <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d002      	beq.n	800607c <HAL_SPI_Transmit+0x52>
 8006076:	88fb      	ldrh	r3, [r7, #6]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d102      	bne.n	8006082 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006080:	e134      	b.n	80062ec <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2203      	movs	r2, #3
 8006086:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	88fa      	ldrh	r2, [r7, #6]
 800609a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	88fa      	ldrh	r2, [r7, #6]
 80060a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060cc:	d10f      	bne.n	80060ee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f8:	2b40      	cmp	r3, #64	; 0x40
 80060fa:	d007      	beq.n	800610c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800610a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006114:	d94b      	bls.n	80061ae <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <HAL_SPI_Transmit+0xfa>
 800611e:	8afb      	ldrh	r3, [r7, #22]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d13e      	bne.n	80061a2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	881a      	ldrh	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006134:	1c9a      	adds	r2, r3, #2
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613e:	b29b      	uxth	r3, r3
 8006140:	3b01      	subs	r3, #1
 8006142:	b29a      	uxth	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006148:	e02b      	b.n	80061a2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b02      	cmp	r3, #2
 8006156:	d112      	bne.n	800617e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	881a      	ldrh	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	1c9a      	adds	r2, r3, #2
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006172:	b29b      	uxth	r3, r3
 8006174:	3b01      	subs	r3, #1
 8006176:	b29a      	uxth	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800617c:	e011      	b.n	80061a2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800617e:	f7fd f913 	bl	80033a8 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	429a      	cmp	r2, r3
 800618c:	d803      	bhi.n	8006196 <HAL_SPI_Transmit+0x16c>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006194:	d102      	bne.n	800619c <HAL_SPI_Transmit+0x172>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d102      	bne.n	80061a2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061a0:	e0a4      	b.n	80062ec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1ce      	bne.n	800614a <HAL_SPI_Transmit+0x120>
 80061ac:	e07c      	b.n	80062a8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <HAL_SPI_Transmit+0x192>
 80061b6:	8afb      	ldrh	r3, [r7, #22]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d170      	bne.n	800629e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d912      	bls.n	80061ec <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ca:	881a      	ldrh	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	1c9a      	adds	r2, r3, #2
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b02      	subs	r3, #2
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061ea:	e058      	b.n	800629e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	330c      	adds	r3, #12
 80061f6:	7812      	ldrb	r2, [r2, #0]
 80061f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006208:	b29b      	uxth	r3, r3
 800620a:	3b01      	subs	r3, #1
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006212:	e044      	b.n	800629e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b02      	cmp	r3, #2
 8006220:	d12b      	bne.n	800627a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006226:	b29b      	uxth	r3, r3
 8006228:	2b01      	cmp	r3, #1
 800622a:	d912      	bls.n	8006252 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	881a      	ldrh	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	1c9a      	adds	r2, r3, #2
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006246:	b29b      	uxth	r3, r3
 8006248:	3b02      	subs	r3, #2
 800624a:	b29a      	uxth	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006250:	e025      	b.n	800629e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	330c      	adds	r3, #12
 800625c:	7812      	ldrb	r2, [r2, #0]
 800625e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006264:	1c5a      	adds	r2, r3, #1
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800626e:	b29b      	uxth	r3, r3
 8006270:	3b01      	subs	r3, #1
 8006272:	b29a      	uxth	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006278:	e011      	b.n	800629e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800627a:	f7fd f895 	bl	80033a8 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	d803      	bhi.n	8006292 <HAL_SPI_Transmit+0x268>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006290:	d102      	bne.n	8006298 <HAL_SPI_Transmit+0x26e>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d102      	bne.n	800629e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800629c:	e026      	b.n	80062ec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1b5      	bne.n	8006214 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 f949 	bl	8006544 <SPI_EndRxTxTransaction>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2220      	movs	r2, #32
 80062bc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10a      	bne.n	80062dc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062c6:	2300      	movs	r3, #0
 80062c8:	613b      	str	r3, [r7, #16]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	613b      	str	r3, [r7, #16]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	613b      	str	r3, [r7, #16]
 80062da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	77fb      	strb	r3, [r7, #31]
 80062e8:	e000      	b.n	80062ec <HAL_SPI_Transmit+0x2c2>
  }

error:
 80062ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80062fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3720      	adds	r7, #32
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b088      	sub	sp, #32
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	603b      	str	r3, [r7, #0]
 8006314:	4613      	mov	r3, r2
 8006316:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006318:	f7fd f846 	bl	80033a8 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006320:	1a9b      	subs	r3, r3, r2
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	4413      	add	r3, r2
 8006326:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006328:	f7fd f83e 	bl	80033a8 <HAL_GetTick>
 800632c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800632e:	4b39      	ldr	r3, [pc, #228]	; (8006414 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	015b      	lsls	r3, r3, #5
 8006334:	0d1b      	lsrs	r3, r3, #20
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	fb02 f303 	mul.w	r3, r2, r3
 800633c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800633e:	e054      	b.n	80063ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006346:	d050      	beq.n	80063ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006348:	f7fd f82e 	bl	80033a8 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	69fa      	ldr	r2, [r7, #28]
 8006354:	429a      	cmp	r2, r3
 8006356:	d902      	bls.n	800635e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d13d      	bne.n	80063da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800636c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006376:	d111      	bne.n	800639c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006380:	d004      	beq.n	800638c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800638a:	d107      	bne.n	800639c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800639a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a4:	d10f      	bne.n	80063c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e017      	b.n	800640a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	4013      	ands	r3, r2
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	bf0c      	ite	eq
 80063fa:	2301      	moveq	r3, #1
 80063fc:	2300      	movne	r3, #0
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	461a      	mov	r2, r3
 8006402:	79fb      	ldrb	r3, [r7, #7]
 8006404:	429a      	cmp	r2, r3
 8006406:	d19b      	bne.n	8006340 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3720      	adds	r7, #32
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	20000000 	.word	0x20000000

08006418 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08a      	sub	sp, #40	; 0x28
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
 8006424:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006426:	2300      	movs	r3, #0
 8006428:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800642a:	f7fc ffbd 	bl	80033a8 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	1a9b      	subs	r3, r3, r2
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	4413      	add	r3, r2
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800643a:	f7fc ffb5 	bl	80033a8 <HAL_GetTick>
 800643e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	330c      	adds	r3, #12
 8006446:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006448:	4b3d      	ldr	r3, [pc, #244]	; (8006540 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	4613      	mov	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	00da      	lsls	r2, r3, #3
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	0d1b      	lsrs	r3, r3, #20
 8006458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800645a:	fb02 f303 	mul.w	r3, r2, r3
 800645e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006460:	e060      	b.n	8006524 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006468:	d107      	bne.n	800647a <SPI_WaitFifoStateUntilTimeout+0x62>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d104      	bne.n	800647a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	b2db      	uxtb	r3, r3
 8006476:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006478:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006480:	d050      	beq.n	8006524 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006482:	f7fc ff91 	bl	80033a8 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	6a3b      	ldr	r3, [r7, #32]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648e:	429a      	cmp	r2, r3
 8006490:	d902      	bls.n	8006498 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	2b00      	cmp	r3, #0
 8006496:	d13d      	bne.n	8006514 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064b0:	d111      	bne.n	80064d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064ba:	d004      	beq.n	80064c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c4:	d107      	bne.n	80064d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064de:	d10f      	bne.n	8006500 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e010      	b.n	8006536 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	3b01      	subs	r3, #1
 8006522:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689a      	ldr	r2, [r3, #8]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	4013      	ands	r3, r2
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	429a      	cmp	r2, r3
 8006532:	d196      	bne.n	8006462 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3728      	adds	r7, #40	; 0x28
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	20000000 	.word	0x20000000

08006544 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af02      	add	r7, sp, #8
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2200      	movs	r2, #0
 8006558:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f7ff ff5b 	bl	8006418 <SPI_WaitFifoStateUntilTimeout>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d007      	beq.n	8006578 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800656c:	f043 0220 	orr.w	r2, r3, #32
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e046      	b.n	8006606 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006578:	4b25      	ldr	r3, [pc, #148]	; (8006610 <SPI_EndRxTxTransaction+0xcc>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a25      	ldr	r2, [pc, #148]	; (8006614 <SPI_EndRxTxTransaction+0xd0>)
 800657e:	fba2 2303 	umull	r2, r3, r2, r3
 8006582:	0d5b      	lsrs	r3, r3, #21
 8006584:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006588:	fb02 f303 	mul.w	r3, r2, r3
 800658c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006596:	d112      	bne.n	80065be <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2200      	movs	r2, #0
 80065a0:	2180      	movs	r1, #128	; 0x80
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f7ff feb0 	bl	8006308 <SPI_WaitFlagStateUntilTimeout>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d016      	beq.n	80065dc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b2:	f043 0220 	orr.w	r2, r3, #32
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e023      	b.n	8006606 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d4:	2b80      	cmp	r3, #128	; 0x80
 80065d6:	d0f2      	beq.n	80065be <SPI_EndRxTxTransaction+0x7a>
 80065d8:	e000      	b.n	80065dc <SPI_EndRxTxTransaction+0x98>
        break;
 80065da:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f7ff ff15 	bl	8006418 <SPI_WaitFifoStateUntilTimeout>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d007      	beq.n	8006604 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f8:	f043 0220 	orr.w	r2, r3, #32
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e000      	b.n	8006606 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20000000 	.word	0x20000000
 8006614:	165e9f81 	.word	0x165e9f81

08006618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e049      	b.n	80066be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7fb fcf4 	bl	800202c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3304      	adds	r3, #4
 8006654:	4619      	mov	r1, r3
 8006656:	4610      	mov	r0, r2
 8006658:	f001 f812 	bl	8007680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
	...

080066c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d001      	beq.n	80066e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e054      	b.n	800678a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f042 0201 	orr.w	r2, r2, #1
 80066f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a26      	ldr	r2, [pc, #152]	; (8006798 <HAL_TIM_Base_Start_IT+0xd0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d022      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800670a:	d01d      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a22      	ldr	r2, [pc, #136]	; (800679c <HAL_TIM_Base_Start_IT+0xd4>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d018      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a21      	ldr	r2, [pc, #132]	; (80067a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d013      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a1f      	ldr	r2, [pc, #124]	; (80067a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d00e      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a1e      	ldr	r2, [pc, #120]	; (80067a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d009      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a1c      	ldr	r2, [pc, #112]	; (80067ac <HAL_TIM_Base_Start_IT+0xe4>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d004      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a1b      	ldr	r2, [pc, #108]	; (80067b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d115      	bne.n	8006774 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	4b19      	ldr	r3, [pc, #100]	; (80067b4 <HAL_TIM_Base_Start_IT+0xec>)
 8006750:	4013      	ands	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b06      	cmp	r3, #6
 8006758:	d015      	beq.n	8006786 <HAL_TIM_Base_Start_IT+0xbe>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006760:	d011      	beq.n	8006786 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f042 0201 	orr.w	r2, r2, #1
 8006770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006772:	e008      	b.n	8006786 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0201 	orr.w	r2, r2, #1
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	e000      	b.n	8006788 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006786:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	40010000 	.word	0x40010000
 800679c:	40000400 	.word	0x40000400
 80067a0:	40000800 	.word	0x40000800
 80067a4:	40000c00 	.word	0x40000c00
 80067a8:	40010400 	.word	0x40010400
 80067ac:	40014000 	.word	0x40014000
 80067b0:	40001800 	.word	0x40001800
 80067b4:	00010007 	.word	0x00010007

080067b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e049      	b.n	800685e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d106      	bne.n	80067e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f841 	bl	8006866 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3304      	adds	r3, #4
 80067f4:	4619      	mov	r1, r3
 80067f6:	4610      	mov	r0, r2
 80067f8:	f000 ff42 	bl	8007680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800686e:	bf00      	nop
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
	...

0800687c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d109      	bne.n	80068a8 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b02      	cmp	r3, #2
 800689e:	bf0c      	ite	eq
 80068a0:	2301      	moveq	r3, #1
 80068a2:	2300      	movne	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	e03c      	b.n	8006922 <HAL_TIM_PWM_Start_DMA+0xa6>
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d109      	bne.n	80068c2 <HAL_TIM_PWM_Start_DMA+0x46>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	bf0c      	ite	eq
 80068ba:	2301      	moveq	r3, #1
 80068bc:	2300      	movne	r3, #0
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	e02f      	b.n	8006922 <HAL_TIM_PWM_Start_DMA+0xa6>
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d109      	bne.n	80068dc <HAL_TIM_PWM_Start_DMA+0x60>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	bf0c      	ite	eq
 80068d4:	2301      	moveq	r3, #1
 80068d6:	2300      	movne	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	e022      	b.n	8006922 <HAL_TIM_PWM_Start_DMA+0xa6>
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2b0c      	cmp	r3, #12
 80068e0:	d109      	bne.n	80068f6 <HAL_TIM_PWM_Start_DMA+0x7a>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	bf0c      	ite	eq
 80068ee:	2301      	moveq	r3, #1
 80068f0:	2300      	movne	r3, #0
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	e015      	b.n	8006922 <HAL_TIM_PWM_Start_DMA+0xa6>
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2b10      	cmp	r3, #16
 80068fa:	d109      	bne.n	8006910 <HAL_TIM_PWM_Start_DMA+0x94>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	bf0c      	ite	eq
 8006908:	2301      	moveq	r3, #1
 800690a:	2300      	movne	r3, #0
 800690c:	b2db      	uxtb	r3, r3
 800690e:	e008      	b.n	8006922 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b02      	cmp	r3, #2
 800691a:	bf0c      	ite	eq
 800691c:	2301      	moveq	r3, #1
 800691e:	2300      	movne	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8006926:	2302      	movs	r3, #2
 8006928:	e1a1      	b.n	8006c6e <HAL_TIM_PWM_Start_DMA+0x3f2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d109      	bne.n	8006944 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b01      	cmp	r3, #1
 800693a:	bf0c      	ite	eq
 800693c:	2301      	moveq	r3, #1
 800693e:	2300      	movne	r3, #0
 8006940:	b2db      	uxtb	r3, r3
 8006942:	e03c      	b.n	80069be <HAL_TIM_PWM_Start_DMA+0x142>
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2b04      	cmp	r3, #4
 8006948:	d109      	bne.n	800695e <HAL_TIM_PWM_Start_DMA+0xe2>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b01      	cmp	r3, #1
 8006954:	bf0c      	ite	eq
 8006956:	2301      	moveq	r3, #1
 8006958:	2300      	movne	r3, #0
 800695a:	b2db      	uxtb	r3, r3
 800695c:	e02f      	b.n	80069be <HAL_TIM_PWM_Start_DMA+0x142>
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b08      	cmp	r3, #8
 8006962:	d109      	bne.n	8006978 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b01      	cmp	r3, #1
 800696e:	bf0c      	ite	eq
 8006970:	2301      	moveq	r3, #1
 8006972:	2300      	movne	r3, #0
 8006974:	b2db      	uxtb	r3, r3
 8006976:	e022      	b.n	80069be <HAL_TIM_PWM_Start_DMA+0x142>
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	2b0c      	cmp	r3, #12
 800697c:	d109      	bne.n	8006992 <HAL_TIM_PWM_Start_DMA+0x116>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b01      	cmp	r3, #1
 8006988:	bf0c      	ite	eq
 800698a:	2301      	moveq	r3, #1
 800698c:	2300      	movne	r3, #0
 800698e:	b2db      	uxtb	r3, r3
 8006990:	e015      	b.n	80069be <HAL_TIM_PWM_Start_DMA+0x142>
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2b10      	cmp	r3, #16
 8006996:	d109      	bne.n	80069ac <HAL_TIM_PWM_Start_DMA+0x130>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	bf0c      	ite	eq
 80069a4:	2301      	moveq	r3, #1
 80069a6:	2300      	movne	r3, #0
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	e008      	b.n	80069be <HAL_TIM_PWM_Start_DMA+0x142>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	bf0c      	ite	eq
 80069b8:	2301      	moveq	r3, #1
 80069ba:	2300      	movne	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d034      	beq.n	8006a2c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <HAL_TIM_PWM_Start_DMA+0x152>
 80069c8:	887b      	ldrh	r3, [r7, #2]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e14d      	b.n	8006c6e <HAL_TIM_PWM_Start_DMA+0x3f2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d104      	bne.n	80069e2 <HAL_TIM_PWM_Start_DMA+0x166>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2202      	movs	r2, #2
 80069dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069e0:	e026      	b.n	8006a30 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	d104      	bne.n	80069f2 <HAL_TIM_PWM_Start_DMA+0x176>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069f0:	e01e      	b.n	8006a30 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	d104      	bne.n	8006a02 <HAL_TIM_PWM_Start_DMA+0x186>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a00:	e016      	b.n	8006a30 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b0c      	cmp	r3, #12
 8006a06:	d104      	bne.n	8006a12 <HAL_TIM_PWM_Start_DMA+0x196>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a10:	e00e      	b.n	8006a30 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b10      	cmp	r3, #16
 8006a16:	d104      	bne.n	8006a22 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a20:	e006      	b.n	8006a30 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2202      	movs	r2, #2
 8006a26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a2a:	e001      	b.n	8006a30 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e11e      	b.n	8006c6e <HAL_TIM_PWM_Start_DMA+0x3f2>
  }

  switch (Channel)
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2b0c      	cmp	r3, #12
 8006a34:	f200 80ae 	bhi.w	8006b94 <HAL_TIM_PWM_Start_DMA+0x318>
 8006a38:	a201      	add	r2, pc, #4	; (adr r2, 8006a40 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8006a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3e:	bf00      	nop
 8006a40:	08006a75 	.word	0x08006a75
 8006a44:	08006b95 	.word	0x08006b95
 8006a48:	08006b95 	.word	0x08006b95
 8006a4c:	08006b95 	.word	0x08006b95
 8006a50:	08006abd 	.word	0x08006abd
 8006a54:	08006b95 	.word	0x08006b95
 8006a58:	08006b95 	.word	0x08006b95
 8006a5c:	08006b95 	.word	0x08006b95
 8006a60:	08006b05 	.word	0x08006b05
 8006a64:	08006b95 	.word	0x08006b95
 8006a68:	08006b95 	.word	0x08006b95
 8006a6c:	08006b95 	.word	0x08006b95
 8006a70:	08006b4d 	.word	0x08006b4d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	4a7f      	ldr	r2, [pc, #508]	; (8006c78 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8006a7a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	4a7e      	ldr	r2, [pc, #504]	; (8006c7c <HAL_TIM_PWM_Start_DMA+0x400>)
 8006a82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	4a7d      	ldr	r2, [pc, #500]	; (8006c80 <HAL_TIM_PWM_Start_DMA+0x404>)
 8006a8a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006a90:	6879      	ldr	r1, [r7, #4]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3334      	adds	r3, #52	; 0x34
 8006a98:	461a      	mov	r2, r3
 8006a9a:	887b      	ldrh	r3, [r7, #2]
 8006a9c:	f7fd faa2 	bl	8003fe4 <HAL_DMA_Start_IT>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e0e1      	b.n	8006c6e <HAL_TIM_PWM_Start_DMA+0x3f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68da      	ldr	r2, [r3, #12]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ab8:	60da      	str	r2, [r3, #12]
      break;
 8006aba:	e06e      	b.n	8006b9a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac0:	4a6d      	ldr	r2, [pc, #436]	; (8006c78 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8006ac2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac8:	4a6c      	ldr	r2, [pc, #432]	; (8006c7c <HAL_TIM_PWM_Start_DMA+0x400>)
 8006aca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad0:	4a6b      	ldr	r2, [pc, #428]	; (8006c80 <HAL_TIM_PWM_Start_DMA+0x404>)
 8006ad2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3338      	adds	r3, #56	; 0x38
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	887b      	ldrh	r3, [r7, #2]
 8006ae4:	f7fd fa7e 	bl	8003fe4 <HAL_DMA_Start_IT>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e0bd      	b.n	8006c6e <HAL_TIM_PWM_Start_DMA+0x3f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b00:	60da      	str	r2, [r3, #12]
      break;
 8006b02:	e04a      	b.n	8006b9a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	4a5b      	ldr	r2, [pc, #364]	; (8006c78 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8006b0a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b10:	4a5a      	ldr	r2, [pc, #360]	; (8006c7c <HAL_TIM_PWM_Start_DMA+0x400>)
 8006b12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	4a59      	ldr	r2, [pc, #356]	; (8006c80 <HAL_TIM_PWM_Start_DMA+0x404>)
 8006b1a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006b20:	6879      	ldr	r1, [r7, #4]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	333c      	adds	r3, #60	; 0x3c
 8006b28:	461a      	mov	r2, r3
 8006b2a:	887b      	ldrh	r3, [r7, #2]
 8006b2c:	f7fd fa5a 	bl	8003fe4 <HAL_DMA_Start_IT>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e099      	b.n	8006c6e <HAL_TIM_PWM_Start_DMA+0x3f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68da      	ldr	r2, [r3, #12]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b48:	60da      	str	r2, [r3, #12]
      break;
 8006b4a:	e026      	b.n	8006b9a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b50:	4a49      	ldr	r2, [pc, #292]	; (8006c78 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8006b52:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b58:	4a48      	ldr	r2, [pc, #288]	; (8006c7c <HAL_TIM_PWM_Start_DMA+0x400>)
 8006b5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b60:	4a47      	ldr	r2, [pc, #284]	; (8006c80 <HAL_TIM_PWM_Start_DMA+0x404>)
 8006b62:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b68:	6879      	ldr	r1, [r7, #4]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3340      	adds	r3, #64	; 0x40
 8006b70:	461a      	mov	r2, r3
 8006b72:	887b      	ldrh	r3, [r7, #2]
 8006b74:	f7fd fa36 	bl	8003fe4 <HAL_DMA_Start_IT>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e075      	b.n	8006c6e <HAL_TIM_PWM_Start_DMA+0x3f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68da      	ldr	r2, [r3, #12]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b90:	60da      	str	r2, [r3, #12]
      break;
 8006b92:	e002      	b.n	8006b9a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	75fb      	strb	r3, [r7, #23]
      break;
 8006b98:	bf00      	nop
  }

  if (status == HAL_OK)
 8006b9a:	7dfb      	ldrb	r3, [r7, #23]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d165      	bne.n	8006c6c <HAL_TIM_PWM_Start_DMA+0x3f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	68b9      	ldr	r1, [r7, #8]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 f901 	bl	8007db0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a34      	ldr	r2, [pc, #208]	; (8006c84 <HAL_TIM_PWM_Start_DMA+0x408>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d004      	beq.n	8006bc2 <HAL_TIM_PWM_Start_DMA+0x346>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a32      	ldr	r2, [pc, #200]	; (8006c88 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d101      	bne.n	8006bc6 <HAL_TIM_PWM_Start_DMA+0x34a>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e000      	b.n	8006bc8 <HAL_TIM_PWM_Start_DMA+0x34c>
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d007      	beq.n	8006bdc <HAL_TIM_PWM_Start_DMA+0x360>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bda:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a28      	ldr	r2, [pc, #160]	; (8006c84 <HAL_TIM_PWM_Start_DMA+0x408>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d022      	beq.n	8006c2c <HAL_TIM_PWM_Start_DMA+0x3b0>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bee:	d01d      	beq.n	8006c2c <HAL_TIM_PWM_Start_DMA+0x3b0>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a25      	ldr	r2, [pc, #148]	; (8006c8c <HAL_TIM_PWM_Start_DMA+0x410>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d018      	beq.n	8006c2c <HAL_TIM_PWM_Start_DMA+0x3b0>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a24      	ldr	r2, [pc, #144]	; (8006c90 <HAL_TIM_PWM_Start_DMA+0x414>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d013      	beq.n	8006c2c <HAL_TIM_PWM_Start_DMA+0x3b0>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a22      	ldr	r2, [pc, #136]	; (8006c94 <HAL_TIM_PWM_Start_DMA+0x418>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00e      	beq.n	8006c2c <HAL_TIM_PWM_Start_DMA+0x3b0>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a1d      	ldr	r2, [pc, #116]	; (8006c88 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d009      	beq.n	8006c2c <HAL_TIM_PWM_Start_DMA+0x3b0>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a1e      	ldr	r2, [pc, #120]	; (8006c98 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d004      	beq.n	8006c2c <HAL_TIM_PWM_Start_DMA+0x3b0>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a1d      	ldr	r2, [pc, #116]	; (8006c9c <HAL_TIM_PWM_Start_DMA+0x420>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d115      	bne.n	8006c58 <HAL_TIM_PWM_Start_DMA+0x3dc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689a      	ldr	r2, [r3, #8]
 8006c32:	4b1b      	ldr	r3, [pc, #108]	; (8006ca0 <HAL_TIM_PWM_Start_DMA+0x424>)
 8006c34:	4013      	ands	r3, r2
 8006c36:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	2b06      	cmp	r3, #6
 8006c3c:	d015      	beq.n	8006c6a <HAL_TIM_PWM_Start_DMA+0x3ee>
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c44:	d011      	beq.n	8006c6a <HAL_TIM_PWM_Start_DMA+0x3ee>
      {
        __HAL_TIM_ENABLE(htim);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f042 0201 	orr.w	r2, r2, #1
 8006c54:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c56:	e008      	b.n	8006c6a <HAL_TIM_PWM_Start_DMA+0x3ee>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 0201 	orr.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	e000      	b.n	8006c6c <HAL_TIM_PWM_Start_DMA+0x3f0>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c6a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	0800756f 	.word	0x0800756f
 8006c7c:	08007617 	.word	0x08007617
 8006c80:	080074dd 	.word	0x080074dd
 8006c84:	40010000 	.word	0x40010000
 8006c88:	40010400 	.word	0x40010400
 8006c8c:	40000400 	.word	0x40000400
 8006c90:	40000800 	.word	0x40000800
 8006c94:	40000c00 	.word	0x40000c00
 8006c98:	40014000 	.word	0x40014000
 8006c9c:	40001800 	.word	0x40001800
 8006ca0:	00010007 	.word	0x00010007

08006ca4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b0c      	cmp	r3, #12
 8006cb6:	d855      	bhi.n	8006d64 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006cb8:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbe:	bf00      	nop
 8006cc0:	08006cf5 	.word	0x08006cf5
 8006cc4:	08006d65 	.word	0x08006d65
 8006cc8:	08006d65 	.word	0x08006d65
 8006ccc:	08006d65 	.word	0x08006d65
 8006cd0:	08006d11 	.word	0x08006d11
 8006cd4:	08006d65 	.word	0x08006d65
 8006cd8:	08006d65 	.word	0x08006d65
 8006cdc:	08006d65 	.word	0x08006d65
 8006ce0:	08006d2d 	.word	0x08006d2d
 8006ce4:	08006d65 	.word	0x08006d65
 8006ce8:	08006d65 	.word	0x08006d65
 8006cec:	08006d65 	.word	0x08006d65
 8006cf0:	08006d49 	.word	0x08006d49
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006d02:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fd f9cb 	bl	80040a4 <HAL_DMA_Abort_IT>
      break;
 8006d0e:	e02c      	b.n	8006d6a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68da      	ldr	r2, [r3, #12]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d1e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fd f9bd 	bl	80040a4 <HAL_DMA_Abort_IT>
      break;
 8006d2a:	e01e      	b.n	8006d6a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68da      	ldr	r2, [r3, #12]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d3a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fd f9af 	bl	80040a4 <HAL_DMA_Abort_IT>
      break;
 8006d46:	e010      	b.n	8006d6a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68da      	ldr	r2, [r3, #12]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d56:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fd f9a1 	bl	80040a4 <HAL_DMA_Abort_IT>
      break;
 8006d62:	e002      	b.n	8006d6a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	73fb      	strb	r3, [r7, #15]
      break;
 8006d68:	bf00      	nop
  }

  if (status == HAL_OK)
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d171      	bne.n	8006e54 <HAL_TIM_PWM_Stop_DMA+0x1b0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2200      	movs	r2, #0
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f001 f819 	bl	8007db0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a37      	ldr	r2, [pc, #220]	; (8006e60 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d004      	beq.n	8006d92 <HAL_TIM_PWM_Stop_DMA+0xee>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a35      	ldr	r2, [pc, #212]	; (8006e64 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d101      	bne.n	8006d96 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e000      	b.n	8006d98 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8006d96:	2300      	movs	r3, #0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d017      	beq.n	8006dcc <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6a1a      	ldr	r2, [r3, #32]
 8006da2:	f241 1311 	movw	r3, #4369	; 0x1111
 8006da6:	4013      	ands	r3, r2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10f      	bne.n	8006dcc <HAL_TIM_PWM_Stop_DMA+0x128>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6a1a      	ldr	r2, [r3, #32]
 8006db2:	f240 4344 	movw	r3, #1092	; 0x444
 8006db6:	4013      	ands	r3, r2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d107      	bne.n	8006dcc <HAL_TIM_PWM_Stop_DMA+0x128>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006dca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6a1a      	ldr	r2, [r3, #32]
 8006dd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10f      	bne.n	8006dfc <HAL_TIM_PWM_Stop_DMA+0x158>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6a1a      	ldr	r2, [r3, #32]
 8006de2:	f240 4344 	movw	r3, #1092	; 0x444
 8006de6:	4013      	ands	r3, r2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d107      	bne.n	8006dfc <HAL_TIM_PWM_Stop_DMA+0x158>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0201 	bic.w	r2, r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d104      	bne.n	8006e0c <HAL_TIM_PWM_Stop_DMA+0x168>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e0a:	e023      	b.n	8006e54 <HAL_TIM_PWM_Stop_DMA+0x1b0>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2b04      	cmp	r3, #4
 8006e10:	d104      	bne.n	8006e1c <HAL_TIM_PWM_Stop_DMA+0x178>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e1a:	e01b      	b.n	8006e54 <HAL_TIM_PWM_Stop_DMA+0x1b0>
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	2b08      	cmp	r3, #8
 8006e20:	d104      	bne.n	8006e2c <HAL_TIM_PWM_Stop_DMA+0x188>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e2a:	e013      	b.n	8006e54 <HAL_TIM_PWM_Stop_DMA+0x1b0>
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	2b0c      	cmp	r3, #12
 8006e30:	d104      	bne.n	8006e3c <HAL_TIM_PWM_Stop_DMA+0x198>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e3a:	e00b      	b.n	8006e54 <HAL_TIM_PWM_Stop_DMA+0x1b0>
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	2b10      	cmp	r3, #16
 8006e40:	d104      	bne.n	8006e4c <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e4a:	e003      	b.n	8006e54 <HAL_TIM_PWM_Stop_DMA+0x1b0>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	40010000 	.word	0x40010000
 8006e64:	40010400 	.word	0x40010400

08006e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d122      	bne.n	8006ec4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d11b      	bne.n	8006ec4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f06f 0202 	mvn.w	r2, #2
 8006e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 faee 	bl	800748c <HAL_TIM_IC_CaptureCallback>
 8006eb0:	e005      	b.n	8006ebe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fae0 	bl	8007478 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7fa f837 	bl	8000f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d122      	bne.n	8006f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f003 0304 	and.w	r3, r3, #4
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	d11b      	bne.n	8006f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f06f 0204 	mvn.w	r2, #4
 8006ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2202      	movs	r2, #2
 8006eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fac4 	bl	800748c <HAL_TIM_IC_CaptureCallback>
 8006f04:	e005      	b.n	8006f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fab6 	bl	8007478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7fa f80d 	bl	8000f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0308 	and.w	r3, r3, #8
 8006f22:	2b08      	cmp	r3, #8
 8006f24:	d122      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f003 0308 	and.w	r3, r3, #8
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d11b      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f06f 0208 	mvn.w	r2, #8
 8006f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2204      	movs	r2, #4
 8006f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	f003 0303 	and.w	r3, r3, #3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fa9a 	bl	800748c <HAL_TIM_IC_CaptureCallback>
 8006f58:	e005      	b.n	8006f66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fa8c 	bl	8007478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7f9 ffe3 	bl	8000f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f003 0310 	and.w	r3, r3, #16
 8006f76:	2b10      	cmp	r3, #16
 8006f78:	d122      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f003 0310 	and.w	r3, r3, #16
 8006f84:	2b10      	cmp	r3, #16
 8006f86:	d11b      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f06f 0210 	mvn.w	r2, #16
 8006f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2208      	movs	r2, #8
 8006f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fa70 	bl	800748c <HAL_TIM_IC_CaptureCallback>
 8006fac:	e005      	b.n	8006fba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fa62 	bl	8007478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7f9 ffb9 	bl	8000f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d10e      	bne.n	8006fec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d107      	bne.n	8006fec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f06f 0201 	mvn.w	r2, #1
 8006fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fa3c 	bl	8007464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff6:	2b80      	cmp	r3, #128	; 0x80
 8006ff8:	d10e      	bne.n	8007018 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007004:	2b80      	cmp	r3, #128	; 0x80
 8007006:	d107      	bne.n	8007018 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 f808 	bl	8008028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007026:	d10e      	bne.n	8007046 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007032:	2b80      	cmp	r3, #128	; 0x80
 8007034:	d107      	bne.n	8007046 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800703e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fffb 	bl	800803c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007050:	2b40      	cmp	r3, #64	; 0x40
 8007052:	d10e      	bne.n	8007072 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705e:	2b40      	cmp	r3, #64	; 0x40
 8007060:	d107      	bne.n	8007072 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800706a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fa21 	bl	80074b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	f003 0320 	and.w	r3, r3, #32
 800707c:	2b20      	cmp	r3, #32
 800707e:	d10e      	bne.n	800709e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b20      	cmp	r3, #32
 800708c:	d107      	bne.n	800709e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f06f 0220 	mvn.w	r2, #32
 8007096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 ffbb 	bl	8008014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d101      	bne.n	80070c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070c2:	2302      	movs	r3, #2
 80070c4:	e0ff      	b.n	80072c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b14      	cmp	r3, #20
 80070d2:	f200 80f0 	bhi.w	80072b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80070d6:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070dc:	08007131 	.word	0x08007131
 80070e0:	080072b7 	.word	0x080072b7
 80070e4:	080072b7 	.word	0x080072b7
 80070e8:	080072b7 	.word	0x080072b7
 80070ec:	08007171 	.word	0x08007171
 80070f0:	080072b7 	.word	0x080072b7
 80070f4:	080072b7 	.word	0x080072b7
 80070f8:	080072b7 	.word	0x080072b7
 80070fc:	080071b3 	.word	0x080071b3
 8007100:	080072b7 	.word	0x080072b7
 8007104:	080072b7 	.word	0x080072b7
 8007108:	080072b7 	.word	0x080072b7
 800710c:	080071f3 	.word	0x080071f3
 8007110:	080072b7 	.word	0x080072b7
 8007114:	080072b7 	.word	0x080072b7
 8007118:	080072b7 	.word	0x080072b7
 800711c:	08007235 	.word	0x08007235
 8007120:	080072b7 	.word	0x080072b7
 8007124:	080072b7 	.word	0x080072b7
 8007128:	080072b7 	.word	0x080072b7
 800712c:	08007275 	.word	0x08007275
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68b9      	ldr	r1, [r7, #8]
 8007136:	4618      	mov	r0, r3
 8007138:	f000 fb42 	bl	80077c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699a      	ldr	r2, [r3, #24]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f042 0208 	orr.w	r2, r2, #8
 800714a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	699a      	ldr	r2, [r3, #24]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0204 	bic.w	r2, r2, #4
 800715a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6999      	ldr	r1, [r3, #24]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	691a      	ldr	r2, [r3, #16]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	619a      	str	r2, [r3, #24]
      break;
 800716e:	e0a5      	b.n	80072bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68b9      	ldr	r1, [r7, #8]
 8007176:	4618      	mov	r0, r3
 8007178:	f000 fb94 	bl	80078a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800718a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	699a      	ldr	r2, [r3, #24]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800719a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6999      	ldr	r1, [r3, #24]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	021a      	lsls	r2, r3, #8
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	430a      	orrs	r2, r1
 80071ae:	619a      	str	r2, [r3, #24]
      break;
 80071b0:	e084      	b.n	80072bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68b9      	ldr	r1, [r7, #8]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 fbeb 	bl	8007994 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69da      	ldr	r2, [r3, #28]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f042 0208 	orr.w	r2, r2, #8
 80071cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	69da      	ldr	r2, [r3, #28]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0204 	bic.w	r2, r2, #4
 80071dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69d9      	ldr	r1, [r3, #28]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	61da      	str	r2, [r3, #28]
      break;
 80071f0:	e064      	b.n	80072bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68b9      	ldr	r1, [r7, #8]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 fc41 	bl	8007a80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69da      	ldr	r2, [r3, #28]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800720c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69da      	ldr	r2, [r3, #28]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800721c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69d9      	ldr	r1, [r3, #28]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	021a      	lsls	r2, r3, #8
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	61da      	str	r2, [r3, #28]
      break;
 8007232:	e043      	b.n	80072bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68b9      	ldr	r1, [r7, #8]
 800723a:	4618      	mov	r0, r3
 800723c:	f000 fc78 	bl	8007b30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0208 	orr.w	r2, r2, #8
 800724e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 0204 	bic.w	r2, r2, #4
 800725e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	691a      	ldr	r2, [r3, #16]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007272:	e023      	b.n	80072bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68b9      	ldr	r1, [r7, #8]
 800727a:	4618      	mov	r0, r3
 800727c:	f000 fcaa 	bl	8007bd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800728e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800729e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	021a      	lsls	r2, r3, #8
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80072b4:	e002      	b.n	80072bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	75fb      	strb	r3, [r7, #23]
      break;
 80072ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop

080072d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d101      	bne.n	80072ec <HAL_TIM_ConfigClockSource+0x1c>
 80072e8:	2302      	movs	r3, #2
 80072ea:	e0b4      	b.n	8007456 <HAL_TIM_ConfigClockSource+0x186>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	4b56      	ldr	r3, [pc, #344]	; (8007460 <HAL_TIM_ConfigClockSource+0x190>)
 8007308:	4013      	ands	r3, r2
 800730a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007312:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007324:	d03e      	beq.n	80073a4 <HAL_TIM_ConfigClockSource+0xd4>
 8007326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800732a:	f200 8087 	bhi.w	800743c <HAL_TIM_ConfigClockSource+0x16c>
 800732e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007332:	f000 8086 	beq.w	8007442 <HAL_TIM_ConfigClockSource+0x172>
 8007336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733a:	d87f      	bhi.n	800743c <HAL_TIM_ConfigClockSource+0x16c>
 800733c:	2b70      	cmp	r3, #112	; 0x70
 800733e:	d01a      	beq.n	8007376 <HAL_TIM_ConfigClockSource+0xa6>
 8007340:	2b70      	cmp	r3, #112	; 0x70
 8007342:	d87b      	bhi.n	800743c <HAL_TIM_ConfigClockSource+0x16c>
 8007344:	2b60      	cmp	r3, #96	; 0x60
 8007346:	d050      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x11a>
 8007348:	2b60      	cmp	r3, #96	; 0x60
 800734a:	d877      	bhi.n	800743c <HAL_TIM_ConfigClockSource+0x16c>
 800734c:	2b50      	cmp	r3, #80	; 0x50
 800734e:	d03c      	beq.n	80073ca <HAL_TIM_ConfigClockSource+0xfa>
 8007350:	2b50      	cmp	r3, #80	; 0x50
 8007352:	d873      	bhi.n	800743c <HAL_TIM_ConfigClockSource+0x16c>
 8007354:	2b40      	cmp	r3, #64	; 0x40
 8007356:	d058      	beq.n	800740a <HAL_TIM_ConfigClockSource+0x13a>
 8007358:	2b40      	cmp	r3, #64	; 0x40
 800735a:	d86f      	bhi.n	800743c <HAL_TIM_ConfigClockSource+0x16c>
 800735c:	2b30      	cmp	r3, #48	; 0x30
 800735e:	d064      	beq.n	800742a <HAL_TIM_ConfigClockSource+0x15a>
 8007360:	2b30      	cmp	r3, #48	; 0x30
 8007362:	d86b      	bhi.n	800743c <HAL_TIM_ConfigClockSource+0x16c>
 8007364:	2b20      	cmp	r3, #32
 8007366:	d060      	beq.n	800742a <HAL_TIM_ConfigClockSource+0x15a>
 8007368:	2b20      	cmp	r3, #32
 800736a:	d867      	bhi.n	800743c <HAL_TIM_ConfigClockSource+0x16c>
 800736c:	2b00      	cmp	r3, #0
 800736e:	d05c      	beq.n	800742a <HAL_TIM_ConfigClockSource+0x15a>
 8007370:	2b10      	cmp	r3, #16
 8007372:	d05a      	beq.n	800742a <HAL_TIM_ConfigClockSource+0x15a>
 8007374:	e062      	b.n	800743c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007386:	f000 fcf3 	bl	8007d70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007398:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	609a      	str	r2, [r3, #8]
      break;
 80073a2:	e04f      	b.n	8007444 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073b4:	f000 fcdc 	bl	8007d70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073c6:	609a      	str	r2, [r3, #8]
      break;
 80073c8:	e03c      	b.n	8007444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073d6:	461a      	mov	r2, r3
 80073d8:	f000 fc50 	bl	8007c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2150      	movs	r1, #80	; 0x50
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 fca9 	bl	8007d3a <TIM_ITRx_SetConfig>
      break;
 80073e8:	e02c      	b.n	8007444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073f6:	461a      	mov	r2, r3
 80073f8:	f000 fc6f 	bl	8007cda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2160      	movs	r1, #96	; 0x60
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fc99 	bl	8007d3a <TIM_ITRx_SetConfig>
      break;
 8007408:	e01c      	b.n	8007444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007416:	461a      	mov	r2, r3
 8007418:	f000 fc30 	bl	8007c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2140      	movs	r1, #64	; 0x40
 8007422:	4618      	mov	r0, r3
 8007424:	f000 fc89 	bl	8007d3a <TIM_ITRx_SetConfig>
      break;
 8007428:	e00c      	b.n	8007444 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4619      	mov	r1, r3
 8007434:	4610      	mov	r0, r2
 8007436:	f000 fc80 	bl	8007d3a <TIM_ITRx_SetConfig>
      break;
 800743a:	e003      	b.n	8007444 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	73fb      	strb	r3, [r7, #15]
      break;
 8007440:	e000      	b.n	8007444 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007454:	7bfb      	ldrb	r3, [r7, #15]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	fffeff88 	.word	0xfffeff88

08007464 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d107      	bne.n	8007504 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2201      	movs	r2, #1
 80074f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007502:	e02a      	b.n	800755a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	429a      	cmp	r2, r3
 800750c:	d107      	bne.n	800751e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2202      	movs	r2, #2
 8007512:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800751c:	e01d      	b.n	800755a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	429a      	cmp	r2, r3
 8007526:	d107      	bne.n	8007538 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2204      	movs	r2, #4
 800752c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007536:	e010      	b.n	800755a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	429a      	cmp	r2, r3
 8007540:	d107      	bne.n	8007552 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2208      	movs	r2, #8
 8007546:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007550:	e003      	b.n	800755a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f7ff ffb4 	bl	80074c8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	771a      	strb	r2, [r3, #28]
}
 8007566:	bf00      	nop
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b084      	sub	sp, #16
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	429a      	cmp	r2, r3
 8007584:	d10b      	bne.n	800759e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2201      	movs	r2, #1
 800758a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d136      	bne.n	8007602 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800759c:	e031      	b.n	8007602 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d10b      	bne.n	80075c0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2202      	movs	r2, #2
 80075ac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d125      	bne.n	8007602 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075be:	e020      	b.n	8007602 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d10b      	bne.n	80075e2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2204      	movs	r2, #4
 80075ce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d114      	bne.n	8007602 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075e0:	e00f      	b.n	8007602 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d10a      	bne.n	8007602 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2208      	movs	r2, #8
 80075f0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d103      	bne.n	8007602 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f7f9 fc92 	bl	8000f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	771a      	strb	r2, [r3, #28]
}
 800760e:	bf00      	nop
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b084      	sub	sp, #16
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007622:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	429a      	cmp	r2, r3
 800762c:	d103      	bne.n	8007636 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2201      	movs	r2, #1
 8007632:	771a      	strb	r2, [r3, #28]
 8007634:	e019      	b.n	800766a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	429a      	cmp	r2, r3
 800763e:	d103      	bne.n	8007648 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2202      	movs	r2, #2
 8007644:	771a      	strb	r2, [r3, #28]
 8007646:	e010      	b.n	800766a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	429a      	cmp	r2, r3
 8007650:	d103      	bne.n	800765a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2204      	movs	r2, #4
 8007656:	771a      	strb	r2, [r3, #28]
 8007658:	e007      	b.n	800766a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	429a      	cmp	r2, r3
 8007662:	d102      	bne.n	800766a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2208      	movs	r2, #8
 8007668:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f7ff ff18 	bl	80074a0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	771a      	strb	r2, [r3, #28]
}
 8007676:	bf00      	nop
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
	...

08007680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a40      	ldr	r2, [pc, #256]	; (8007794 <TIM_Base_SetConfig+0x114>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d013      	beq.n	80076c0 <TIM_Base_SetConfig+0x40>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800769e:	d00f      	beq.n	80076c0 <TIM_Base_SetConfig+0x40>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a3d      	ldr	r2, [pc, #244]	; (8007798 <TIM_Base_SetConfig+0x118>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d00b      	beq.n	80076c0 <TIM_Base_SetConfig+0x40>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a3c      	ldr	r2, [pc, #240]	; (800779c <TIM_Base_SetConfig+0x11c>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d007      	beq.n	80076c0 <TIM_Base_SetConfig+0x40>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a3b      	ldr	r2, [pc, #236]	; (80077a0 <TIM_Base_SetConfig+0x120>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d003      	beq.n	80076c0 <TIM_Base_SetConfig+0x40>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a3a      	ldr	r2, [pc, #232]	; (80077a4 <TIM_Base_SetConfig+0x124>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d108      	bne.n	80076d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a2f      	ldr	r2, [pc, #188]	; (8007794 <TIM_Base_SetConfig+0x114>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d02b      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e0:	d027      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a2c      	ldr	r2, [pc, #176]	; (8007798 <TIM_Base_SetConfig+0x118>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d023      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a2b      	ldr	r2, [pc, #172]	; (800779c <TIM_Base_SetConfig+0x11c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d01f      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a2a      	ldr	r2, [pc, #168]	; (80077a0 <TIM_Base_SetConfig+0x120>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d01b      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a29      	ldr	r2, [pc, #164]	; (80077a4 <TIM_Base_SetConfig+0x124>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d017      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a28      	ldr	r2, [pc, #160]	; (80077a8 <TIM_Base_SetConfig+0x128>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d013      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a27      	ldr	r2, [pc, #156]	; (80077ac <TIM_Base_SetConfig+0x12c>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d00f      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a26      	ldr	r2, [pc, #152]	; (80077b0 <TIM_Base_SetConfig+0x130>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d00b      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a25      	ldr	r2, [pc, #148]	; (80077b4 <TIM_Base_SetConfig+0x134>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d007      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a24      	ldr	r2, [pc, #144]	; (80077b8 <TIM_Base_SetConfig+0x138>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d003      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a23      	ldr	r2, [pc, #140]	; (80077bc <TIM_Base_SetConfig+0x13c>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d108      	bne.n	8007744 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	4313      	orrs	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	4313      	orrs	r3, r2
 8007750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a0a      	ldr	r2, [pc, #40]	; (8007794 <TIM_Base_SetConfig+0x114>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d003      	beq.n	8007778 <TIM_Base_SetConfig+0xf8>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a0c      	ldr	r2, [pc, #48]	; (80077a4 <TIM_Base_SetConfig+0x124>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d103      	bne.n	8007780 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	691a      	ldr	r2, [r3, #16]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	615a      	str	r2, [r3, #20]
}
 8007786:	bf00      	nop
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	40010000 	.word	0x40010000
 8007798:	40000400 	.word	0x40000400
 800779c:	40000800 	.word	0x40000800
 80077a0:	40000c00 	.word	0x40000c00
 80077a4:	40010400 	.word	0x40010400
 80077a8:	40014000 	.word	0x40014000
 80077ac:	40014400 	.word	0x40014400
 80077b0:	40014800 	.word	0x40014800
 80077b4:	40001800 	.word	0x40001800
 80077b8:	40001c00 	.word	0x40001c00
 80077bc:	40002000 	.word	0x40002000

080077c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	f023 0201 	bic.w	r2, r3, #1
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	4b2b      	ldr	r3, [pc, #172]	; (8007898 <TIM_OC1_SetConfig+0xd8>)
 80077ec:	4013      	ands	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f023 0303 	bic.w	r3, r3, #3
 80077f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	4313      	orrs	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f023 0302 	bic.w	r3, r3, #2
 8007808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	4313      	orrs	r3, r2
 8007812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a21      	ldr	r2, [pc, #132]	; (800789c <TIM_OC1_SetConfig+0xdc>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d003      	beq.n	8007824 <TIM_OC1_SetConfig+0x64>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a20      	ldr	r2, [pc, #128]	; (80078a0 <TIM_OC1_SetConfig+0xe0>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d10c      	bne.n	800783e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f023 0308 	bic.w	r3, r3, #8
 800782a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	4313      	orrs	r3, r2
 8007834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f023 0304 	bic.w	r3, r3, #4
 800783c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a16      	ldr	r2, [pc, #88]	; (800789c <TIM_OC1_SetConfig+0xdc>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d003      	beq.n	800784e <TIM_OC1_SetConfig+0x8e>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a15      	ldr	r2, [pc, #84]	; (80078a0 <TIM_OC1_SetConfig+0xe0>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d111      	bne.n	8007872 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800785c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	4313      	orrs	r3, r2
 8007866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	4313      	orrs	r3, r2
 8007870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	621a      	str	r2, [r3, #32]
}
 800788c:	bf00      	nop
 800788e:	371c      	adds	r7, #28
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	fffeff8f 	.word	0xfffeff8f
 800789c:	40010000 	.word	0x40010000
 80078a0:	40010400 	.word	0x40010400

080078a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	f023 0210 	bic.w	r2, r3, #16
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	4b2e      	ldr	r3, [pc, #184]	; (8007988 <TIM_OC2_SetConfig+0xe4>)
 80078d0:	4013      	ands	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	021b      	lsls	r3, r3, #8
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f023 0320 	bic.w	r3, r3, #32
 80078ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	011b      	lsls	r3, r3, #4
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a23      	ldr	r2, [pc, #140]	; (800798c <TIM_OC2_SetConfig+0xe8>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d003      	beq.n	800790c <TIM_OC2_SetConfig+0x68>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a22      	ldr	r2, [pc, #136]	; (8007990 <TIM_OC2_SetConfig+0xec>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d10d      	bne.n	8007928 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007912:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	011b      	lsls	r3, r3, #4
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	4313      	orrs	r3, r2
 800791e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007926:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a18      	ldr	r2, [pc, #96]	; (800798c <TIM_OC2_SetConfig+0xe8>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d003      	beq.n	8007938 <TIM_OC2_SetConfig+0x94>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a17      	ldr	r2, [pc, #92]	; (8007990 <TIM_OC2_SetConfig+0xec>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d113      	bne.n	8007960 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800793e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007946:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	695b      	ldr	r3, [r3, #20]
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	4313      	orrs	r3, r2
 8007952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	4313      	orrs	r3, r2
 800795e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	685a      	ldr	r2, [r3, #4]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	621a      	str	r2, [r3, #32]
}
 800797a:	bf00      	nop
 800797c:	371c      	adds	r7, #28
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	feff8fff 	.word	0xfeff8fff
 800798c:	40010000 	.word	0x40010000
 8007990:	40010400 	.word	0x40010400

08007994 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007994:	b480      	push	{r7}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	4b2d      	ldr	r3, [pc, #180]	; (8007a74 <TIM_OC3_SetConfig+0xe0>)
 80079c0:	4013      	ands	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 0303 	bic.w	r3, r3, #3
 80079ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	021b      	lsls	r3, r3, #8
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a22      	ldr	r2, [pc, #136]	; (8007a78 <TIM_OC3_SetConfig+0xe4>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d003      	beq.n	80079fa <TIM_OC3_SetConfig+0x66>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a21      	ldr	r2, [pc, #132]	; (8007a7c <TIM_OC3_SetConfig+0xe8>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d10d      	bne.n	8007a16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	021b      	lsls	r3, r3, #8
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a17      	ldr	r2, [pc, #92]	; (8007a78 <TIM_OC3_SetConfig+0xe4>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d003      	beq.n	8007a26 <TIM_OC3_SetConfig+0x92>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a16      	ldr	r2, [pc, #88]	; (8007a7c <TIM_OC3_SetConfig+0xe8>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d113      	bne.n	8007a4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	011b      	lsls	r3, r3, #4
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	011b      	lsls	r3, r3, #4
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	621a      	str	r2, [r3, #32]
}
 8007a68:	bf00      	nop
 8007a6a:	371c      	adds	r7, #28
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	fffeff8f 	.word	0xfffeff8f
 8007a78:	40010000 	.word	0x40010000
 8007a7c:	40010400 	.word	0x40010400

08007a80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4b1e      	ldr	r3, [pc, #120]	; (8007b24 <TIM_OC4_SetConfig+0xa4>)
 8007aac:	4013      	ands	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	021b      	lsls	r3, r3, #8
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	031b      	lsls	r3, r3, #12
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a13      	ldr	r2, [pc, #76]	; (8007b28 <TIM_OC4_SetConfig+0xa8>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d003      	beq.n	8007ae8 <TIM_OC4_SetConfig+0x68>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a12      	ldr	r2, [pc, #72]	; (8007b2c <TIM_OC4_SetConfig+0xac>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d109      	bne.n	8007afc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007aee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	019b      	lsls	r3, r3, #6
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	621a      	str	r2, [r3, #32]
}
 8007b16:	bf00      	nop
 8007b18:	371c      	adds	r7, #28
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	feff8fff 	.word	0xfeff8fff
 8007b28:	40010000 	.word	0x40010000
 8007b2c:	40010400 	.word	0x40010400

08007b30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b087      	sub	sp, #28
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	4b1b      	ldr	r3, [pc, #108]	; (8007bc8 <TIM_OC5_SetConfig+0x98>)
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007b70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	041b      	lsls	r3, r3, #16
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a12      	ldr	r2, [pc, #72]	; (8007bcc <TIM_OC5_SetConfig+0x9c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d003      	beq.n	8007b8e <TIM_OC5_SetConfig+0x5e>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a11      	ldr	r2, [pc, #68]	; (8007bd0 <TIM_OC5_SetConfig+0xa0>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d109      	bne.n	8007ba2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	021b      	lsls	r3, r3, #8
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	621a      	str	r2, [r3, #32]
}
 8007bbc:	bf00      	nop
 8007bbe:	371c      	adds	r7, #28
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	fffeff8f 	.word	0xfffeff8f
 8007bcc:	40010000 	.word	0x40010000
 8007bd0:	40010400 	.word	0x40010400

08007bd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	4b1c      	ldr	r3, [pc, #112]	; (8007c70 <TIM_OC6_SetConfig+0x9c>)
 8007c00:	4013      	ands	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	021b      	lsls	r3, r3, #8
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	051b      	lsls	r3, r3, #20
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a13      	ldr	r2, [pc, #76]	; (8007c74 <TIM_OC6_SetConfig+0xa0>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d003      	beq.n	8007c34 <TIM_OC6_SetConfig+0x60>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a12      	ldr	r2, [pc, #72]	; (8007c78 <TIM_OC6_SetConfig+0xa4>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d109      	bne.n	8007c48 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	029b      	lsls	r3, r3, #10
 8007c42:	697a      	ldr	r2, [r7, #20]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	621a      	str	r2, [r3, #32]
}
 8007c62:	bf00      	nop
 8007c64:	371c      	adds	r7, #28
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	feff8fff 	.word	0xfeff8fff
 8007c74:	40010000 	.word	0x40010000
 8007c78:	40010400 	.word	0x40010400

08007c7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6a1b      	ldr	r3, [r3, #32]
 8007c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	f023 0201 	bic.w	r2, r3, #1
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	011b      	lsls	r3, r3, #4
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f023 030a 	bic.w	r3, r3, #10
 8007cb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	621a      	str	r2, [r3, #32]
}
 8007cce:	bf00      	nop
 8007cd0:	371c      	adds	r7, #28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b087      	sub	sp, #28
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	60f8      	str	r0, [r7, #12]
 8007ce2:	60b9      	str	r1, [r7, #8]
 8007ce4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	f023 0210 	bic.w	r2, r3, #16
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	031b      	lsls	r3, r3, #12
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	011b      	lsls	r3, r3, #4
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	621a      	str	r2, [r3, #32]
}
 8007d2e:	bf00      	nop
 8007d30:	371c      	adds	r7, #28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b085      	sub	sp, #20
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	f043 0307 	orr.w	r3, r3, #7
 8007d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	609a      	str	r2, [r3, #8]
}
 8007d64:	bf00      	nop
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
 8007d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	021a      	lsls	r2, r3, #8
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	431a      	orrs	r2, r3
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	609a      	str	r2, [r3, #8]
}
 8007da4:	bf00      	nop
 8007da6:	371c      	adds	r7, #28
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b087      	sub	sp, #28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	f003 031f 	and.w	r3, r3, #31
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6a1a      	ldr	r2, [r3, #32]
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	43db      	mvns	r3, r3
 8007dd2:	401a      	ands	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6a1a      	ldr	r2, [r3, #32]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f003 031f 	and.w	r3, r3, #31
 8007de2:	6879      	ldr	r1, [r7, #4]
 8007de4:	fa01 f303 	lsl.w	r3, r1, r3
 8007de8:	431a      	orrs	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	621a      	str	r2, [r3, #32]
}
 8007dee:	bf00      	nop
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
	...

08007dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d101      	bne.n	8007e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e10:	2302      	movs	r3, #2
 8007e12:	e06d      	b.n	8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a30      	ldr	r2, [pc, #192]	; (8007efc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d004      	beq.n	8007e48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a2f      	ldr	r2, [pc, #188]	; (8007f00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d108      	bne.n	8007e5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007e4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a20      	ldr	r2, [pc, #128]	; (8007efc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d022      	beq.n	8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e86:	d01d      	beq.n	8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a1d      	ldr	r2, [pc, #116]	; (8007f04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d018      	beq.n	8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a1c      	ldr	r2, [pc, #112]	; (8007f08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d013      	beq.n	8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a1a      	ldr	r2, [pc, #104]	; (8007f0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d00e      	beq.n	8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a15      	ldr	r2, [pc, #84]	; (8007f00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d009      	beq.n	8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a16      	ldr	r2, [pc, #88]	; (8007f10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d004      	beq.n	8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a15      	ldr	r2, [pc, #84]	; (8007f14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d10c      	bne.n	8007ede <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	40010000 	.word	0x40010000
 8007f00:	40010400 	.word	0x40010400
 8007f04:	40000400 	.word	0x40000400
 8007f08:	40000800 	.word	0x40000800
 8007f0c:	40000c00 	.word	0x40000c00
 8007f10:	40014000 	.word	0x40014000
 8007f14:	40001800 	.word	0x40001800

08007f18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d101      	bne.n	8007f34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f30:	2302      	movs	r3, #2
 8007f32:	e065      	b.n	8008000 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	041b      	lsls	r3, r3, #16
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a16      	ldr	r2, [pc, #88]	; (800800c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d004      	beq.n	8007fc2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a14      	ldr	r2, [pc, #80]	; (8008010 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d115      	bne.n	8007fee <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fcc:	051b      	lsls	r3, r3, #20
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	69db      	ldr	r3, [r3, #28]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3714      	adds	r7, #20
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	40010000 	.word	0x40010000
 8008010:	40010400 	.word	0x40010400

08008014 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e040      	b.n	80080e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008066:	2b00      	cmp	r3, #0
 8008068:	d106      	bne.n	8008078 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7fa f8ee 	bl	8002254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2224      	movs	r2, #36	; 0x24
 800807c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f022 0201 	bic.w	r2, r2, #1
 800808c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f8b0 	bl	80081f4 <UART_SetConfig>
 8008094:	4603      	mov	r3, r0
 8008096:	2b01      	cmp	r3, #1
 8008098:	d101      	bne.n	800809e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e022      	b.n	80080e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d002      	beq.n	80080ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fb08 	bl	80086bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	689a      	ldr	r2, [r3, #8]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f042 0201 	orr.w	r2, r2, #1
 80080da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fb8f 	bl	8008800 <UART_CheckIdleState>
 80080e2:	4603      	mov	r3, r0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08a      	sub	sp, #40	; 0x28
 80080f0:	af02      	add	r7, sp, #8
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	603b      	str	r3, [r7, #0]
 80080f8:	4613      	mov	r3, r2
 80080fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008100:	2b20      	cmp	r3, #32
 8008102:	d171      	bne.n	80081e8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d002      	beq.n	8008110 <HAL_UART_Transmit+0x24>
 800810a:	88fb      	ldrh	r3, [r7, #6]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	e06a      	b.n	80081ea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2221      	movs	r2, #33	; 0x21
 8008120:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008122:	f7fb f941 	bl	80033a8 <HAL_GetTick>
 8008126:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	88fa      	ldrh	r2, [r7, #6]
 800812c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	88fa      	ldrh	r2, [r7, #6]
 8008134:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008140:	d108      	bne.n	8008154 <HAL_UART_Transmit+0x68>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d104      	bne.n	8008154 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800814a:	2300      	movs	r3, #0
 800814c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	61bb      	str	r3, [r7, #24]
 8008152:	e003      	b.n	800815c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008158:	2300      	movs	r3, #0
 800815a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800815c:	e02c      	b.n	80081b8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	2200      	movs	r2, #0
 8008166:	2180      	movs	r1, #128	; 0x80
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 fb96 	bl	800889a <UART_WaitOnFlagUntilTimeout>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d001      	beq.n	8008178 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008174:	2303      	movs	r3, #3
 8008176:	e038      	b.n	80081ea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10b      	bne.n	8008196 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800818c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	3302      	adds	r3, #2
 8008192:	61bb      	str	r3, [r7, #24]
 8008194:	e007      	b.n	80081a6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	781a      	ldrb	r2, [r3, #0]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	3301      	adds	r3, #1
 80081a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	3b01      	subs	r3, #1
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80081be:	b29b      	uxth	r3, r3
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1cc      	bne.n	800815e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	2200      	movs	r2, #0
 80081cc:	2140      	movs	r1, #64	; 0x40
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 fb63 	bl	800889a <UART_WaitOnFlagUntilTimeout>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e005      	b.n	80081ea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2220      	movs	r2, #32
 80081e2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	e000      	b.n	80081ea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80081e8:	2302      	movs	r3, #2
  }
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3720      	adds	r7, #32
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
	...

080081f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b088      	sub	sp, #32
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	431a      	orrs	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	431a      	orrs	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	69db      	ldr	r3, [r3, #28]
 8008214:	4313      	orrs	r3, r2
 8008216:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	4ba6      	ldr	r3, [pc, #664]	; (80084b8 <UART_SetConfig+0x2c4>)
 8008220:	4013      	ands	r3, r2
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	6812      	ldr	r2, [r2, #0]
 8008226:	6979      	ldr	r1, [r7, #20]
 8008228:	430b      	orrs	r3, r1
 800822a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68da      	ldr	r2, [r3, #12]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	430a      	orrs	r2, r1
 8008240:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a1b      	ldr	r3, [r3, #32]
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	4313      	orrs	r3, r2
 8008250:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	430a      	orrs	r2, r1
 8008264:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a94      	ldr	r2, [pc, #592]	; (80084bc <UART_SetConfig+0x2c8>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d120      	bne.n	80082b2 <UART_SetConfig+0xbe>
 8008270:	4b93      	ldr	r3, [pc, #588]	; (80084c0 <UART_SetConfig+0x2cc>)
 8008272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008276:	f003 0303 	and.w	r3, r3, #3
 800827a:	2b03      	cmp	r3, #3
 800827c:	d816      	bhi.n	80082ac <UART_SetConfig+0xb8>
 800827e:	a201      	add	r2, pc, #4	; (adr r2, 8008284 <UART_SetConfig+0x90>)
 8008280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008284:	08008295 	.word	0x08008295
 8008288:	080082a1 	.word	0x080082a1
 800828c:	0800829b 	.word	0x0800829b
 8008290:	080082a7 	.word	0x080082a7
 8008294:	2301      	movs	r3, #1
 8008296:	77fb      	strb	r3, [r7, #31]
 8008298:	e150      	b.n	800853c <UART_SetConfig+0x348>
 800829a:	2302      	movs	r3, #2
 800829c:	77fb      	strb	r3, [r7, #31]
 800829e:	e14d      	b.n	800853c <UART_SetConfig+0x348>
 80082a0:	2304      	movs	r3, #4
 80082a2:	77fb      	strb	r3, [r7, #31]
 80082a4:	e14a      	b.n	800853c <UART_SetConfig+0x348>
 80082a6:	2308      	movs	r3, #8
 80082a8:	77fb      	strb	r3, [r7, #31]
 80082aa:	e147      	b.n	800853c <UART_SetConfig+0x348>
 80082ac:	2310      	movs	r3, #16
 80082ae:	77fb      	strb	r3, [r7, #31]
 80082b0:	e144      	b.n	800853c <UART_SetConfig+0x348>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a83      	ldr	r2, [pc, #524]	; (80084c4 <UART_SetConfig+0x2d0>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d132      	bne.n	8008322 <UART_SetConfig+0x12e>
 80082bc:	4b80      	ldr	r3, [pc, #512]	; (80084c0 <UART_SetConfig+0x2cc>)
 80082be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082c2:	f003 030c 	and.w	r3, r3, #12
 80082c6:	2b0c      	cmp	r3, #12
 80082c8:	d828      	bhi.n	800831c <UART_SetConfig+0x128>
 80082ca:	a201      	add	r2, pc, #4	; (adr r2, 80082d0 <UART_SetConfig+0xdc>)
 80082cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d0:	08008305 	.word	0x08008305
 80082d4:	0800831d 	.word	0x0800831d
 80082d8:	0800831d 	.word	0x0800831d
 80082dc:	0800831d 	.word	0x0800831d
 80082e0:	08008311 	.word	0x08008311
 80082e4:	0800831d 	.word	0x0800831d
 80082e8:	0800831d 	.word	0x0800831d
 80082ec:	0800831d 	.word	0x0800831d
 80082f0:	0800830b 	.word	0x0800830b
 80082f4:	0800831d 	.word	0x0800831d
 80082f8:	0800831d 	.word	0x0800831d
 80082fc:	0800831d 	.word	0x0800831d
 8008300:	08008317 	.word	0x08008317
 8008304:	2300      	movs	r3, #0
 8008306:	77fb      	strb	r3, [r7, #31]
 8008308:	e118      	b.n	800853c <UART_SetConfig+0x348>
 800830a:	2302      	movs	r3, #2
 800830c:	77fb      	strb	r3, [r7, #31]
 800830e:	e115      	b.n	800853c <UART_SetConfig+0x348>
 8008310:	2304      	movs	r3, #4
 8008312:	77fb      	strb	r3, [r7, #31]
 8008314:	e112      	b.n	800853c <UART_SetConfig+0x348>
 8008316:	2308      	movs	r3, #8
 8008318:	77fb      	strb	r3, [r7, #31]
 800831a:	e10f      	b.n	800853c <UART_SetConfig+0x348>
 800831c:	2310      	movs	r3, #16
 800831e:	77fb      	strb	r3, [r7, #31]
 8008320:	e10c      	b.n	800853c <UART_SetConfig+0x348>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a68      	ldr	r2, [pc, #416]	; (80084c8 <UART_SetConfig+0x2d4>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d120      	bne.n	800836e <UART_SetConfig+0x17a>
 800832c:	4b64      	ldr	r3, [pc, #400]	; (80084c0 <UART_SetConfig+0x2cc>)
 800832e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008332:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008336:	2b30      	cmp	r3, #48	; 0x30
 8008338:	d013      	beq.n	8008362 <UART_SetConfig+0x16e>
 800833a:	2b30      	cmp	r3, #48	; 0x30
 800833c:	d814      	bhi.n	8008368 <UART_SetConfig+0x174>
 800833e:	2b20      	cmp	r3, #32
 8008340:	d009      	beq.n	8008356 <UART_SetConfig+0x162>
 8008342:	2b20      	cmp	r3, #32
 8008344:	d810      	bhi.n	8008368 <UART_SetConfig+0x174>
 8008346:	2b00      	cmp	r3, #0
 8008348:	d002      	beq.n	8008350 <UART_SetConfig+0x15c>
 800834a:	2b10      	cmp	r3, #16
 800834c:	d006      	beq.n	800835c <UART_SetConfig+0x168>
 800834e:	e00b      	b.n	8008368 <UART_SetConfig+0x174>
 8008350:	2300      	movs	r3, #0
 8008352:	77fb      	strb	r3, [r7, #31]
 8008354:	e0f2      	b.n	800853c <UART_SetConfig+0x348>
 8008356:	2302      	movs	r3, #2
 8008358:	77fb      	strb	r3, [r7, #31]
 800835a:	e0ef      	b.n	800853c <UART_SetConfig+0x348>
 800835c:	2304      	movs	r3, #4
 800835e:	77fb      	strb	r3, [r7, #31]
 8008360:	e0ec      	b.n	800853c <UART_SetConfig+0x348>
 8008362:	2308      	movs	r3, #8
 8008364:	77fb      	strb	r3, [r7, #31]
 8008366:	e0e9      	b.n	800853c <UART_SetConfig+0x348>
 8008368:	2310      	movs	r3, #16
 800836a:	77fb      	strb	r3, [r7, #31]
 800836c:	e0e6      	b.n	800853c <UART_SetConfig+0x348>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a56      	ldr	r2, [pc, #344]	; (80084cc <UART_SetConfig+0x2d8>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d120      	bne.n	80083ba <UART_SetConfig+0x1c6>
 8008378:	4b51      	ldr	r3, [pc, #324]	; (80084c0 <UART_SetConfig+0x2cc>)
 800837a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800837e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008382:	2bc0      	cmp	r3, #192	; 0xc0
 8008384:	d013      	beq.n	80083ae <UART_SetConfig+0x1ba>
 8008386:	2bc0      	cmp	r3, #192	; 0xc0
 8008388:	d814      	bhi.n	80083b4 <UART_SetConfig+0x1c0>
 800838a:	2b80      	cmp	r3, #128	; 0x80
 800838c:	d009      	beq.n	80083a2 <UART_SetConfig+0x1ae>
 800838e:	2b80      	cmp	r3, #128	; 0x80
 8008390:	d810      	bhi.n	80083b4 <UART_SetConfig+0x1c0>
 8008392:	2b00      	cmp	r3, #0
 8008394:	d002      	beq.n	800839c <UART_SetConfig+0x1a8>
 8008396:	2b40      	cmp	r3, #64	; 0x40
 8008398:	d006      	beq.n	80083a8 <UART_SetConfig+0x1b4>
 800839a:	e00b      	b.n	80083b4 <UART_SetConfig+0x1c0>
 800839c:	2300      	movs	r3, #0
 800839e:	77fb      	strb	r3, [r7, #31]
 80083a0:	e0cc      	b.n	800853c <UART_SetConfig+0x348>
 80083a2:	2302      	movs	r3, #2
 80083a4:	77fb      	strb	r3, [r7, #31]
 80083a6:	e0c9      	b.n	800853c <UART_SetConfig+0x348>
 80083a8:	2304      	movs	r3, #4
 80083aa:	77fb      	strb	r3, [r7, #31]
 80083ac:	e0c6      	b.n	800853c <UART_SetConfig+0x348>
 80083ae:	2308      	movs	r3, #8
 80083b0:	77fb      	strb	r3, [r7, #31]
 80083b2:	e0c3      	b.n	800853c <UART_SetConfig+0x348>
 80083b4:	2310      	movs	r3, #16
 80083b6:	77fb      	strb	r3, [r7, #31]
 80083b8:	e0c0      	b.n	800853c <UART_SetConfig+0x348>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a44      	ldr	r2, [pc, #272]	; (80084d0 <UART_SetConfig+0x2dc>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d125      	bne.n	8008410 <UART_SetConfig+0x21c>
 80083c4:	4b3e      	ldr	r3, [pc, #248]	; (80084c0 <UART_SetConfig+0x2cc>)
 80083c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083d2:	d017      	beq.n	8008404 <UART_SetConfig+0x210>
 80083d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083d8:	d817      	bhi.n	800840a <UART_SetConfig+0x216>
 80083da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083de:	d00b      	beq.n	80083f8 <UART_SetConfig+0x204>
 80083e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083e4:	d811      	bhi.n	800840a <UART_SetConfig+0x216>
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <UART_SetConfig+0x1fe>
 80083ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ee:	d006      	beq.n	80083fe <UART_SetConfig+0x20a>
 80083f0:	e00b      	b.n	800840a <UART_SetConfig+0x216>
 80083f2:	2300      	movs	r3, #0
 80083f4:	77fb      	strb	r3, [r7, #31]
 80083f6:	e0a1      	b.n	800853c <UART_SetConfig+0x348>
 80083f8:	2302      	movs	r3, #2
 80083fa:	77fb      	strb	r3, [r7, #31]
 80083fc:	e09e      	b.n	800853c <UART_SetConfig+0x348>
 80083fe:	2304      	movs	r3, #4
 8008400:	77fb      	strb	r3, [r7, #31]
 8008402:	e09b      	b.n	800853c <UART_SetConfig+0x348>
 8008404:	2308      	movs	r3, #8
 8008406:	77fb      	strb	r3, [r7, #31]
 8008408:	e098      	b.n	800853c <UART_SetConfig+0x348>
 800840a:	2310      	movs	r3, #16
 800840c:	77fb      	strb	r3, [r7, #31]
 800840e:	e095      	b.n	800853c <UART_SetConfig+0x348>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a2f      	ldr	r2, [pc, #188]	; (80084d4 <UART_SetConfig+0x2e0>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d125      	bne.n	8008466 <UART_SetConfig+0x272>
 800841a:	4b29      	ldr	r3, [pc, #164]	; (80084c0 <UART_SetConfig+0x2cc>)
 800841c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008420:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008424:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008428:	d017      	beq.n	800845a <UART_SetConfig+0x266>
 800842a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800842e:	d817      	bhi.n	8008460 <UART_SetConfig+0x26c>
 8008430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008434:	d00b      	beq.n	800844e <UART_SetConfig+0x25a>
 8008436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800843a:	d811      	bhi.n	8008460 <UART_SetConfig+0x26c>
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <UART_SetConfig+0x254>
 8008440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008444:	d006      	beq.n	8008454 <UART_SetConfig+0x260>
 8008446:	e00b      	b.n	8008460 <UART_SetConfig+0x26c>
 8008448:	2301      	movs	r3, #1
 800844a:	77fb      	strb	r3, [r7, #31]
 800844c:	e076      	b.n	800853c <UART_SetConfig+0x348>
 800844e:	2302      	movs	r3, #2
 8008450:	77fb      	strb	r3, [r7, #31]
 8008452:	e073      	b.n	800853c <UART_SetConfig+0x348>
 8008454:	2304      	movs	r3, #4
 8008456:	77fb      	strb	r3, [r7, #31]
 8008458:	e070      	b.n	800853c <UART_SetConfig+0x348>
 800845a:	2308      	movs	r3, #8
 800845c:	77fb      	strb	r3, [r7, #31]
 800845e:	e06d      	b.n	800853c <UART_SetConfig+0x348>
 8008460:	2310      	movs	r3, #16
 8008462:	77fb      	strb	r3, [r7, #31]
 8008464:	e06a      	b.n	800853c <UART_SetConfig+0x348>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a1b      	ldr	r2, [pc, #108]	; (80084d8 <UART_SetConfig+0x2e4>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d138      	bne.n	80084e2 <UART_SetConfig+0x2ee>
 8008470:	4b13      	ldr	r3, [pc, #76]	; (80084c0 <UART_SetConfig+0x2cc>)
 8008472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008476:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800847a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800847e:	d017      	beq.n	80084b0 <UART_SetConfig+0x2bc>
 8008480:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008484:	d82a      	bhi.n	80084dc <UART_SetConfig+0x2e8>
 8008486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800848a:	d00b      	beq.n	80084a4 <UART_SetConfig+0x2b0>
 800848c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008490:	d824      	bhi.n	80084dc <UART_SetConfig+0x2e8>
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <UART_SetConfig+0x2aa>
 8008496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800849a:	d006      	beq.n	80084aa <UART_SetConfig+0x2b6>
 800849c:	e01e      	b.n	80084dc <UART_SetConfig+0x2e8>
 800849e:	2300      	movs	r3, #0
 80084a0:	77fb      	strb	r3, [r7, #31]
 80084a2:	e04b      	b.n	800853c <UART_SetConfig+0x348>
 80084a4:	2302      	movs	r3, #2
 80084a6:	77fb      	strb	r3, [r7, #31]
 80084a8:	e048      	b.n	800853c <UART_SetConfig+0x348>
 80084aa:	2304      	movs	r3, #4
 80084ac:	77fb      	strb	r3, [r7, #31]
 80084ae:	e045      	b.n	800853c <UART_SetConfig+0x348>
 80084b0:	2308      	movs	r3, #8
 80084b2:	77fb      	strb	r3, [r7, #31]
 80084b4:	e042      	b.n	800853c <UART_SetConfig+0x348>
 80084b6:	bf00      	nop
 80084b8:	efff69f3 	.word	0xefff69f3
 80084bc:	40011000 	.word	0x40011000
 80084c0:	40023800 	.word	0x40023800
 80084c4:	40004400 	.word	0x40004400
 80084c8:	40004800 	.word	0x40004800
 80084cc:	40004c00 	.word	0x40004c00
 80084d0:	40005000 	.word	0x40005000
 80084d4:	40011400 	.word	0x40011400
 80084d8:	40007800 	.word	0x40007800
 80084dc:	2310      	movs	r3, #16
 80084de:	77fb      	strb	r3, [r7, #31]
 80084e0:	e02c      	b.n	800853c <UART_SetConfig+0x348>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a72      	ldr	r2, [pc, #456]	; (80086b0 <UART_SetConfig+0x4bc>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d125      	bne.n	8008538 <UART_SetConfig+0x344>
 80084ec:	4b71      	ldr	r3, [pc, #452]	; (80086b4 <UART_SetConfig+0x4c0>)
 80084ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80084f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80084fa:	d017      	beq.n	800852c <UART_SetConfig+0x338>
 80084fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008500:	d817      	bhi.n	8008532 <UART_SetConfig+0x33e>
 8008502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008506:	d00b      	beq.n	8008520 <UART_SetConfig+0x32c>
 8008508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800850c:	d811      	bhi.n	8008532 <UART_SetConfig+0x33e>
 800850e:	2b00      	cmp	r3, #0
 8008510:	d003      	beq.n	800851a <UART_SetConfig+0x326>
 8008512:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008516:	d006      	beq.n	8008526 <UART_SetConfig+0x332>
 8008518:	e00b      	b.n	8008532 <UART_SetConfig+0x33e>
 800851a:	2300      	movs	r3, #0
 800851c:	77fb      	strb	r3, [r7, #31]
 800851e:	e00d      	b.n	800853c <UART_SetConfig+0x348>
 8008520:	2302      	movs	r3, #2
 8008522:	77fb      	strb	r3, [r7, #31]
 8008524:	e00a      	b.n	800853c <UART_SetConfig+0x348>
 8008526:	2304      	movs	r3, #4
 8008528:	77fb      	strb	r3, [r7, #31]
 800852a:	e007      	b.n	800853c <UART_SetConfig+0x348>
 800852c:	2308      	movs	r3, #8
 800852e:	77fb      	strb	r3, [r7, #31]
 8008530:	e004      	b.n	800853c <UART_SetConfig+0x348>
 8008532:	2310      	movs	r3, #16
 8008534:	77fb      	strb	r3, [r7, #31]
 8008536:	e001      	b.n	800853c <UART_SetConfig+0x348>
 8008538:	2310      	movs	r3, #16
 800853a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008544:	d15b      	bne.n	80085fe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008546:	7ffb      	ldrb	r3, [r7, #31]
 8008548:	2b08      	cmp	r3, #8
 800854a:	d828      	bhi.n	800859e <UART_SetConfig+0x3aa>
 800854c:	a201      	add	r2, pc, #4	; (adr r2, 8008554 <UART_SetConfig+0x360>)
 800854e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008552:	bf00      	nop
 8008554:	08008579 	.word	0x08008579
 8008558:	08008581 	.word	0x08008581
 800855c:	08008589 	.word	0x08008589
 8008560:	0800859f 	.word	0x0800859f
 8008564:	0800858f 	.word	0x0800858f
 8008568:	0800859f 	.word	0x0800859f
 800856c:	0800859f 	.word	0x0800859f
 8008570:	0800859f 	.word	0x0800859f
 8008574:	08008597 	.word	0x08008597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008578:	f7fd f832 	bl	80055e0 <HAL_RCC_GetPCLK1Freq>
 800857c:	61b8      	str	r0, [r7, #24]
        break;
 800857e:	e013      	b.n	80085a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008580:	f7fd f842 	bl	8005608 <HAL_RCC_GetPCLK2Freq>
 8008584:	61b8      	str	r0, [r7, #24]
        break;
 8008586:	e00f      	b.n	80085a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008588:	4b4b      	ldr	r3, [pc, #300]	; (80086b8 <UART_SetConfig+0x4c4>)
 800858a:	61bb      	str	r3, [r7, #24]
        break;
 800858c:	e00c      	b.n	80085a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800858e:	f7fc ff15 	bl	80053bc <HAL_RCC_GetSysClockFreq>
 8008592:	61b8      	str	r0, [r7, #24]
        break;
 8008594:	e008      	b.n	80085a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800859a:	61bb      	str	r3, [r7, #24]
        break;
 800859c:	e004      	b.n	80085a8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800859e:	2300      	movs	r3, #0
 80085a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	77bb      	strb	r3, [r7, #30]
        break;
 80085a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d074      	beq.n	8008698 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	005a      	lsls	r2, r3, #1
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	085b      	lsrs	r3, r3, #1
 80085b8:	441a      	add	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	fbb2 f3f3 	udiv	r3, r2, r3
 80085c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	2b0f      	cmp	r3, #15
 80085c8:	d916      	bls.n	80085f8 <UART_SetConfig+0x404>
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085d0:	d212      	bcs.n	80085f8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	f023 030f 	bic.w	r3, r3, #15
 80085da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	085b      	lsrs	r3, r3, #1
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	f003 0307 	and.w	r3, r3, #7
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	89fb      	ldrh	r3, [r7, #14]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	89fa      	ldrh	r2, [r7, #14]
 80085f4:	60da      	str	r2, [r3, #12]
 80085f6:	e04f      	b.n	8008698 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	77bb      	strb	r3, [r7, #30]
 80085fc:	e04c      	b.n	8008698 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085fe:	7ffb      	ldrb	r3, [r7, #31]
 8008600:	2b08      	cmp	r3, #8
 8008602:	d828      	bhi.n	8008656 <UART_SetConfig+0x462>
 8008604:	a201      	add	r2, pc, #4	; (adr r2, 800860c <UART_SetConfig+0x418>)
 8008606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860a:	bf00      	nop
 800860c:	08008631 	.word	0x08008631
 8008610:	08008639 	.word	0x08008639
 8008614:	08008641 	.word	0x08008641
 8008618:	08008657 	.word	0x08008657
 800861c:	08008647 	.word	0x08008647
 8008620:	08008657 	.word	0x08008657
 8008624:	08008657 	.word	0x08008657
 8008628:	08008657 	.word	0x08008657
 800862c:	0800864f 	.word	0x0800864f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008630:	f7fc ffd6 	bl	80055e0 <HAL_RCC_GetPCLK1Freq>
 8008634:	61b8      	str	r0, [r7, #24]
        break;
 8008636:	e013      	b.n	8008660 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008638:	f7fc ffe6 	bl	8005608 <HAL_RCC_GetPCLK2Freq>
 800863c:	61b8      	str	r0, [r7, #24]
        break;
 800863e:	e00f      	b.n	8008660 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008640:	4b1d      	ldr	r3, [pc, #116]	; (80086b8 <UART_SetConfig+0x4c4>)
 8008642:	61bb      	str	r3, [r7, #24]
        break;
 8008644:	e00c      	b.n	8008660 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008646:	f7fc feb9 	bl	80053bc <HAL_RCC_GetSysClockFreq>
 800864a:	61b8      	str	r0, [r7, #24]
        break;
 800864c:	e008      	b.n	8008660 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800864e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008652:	61bb      	str	r3, [r7, #24]
        break;
 8008654:	e004      	b.n	8008660 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008656:	2300      	movs	r3, #0
 8008658:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	77bb      	strb	r3, [r7, #30]
        break;
 800865e:	bf00      	nop
    }

    if (pclk != 0U)
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d018      	beq.n	8008698 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	085a      	lsrs	r2, r3, #1
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	441a      	add	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	fbb2 f3f3 	udiv	r3, r2, r3
 8008678:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	2b0f      	cmp	r3, #15
 800867e:	d909      	bls.n	8008694 <UART_SetConfig+0x4a0>
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008686:	d205      	bcs.n	8008694 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	b29a      	uxth	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	60da      	str	r2, [r3, #12]
 8008692:	e001      	b.n	8008698 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80086a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3720      	adds	r7, #32
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	40007c00 	.word	0x40007c00
 80086b4:	40023800 	.word	0x40023800
 80086b8:	00f42400 	.word	0x00f42400

080086bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c8:	f003 0301 	and.w	r3, r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00a      	beq.n	80086e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	430a      	orrs	r2, r1
 80086e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ea:	f003 0302 	and.w	r3, r3, #2
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00a      	beq.n	8008708 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	430a      	orrs	r2, r1
 8008706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870c:	f003 0304 	and.w	r3, r3, #4
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00a      	beq.n	800872a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	430a      	orrs	r2, r1
 8008728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872e:	f003 0308 	and.w	r3, r3, #8
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00a      	beq.n	800874c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	430a      	orrs	r2, r1
 800874a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008750:	f003 0310 	and.w	r3, r3, #16
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00a      	beq.n	800876e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	430a      	orrs	r2, r1
 800876c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008772:	f003 0320 	and.w	r3, r3, #32
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00a      	beq.n	8008790 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	430a      	orrs	r2, r1
 800878e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01a      	beq.n	80087d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	430a      	orrs	r2, r1
 80087b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087ba:	d10a      	bne.n	80087d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	430a      	orrs	r2, r1
 80087d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00a      	beq.n	80087f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	430a      	orrs	r2, r1
 80087f2:	605a      	str	r2, [r3, #4]
  }
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af02      	add	r7, sp, #8
 8008806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008810:	f7fa fdca 	bl	80033a8 <HAL_GetTick>
 8008814:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 0308 	and.w	r3, r3, #8
 8008820:	2b08      	cmp	r3, #8
 8008822:	d10e      	bne.n	8008842 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008824:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f831 	bl	800889a <UART_WaitOnFlagUntilTimeout>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d001      	beq.n	8008842 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e027      	b.n	8008892 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0304 	and.w	r3, r3, #4
 800884c:	2b04      	cmp	r3, #4
 800884e:	d10e      	bne.n	800886e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008850:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f81b 	bl	800889a <UART_WaitOnFlagUntilTimeout>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e011      	b.n	8008892 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2220      	movs	r2, #32
 8008872:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2220      	movs	r2, #32
 8008878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b09c      	sub	sp, #112	; 0x70
 800889e:	af00      	add	r7, sp, #0
 80088a0:	60f8      	str	r0, [r7, #12]
 80088a2:	60b9      	str	r1, [r7, #8]
 80088a4:	603b      	str	r3, [r7, #0]
 80088a6:	4613      	mov	r3, r2
 80088a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088aa:	e0a7      	b.n	80089fc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b2:	f000 80a3 	beq.w	80089fc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088b6:	f7fa fd77 	bl	80033a8 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d302      	bcc.n	80088cc <UART_WaitOnFlagUntilTimeout+0x32>
 80088c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d13f      	bne.n	800894c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088d4:	e853 3f00 	ldrex	r3, [r3]
 80088d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80088da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80088e0:	667b      	str	r3, [r7, #100]	; 0x64
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088f2:	e841 2300 	strex	r3, r2, [r1]
 80088f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80088f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1e6      	bne.n	80088cc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3308      	adds	r3, #8
 8008904:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008908:	e853 3f00 	ldrex	r3, [r3]
 800890c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800890e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008910:	f023 0301 	bic.w	r3, r3, #1
 8008914:	663b      	str	r3, [r7, #96]	; 0x60
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3308      	adds	r3, #8
 800891c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800891e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008920:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008922:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008926:	e841 2300 	strex	r3, r2, [r1]
 800892a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800892c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1e5      	bne.n	80088fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2220      	movs	r2, #32
 8008936:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2220      	movs	r2, #32
 800893c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008948:	2303      	movs	r3, #3
 800894a:	e068      	b.n	8008a1e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0304 	and.w	r3, r3, #4
 8008956:	2b00      	cmp	r3, #0
 8008958:	d050      	beq.n	80089fc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	69db      	ldr	r3, [r3, #28]
 8008960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008968:	d148      	bne.n	80089fc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008972:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897c:	e853 3f00 	ldrex	r3, [r3]
 8008980:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008984:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008988:	66fb      	str	r3, [r7, #108]	; 0x6c
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008992:	637b      	str	r3, [r7, #52]	; 0x34
 8008994:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008996:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800899a:	e841 2300 	strex	r3, r2, [r1]
 800899e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80089a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1e6      	bne.n	8008974 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3308      	adds	r3, #8
 80089ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	e853 3f00 	ldrex	r3, [r3]
 80089b4:	613b      	str	r3, [r7, #16]
   return(result);
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f023 0301 	bic.w	r3, r3, #1
 80089bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3308      	adds	r3, #8
 80089c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80089c6:	623a      	str	r2, [r7, #32]
 80089c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ca:	69f9      	ldr	r1, [r7, #28]
 80089cc:	6a3a      	ldr	r2, [r7, #32]
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1e5      	bne.n	80089a6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2220      	movs	r2, #32
 80089de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2220      	movs	r2, #32
 80089e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2220      	movs	r2, #32
 80089ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e010      	b.n	8008a1e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	69da      	ldr	r2, [r3, #28]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	4013      	ands	r3, r2
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	bf0c      	ite	eq
 8008a0c:	2301      	moveq	r3, #1
 8008a0e:	2300      	movne	r3, #0
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	461a      	mov	r2, r3
 8008a14:	79fb      	ldrb	r3, [r7, #7]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	f43f af48 	beq.w	80088ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3770      	adds	r7, #112	; 0x70
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <__cvt>:
 8008a26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a28:	ed2d 8b02 	vpush	{d8}
 8008a2c:	eeb0 8b40 	vmov.f64	d8, d0
 8008a30:	b085      	sub	sp, #20
 8008a32:	4617      	mov	r7, r2
 8008a34:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008a36:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008a38:	ee18 2a90 	vmov	r2, s17
 8008a3c:	f025 0520 	bic.w	r5, r5, #32
 8008a40:	2a00      	cmp	r2, #0
 8008a42:	bfb6      	itet	lt
 8008a44:	222d      	movlt	r2, #45	; 0x2d
 8008a46:	2200      	movge	r2, #0
 8008a48:	eeb1 8b40 	vneglt.f64	d8, d0
 8008a4c:	2d46      	cmp	r5, #70	; 0x46
 8008a4e:	460c      	mov	r4, r1
 8008a50:	701a      	strb	r2, [r3, #0]
 8008a52:	d004      	beq.n	8008a5e <__cvt+0x38>
 8008a54:	2d45      	cmp	r5, #69	; 0x45
 8008a56:	d100      	bne.n	8008a5a <__cvt+0x34>
 8008a58:	3401      	adds	r4, #1
 8008a5a:	2102      	movs	r1, #2
 8008a5c:	e000      	b.n	8008a60 <__cvt+0x3a>
 8008a5e:	2103      	movs	r1, #3
 8008a60:	ab03      	add	r3, sp, #12
 8008a62:	9301      	str	r3, [sp, #4]
 8008a64:	ab02      	add	r3, sp, #8
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	4622      	mov	r2, r4
 8008a6a:	4633      	mov	r3, r6
 8008a6c:	eeb0 0b48 	vmov.f64	d0, d8
 8008a70:	f000 fe42 	bl	80096f8 <_dtoa_r>
 8008a74:	2d47      	cmp	r5, #71	; 0x47
 8008a76:	d101      	bne.n	8008a7c <__cvt+0x56>
 8008a78:	07fb      	lsls	r3, r7, #31
 8008a7a:	d51a      	bpl.n	8008ab2 <__cvt+0x8c>
 8008a7c:	2d46      	cmp	r5, #70	; 0x46
 8008a7e:	eb00 0204 	add.w	r2, r0, r4
 8008a82:	d10c      	bne.n	8008a9e <__cvt+0x78>
 8008a84:	7803      	ldrb	r3, [r0, #0]
 8008a86:	2b30      	cmp	r3, #48	; 0x30
 8008a88:	d107      	bne.n	8008a9a <__cvt+0x74>
 8008a8a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a92:	bf1c      	itt	ne
 8008a94:	f1c4 0401 	rsbne	r4, r4, #1
 8008a98:	6034      	strne	r4, [r6, #0]
 8008a9a:	6833      	ldr	r3, [r6, #0]
 8008a9c:	441a      	add	r2, r3
 8008a9e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa6:	bf08      	it	eq
 8008aa8:	9203      	streq	r2, [sp, #12]
 8008aaa:	2130      	movs	r1, #48	; 0x30
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d307      	bcc.n	8008ac2 <__cvt+0x9c>
 8008ab2:	9b03      	ldr	r3, [sp, #12]
 8008ab4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ab6:	1a1b      	subs	r3, r3, r0
 8008ab8:	6013      	str	r3, [r2, #0]
 8008aba:	b005      	add	sp, #20
 8008abc:	ecbd 8b02 	vpop	{d8}
 8008ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ac2:	1c5c      	adds	r4, r3, #1
 8008ac4:	9403      	str	r4, [sp, #12]
 8008ac6:	7019      	strb	r1, [r3, #0]
 8008ac8:	e7f0      	b.n	8008aac <__cvt+0x86>

08008aca <__exponent>:
 8008aca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008acc:	4603      	mov	r3, r0
 8008ace:	2900      	cmp	r1, #0
 8008ad0:	bfb8      	it	lt
 8008ad2:	4249      	neglt	r1, r1
 8008ad4:	f803 2b02 	strb.w	r2, [r3], #2
 8008ad8:	bfb4      	ite	lt
 8008ada:	222d      	movlt	r2, #45	; 0x2d
 8008adc:	222b      	movge	r2, #43	; 0x2b
 8008ade:	2909      	cmp	r1, #9
 8008ae0:	7042      	strb	r2, [r0, #1]
 8008ae2:	dd2a      	ble.n	8008b3a <__exponent+0x70>
 8008ae4:	f10d 0207 	add.w	r2, sp, #7
 8008ae8:	4617      	mov	r7, r2
 8008aea:	260a      	movs	r6, #10
 8008aec:	4694      	mov	ip, r2
 8008aee:	fb91 f5f6 	sdiv	r5, r1, r6
 8008af2:	fb06 1415 	mls	r4, r6, r5, r1
 8008af6:	3430      	adds	r4, #48	; 0x30
 8008af8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008afc:	460c      	mov	r4, r1
 8008afe:	2c63      	cmp	r4, #99	; 0x63
 8008b00:	f102 32ff 	add.w	r2, r2, #4294967295
 8008b04:	4629      	mov	r1, r5
 8008b06:	dcf1      	bgt.n	8008aec <__exponent+0x22>
 8008b08:	3130      	adds	r1, #48	; 0x30
 8008b0a:	f1ac 0402 	sub.w	r4, ip, #2
 8008b0e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008b12:	1c41      	adds	r1, r0, #1
 8008b14:	4622      	mov	r2, r4
 8008b16:	42ba      	cmp	r2, r7
 8008b18:	d30a      	bcc.n	8008b30 <__exponent+0x66>
 8008b1a:	f10d 0209 	add.w	r2, sp, #9
 8008b1e:	eba2 020c 	sub.w	r2, r2, ip
 8008b22:	42bc      	cmp	r4, r7
 8008b24:	bf88      	it	hi
 8008b26:	2200      	movhi	r2, #0
 8008b28:	4413      	add	r3, r2
 8008b2a:	1a18      	subs	r0, r3, r0
 8008b2c:	b003      	add	sp, #12
 8008b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b30:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008b34:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008b38:	e7ed      	b.n	8008b16 <__exponent+0x4c>
 8008b3a:	2330      	movs	r3, #48	; 0x30
 8008b3c:	3130      	adds	r1, #48	; 0x30
 8008b3e:	7083      	strb	r3, [r0, #2]
 8008b40:	70c1      	strb	r1, [r0, #3]
 8008b42:	1d03      	adds	r3, r0, #4
 8008b44:	e7f1      	b.n	8008b2a <__exponent+0x60>
	...

08008b48 <_printf_float>:
 8008b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4c:	b08b      	sub	sp, #44	; 0x2c
 8008b4e:	460c      	mov	r4, r1
 8008b50:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008b54:	4616      	mov	r6, r2
 8008b56:	461f      	mov	r7, r3
 8008b58:	4605      	mov	r5, r0
 8008b5a:	f000 fccd 	bl	80094f8 <_localeconv_r>
 8008b5e:	f8d0 b000 	ldr.w	fp, [r0]
 8008b62:	4658      	mov	r0, fp
 8008b64:	f7f7 fbbc 	bl	80002e0 <strlen>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	9308      	str	r3, [sp, #32]
 8008b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b70:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008b74:	6822      	ldr	r2, [r4, #0]
 8008b76:	3307      	adds	r3, #7
 8008b78:	f023 0307 	bic.w	r3, r3, #7
 8008b7c:	f103 0108 	add.w	r1, r3, #8
 8008b80:	f8c8 1000 	str.w	r1, [r8]
 8008b84:	ed93 0b00 	vldr	d0, [r3]
 8008b88:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8008de8 <_printf_float+0x2a0>
 8008b8c:	eeb0 7bc0 	vabs.f64	d7, d0
 8008b90:	eeb4 7b46 	vcmp.f64	d7, d6
 8008b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b98:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8008b9c:	4682      	mov	sl, r0
 8008b9e:	dd24      	ble.n	8008bea <_printf_float+0xa2>
 8008ba0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba8:	d502      	bpl.n	8008bb0 <_printf_float+0x68>
 8008baa:	232d      	movs	r3, #45	; 0x2d
 8008bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bb0:	498f      	ldr	r1, [pc, #572]	; (8008df0 <_printf_float+0x2a8>)
 8008bb2:	4b90      	ldr	r3, [pc, #576]	; (8008df4 <_printf_float+0x2ac>)
 8008bb4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008bb8:	bf94      	ite	ls
 8008bba:	4688      	movls	r8, r1
 8008bbc:	4698      	movhi	r8, r3
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	6123      	str	r3, [r4, #16]
 8008bc2:	f022 0204 	bic.w	r2, r2, #4
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	6022      	str	r2, [r4, #0]
 8008bca:	9304      	str	r3, [sp, #16]
 8008bcc:	9700      	str	r7, [sp, #0]
 8008bce:	4633      	mov	r3, r6
 8008bd0:	aa09      	add	r2, sp, #36	; 0x24
 8008bd2:	4621      	mov	r1, r4
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	f000 f9d1 	bl	8008f7c <_printf_common>
 8008bda:	3001      	adds	r0, #1
 8008bdc:	f040 808a 	bne.w	8008cf4 <_printf_float+0x1ac>
 8008be0:	f04f 30ff 	mov.w	r0, #4294967295
 8008be4:	b00b      	add	sp, #44	; 0x2c
 8008be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bea:	eeb4 0b40 	vcmp.f64	d0, d0
 8008bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf2:	d709      	bvc.n	8008c08 <_printf_float+0xc0>
 8008bf4:	ee10 3a90 	vmov	r3, s1
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	bfbc      	itt	lt
 8008bfc:	232d      	movlt	r3, #45	; 0x2d
 8008bfe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c02:	497d      	ldr	r1, [pc, #500]	; (8008df8 <_printf_float+0x2b0>)
 8008c04:	4b7d      	ldr	r3, [pc, #500]	; (8008dfc <_printf_float+0x2b4>)
 8008c06:	e7d5      	b.n	8008bb4 <_printf_float+0x6c>
 8008c08:	6863      	ldr	r3, [r4, #4]
 8008c0a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008c0e:	9104      	str	r1, [sp, #16]
 8008c10:	1c59      	adds	r1, r3, #1
 8008c12:	d13c      	bne.n	8008c8e <_printf_float+0x146>
 8008c14:	2306      	movs	r3, #6
 8008c16:	6063      	str	r3, [r4, #4]
 8008c18:	2300      	movs	r3, #0
 8008c1a:	9303      	str	r3, [sp, #12]
 8008c1c:	ab08      	add	r3, sp, #32
 8008c1e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008c22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c26:	ab07      	add	r3, sp, #28
 8008c28:	6861      	ldr	r1, [r4, #4]
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	6022      	str	r2, [r4, #0]
 8008c2e:	f10d 031b 	add.w	r3, sp, #27
 8008c32:	4628      	mov	r0, r5
 8008c34:	f7ff fef7 	bl	8008a26 <__cvt>
 8008c38:	9b04      	ldr	r3, [sp, #16]
 8008c3a:	9907      	ldr	r1, [sp, #28]
 8008c3c:	2b47      	cmp	r3, #71	; 0x47
 8008c3e:	4680      	mov	r8, r0
 8008c40:	d108      	bne.n	8008c54 <_printf_float+0x10c>
 8008c42:	1cc8      	adds	r0, r1, #3
 8008c44:	db02      	blt.n	8008c4c <_printf_float+0x104>
 8008c46:	6863      	ldr	r3, [r4, #4]
 8008c48:	4299      	cmp	r1, r3
 8008c4a:	dd41      	ble.n	8008cd0 <_printf_float+0x188>
 8008c4c:	f1a9 0902 	sub.w	r9, r9, #2
 8008c50:	fa5f f989 	uxtb.w	r9, r9
 8008c54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008c58:	d820      	bhi.n	8008c9c <_printf_float+0x154>
 8008c5a:	3901      	subs	r1, #1
 8008c5c:	464a      	mov	r2, r9
 8008c5e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c62:	9107      	str	r1, [sp, #28]
 8008c64:	f7ff ff31 	bl	8008aca <__exponent>
 8008c68:	9a08      	ldr	r2, [sp, #32]
 8008c6a:	9004      	str	r0, [sp, #16]
 8008c6c:	1813      	adds	r3, r2, r0
 8008c6e:	2a01      	cmp	r2, #1
 8008c70:	6123      	str	r3, [r4, #16]
 8008c72:	dc02      	bgt.n	8008c7a <_printf_float+0x132>
 8008c74:	6822      	ldr	r2, [r4, #0]
 8008c76:	07d2      	lsls	r2, r2, #31
 8008c78:	d501      	bpl.n	8008c7e <_printf_float+0x136>
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	6123      	str	r3, [r4, #16]
 8008c7e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d0a2      	beq.n	8008bcc <_printf_float+0x84>
 8008c86:	232d      	movs	r3, #45	; 0x2d
 8008c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c8c:	e79e      	b.n	8008bcc <_printf_float+0x84>
 8008c8e:	9904      	ldr	r1, [sp, #16]
 8008c90:	2947      	cmp	r1, #71	; 0x47
 8008c92:	d1c1      	bne.n	8008c18 <_printf_float+0xd0>
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1bf      	bne.n	8008c18 <_printf_float+0xd0>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e7bc      	b.n	8008c16 <_printf_float+0xce>
 8008c9c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008ca0:	d118      	bne.n	8008cd4 <_printf_float+0x18c>
 8008ca2:	2900      	cmp	r1, #0
 8008ca4:	6863      	ldr	r3, [r4, #4]
 8008ca6:	dd0b      	ble.n	8008cc0 <_printf_float+0x178>
 8008ca8:	6121      	str	r1, [r4, #16]
 8008caa:	b913      	cbnz	r3, 8008cb2 <_printf_float+0x16a>
 8008cac:	6822      	ldr	r2, [r4, #0]
 8008cae:	07d0      	lsls	r0, r2, #31
 8008cb0:	d502      	bpl.n	8008cb8 <_printf_float+0x170>
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	440b      	add	r3, r1
 8008cb6:	6123      	str	r3, [r4, #16]
 8008cb8:	2300      	movs	r3, #0
 8008cba:	65a1      	str	r1, [r4, #88]	; 0x58
 8008cbc:	9304      	str	r3, [sp, #16]
 8008cbe:	e7de      	b.n	8008c7e <_printf_float+0x136>
 8008cc0:	b913      	cbnz	r3, 8008cc8 <_printf_float+0x180>
 8008cc2:	6822      	ldr	r2, [r4, #0]
 8008cc4:	07d2      	lsls	r2, r2, #31
 8008cc6:	d501      	bpl.n	8008ccc <_printf_float+0x184>
 8008cc8:	3302      	adds	r3, #2
 8008cca:	e7f4      	b.n	8008cb6 <_printf_float+0x16e>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e7f2      	b.n	8008cb6 <_printf_float+0x16e>
 8008cd0:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008cd4:	9b08      	ldr	r3, [sp, #32]
 8008cd6:	4299      	cmp	r1, r3
 8008cd8:	db05      	blt.n	8008ce6 <_printf_float+0x19e>
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	6121      	str	r1, [r4, #16]
 8008cde:	07d8      	lsls	r0, r3, #31
 8008ce0:	d5ea      	bpl.n	8008cb8 <_printf_float+0x170>
 8008ce2:	1c4b      	adds	r3, r1, #1
 8008ce4:	e7e7      	b.n	8008cb6 <_printf_float+0x16e>
 8008ce6:	2900      	cmp	r1, #0
 8008ce8:	bfd4      	ite	le
 8008cea:	f1c1 0202 	rsble	r2, r1, #2
 8008cee:	2201      	movgt	r2, #1
 8008cf0:	4413      	add	r3, r2
 8008cf2:	e7e0      	b.n	8008cb6 <_printf_float+0x16e>
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	055a      	lsls	r2, r3, #21
 8008cf8:	d407      	bmi.n	8008d0a <_printf_float+0x1c2>
 8008cfa:	6923      	ldr	r3, [r4, #16]
 8008cfc:	4642      	mov	r2, r8
 8008cfe:	4631      	mov	r1, r6
 8008d00:	4628      	mov	r0, r5
 8008d02:	47b8      	blx	r7
 8008d04:	3001      	adds	r0, #1
 8008d06:	d12a      	bne.n	8008d5e <_printf_float+0x216>
 8008d08:	e76a      	b.n	8008be0 <_printf_float+0x98>
 8008d0a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008d0e:	f240 80e0 	bls.w	8008ed2 <_printf_float+0x38a>
 8008d12:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008d16:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d1e:	d133      	bne.n	8008d88 <_printf_float+0x240>
 8008d20:	4a37      	ldr	r2, [pc, #220]	; (8008e00 <_printf_float+0x2b8>)
 8008d22:	2301      	movs	r3, #1
 8008d24:	4631      	mov	r1, r6
 8008d26:	4628      	mov	r0, r5
 8008d28:	47b8      	blx	r7
 8008d2a:	3001      	adds	r0, #1
 8008d2c:	f43f af58 	beq.w	8008be0 <_printf_float+0x98>
 8008d30:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	db02      	blt.n	8008d3e <_printf_float+0x1f6>
 8008d38:	6823      	ldr	r3, [r4, #0]
 8008d3a:	07d8      	lsls	r0, r3, #31
 8008d3c:	d50f      	bpl.n	8008d5e <_printf_float+0x216>
 8008d3e:	4653      	mov	r3, sl
 8008d40:	465a      	mov	r2, fp
 8008d42:	4631      	mov	r1, r6
 8008d44:	4628      	mov	r0, r5
 8008d46:	47b8      	blx	r7
 8008d48:	3001      	adds	r0, #1
 8008d4a:	f43f af49 	beq.w	8008be0 <_printf_float+0x98>
 8008d4e:	f04f 0800 	mov.w	r8, #0
 8008d52:	f104 091a 	add.w	r9, r4, #26
 8008d56:	9b08      	ldr	r3, [sp, #32]
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	4543      	cmp	r3, r8
 8008d5c:	dc09      	bgt.n	8008d72 <_printf_float+0x22a>
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	079b      	lsls	r3, r3, #30
 8008d62:	f100 8106 	bmi.w	8008f72 <_printf_float+0x42a>
 8008d66:	68e0      	ldr	r0, [r4, #12]
 8008d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d6a:	4298      	cmp	r0, r3
 8008d6c:	bfb8      	it	lt
 8008d6e:	4618      	movlt	r0, r3
 8008d70:	e738      	b.n	8008be4 <_printf_float+0x9c>
 8008d72:	2301      	movs	r3, #1
 8008d74:	464a      	mov	r2, r9
 8008d76:	4631      	mov	r1, r6
 8008d78:	4628      	mov	r0, r5
 8008d7a:	47b8      	blx	r7
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	f43f af2f 	beq.w	8008be0 <_printf_float+0x98>
 8008d82:	f108 0801 	add.w	r8, r8, #1
 8008d86:	e7e6      	b.n	8008d56 <_printf_float+0x20e>
 8008d88:	9b07      	ldr	r3, [sp, #28]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	dc3a      	bgt.n	8008e04 <_printf_float+0x2bc>
 8008d8e:	4a1c      	ldr	r2, [pc, #112]	; (8008e00 <_printf_float+0x2b8>)
 8008d90:	2301      	movs	r3, #1
 8008d92:	4631      	mov	r1, r6
 8008d94:	4628      	mov	r0, r5
 8008d96:	47b8      	blx	r7
 8008d98:	3001      	adds	r0, #1
 8008d9a:	f43f af21 	beq.w	8008be0 <_printf_float+0x98>
 8008d9e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	d102      	bne.n	8008dac <_printf_float+0x264>
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	07d9      	lsls	r1, r3, #31
 8008daa:	d5d8      	bpl.n	8008d5e <_printf_float+0x216>
 8008dac:	4653      	mov	r3, sl
 8008dae:	465a      	mov	r2, fp
 8008db0:	4631      	mov	r1, r6
 8008db2:	4628      	mov	r0, r5
 8008db4:	47b8      	blx	r7
 8008db6:	3001      	adds	r0, #1
 8008db8:	f43f af12 	beq.w	8008be0 <_printf_float+0x98>
 8008dbc:	f04f 0900 	mov.w	r9, #0
 8008dc0:	f104 0a1a 	add.w	sl, r4, #26
 8008dc4:	9b07      	ldr	r3, [sp, #28]
 8008dc6:	425b      	negs	r3, r3
 8008dc8:	454b      	cmp	r3, r9
 8008dca:	dc01      	bgt.n	8008dd0 <_printf_float+0x288>
 8008dcc:	9b08      	ldr	r3, [sp, #32]
 8008dce:	e795      	b.n	8008cfc <_printf_float+0x1b4>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	4652      	mov	r2, sl
 8008dd4:	4631      	mov	r1, r6
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	47b8      	blx	r7
 8008dda:	3001      	adds	r0, #1
 8008ddc:	f43f af00 	beq.w	8008be0 <_printf_float+0x98>
 8008de0:	f109 0901 	add.w	r9, r9, #1
 8008de4:	e7ee      	b.n	8008dc4 <_printf_float+0x27c>
 8008de6:	bf00      	nop
 8008de8:	ffffffff 	.word	0xffffffff
 8008dec:	7fefffff 	.word	0x7fefffff
 8008df0:	08031cd4 	.word	0x08031cd4
 8008df4:	08031cd8 	.word	0x08031cd8
 8008df8:	08031cdc 	.word	0x08031cdc
 8008dfc:	08031ce0 	.word	0x08031ce0
 8008e00:	08031ce4 	.word	0x08031ce4
 8008e04:	9a08      	ldr	r2, [sp, #32]
 8008e06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	bfa8      	it	ge
 8008e0c:	461a      	movge	r2, r3
 8008e0e:	2a00      	cmp	r2, #0
 8008e10:	4691      	mov	r9, r2
 8008e12:	dc38      	bgt.n	8008e86 <_printf_float+0x33e>
 8008e14:	2300      	movs	r3, #0
 8008e16:	9305      	str	r3, [sp, #20]
 8008e18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e1c:	f104 021a 	add.w	r2, r4, #26
 8008e20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e22:	9905      	ldr	r1, [sp, #20]
 8008e24:	9304      	str	r3, [sp, #16]
 8008e26:	eba3 0309 	sub.w	r3, r3, r9
 8008e2a:	428b      	cmp	r3, r1
 8008e2c:	dc33      	bgt.n	8008e96 <_printf_float+0x34e>
 8008e2e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	db3c      	blt.n	8008eb0 <_printf_float+0x368>
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	07da      	lsls	r2, r3, #31
 8008e3a:	d439      	bmi.n	8008eb0 <_printf_float+0x368>
 8008e3c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8008e40:	eba2 0903 	sub.w	r9, r2, r3
 8008e44:	9b04      	ldr	r3, [sp, #16]
 8008e46:	1ad2      	subs	r2, r2, r3
 8008e48:	4591      	cmp	r9, r2
 8008e4a:	bfa8      	it	ge
 8008e4c:	4691      	movge	r9, r2
 8008e4e:	f1b9 0f00 	cmp.w	r9, #0
 8008e52:	dc35      	bgt.n	8008ec0 <_printf_float+0x378>
 8008e54:	f04f 0800 	mov.w	r8, #0
 8008e58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e5c:	f104 0a1a 	add.w	sl, r4, #26
 8008e60:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008e64:	1a9b      	subs	r3, r3, r2
 8008e66:	eba3 0309 	sub.w	r3, r3, r9
 8008e6a:	4543      	cmp	r3, r8
 8008e6c:	f77f af77 	ble.w	8008d5e <_printf_float+0x216>
 8008e70:	2301      	movs	r3, #1
 8008e72:	4652      	mov	r2, sl
 8008e74:	4631      	mov	r1, r6
 8008e76:	4628      	mov	r0, r5
 8008e78:	47b8      	blx	r7
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	f43f aeb0 	beq.w	8008be0 <_printf_float+0x98>
 8008e80:	f108 0801 	add.w	r8, r8, #1
 8008e84:	e7ec      	b.n	8008e60 <_printf_float+0x318>
 8008e86:	4613      	mov	r3, r2
 8008e88:	4631      	mov	r1, r6
 8008e8a:	4642      	mov	r2, r8
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	47b8      	blx	r7
 8008e90:	3001      	adds	r0, #1
 8008e92:	d1bf      	bne.n	8008e14 <_printf_float+0x2cc>
 8008e94:	e6a4      	b.n	8008be0 <_printf_float+0x98>
 8008e96:	2301      	movs	r3, #1
 8008e98:	4631      	mov	r1, r6
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	9204      	str	r2, [sp, #16]
 8008e9e:	47b8      	blx	r7
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	f43f ae9d 	beq.w	8008be0 <_printf_float+0x98>
 8008ea6:	9b05      	ldr	r3, [sp, #20]
 8008ea8:	9a04      	ldr	r2, [sp, #16]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	9305      	str	r3, [sp, #20]
 8008eae:	e7b7      	b.n	8008e20 <_printf_float+0x2d8>
 8008eb0:	4653      	mov	r3, sl
 8008eb2:	465a      	mov	r2, fp
 8008eb4:	4631      	mov	r1, r6
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	47b8      	blx	r7
 8008eba:	3001      	adds	r0, #1
 8008ebc:	d1be      	bne.n	8008e3c <_printf_float+0x2f4>
 8008ebe:	e68f      	b.n	8008be0 <_printf_float+0x98>
 8008ec0:	9a04      	ldr	r2, [sp, #16]
 8008ec2:	464b      	mov	r3, r9
 8008ec4:	4442      	add	r2, r8
 8008ec6:	4631      	mov	r1, r6
 8008ec8:	4628      	mov	r0, r5
 8008eca:	47b8      	blx	r7
 8008ecc:	3001      	adds	r0, #1
 8008ece:	d1c1      	bne.n	8008e54 <_printf_float+0x30c>
 8008ed0:	e686      	b.n	8008be0 <_printf_float+0x98>
 8008ed2:	9a08      	ldr	r2, [sp, #32]
 8008ed4:	2a01      	cmp	r2, #1
 8008ed6:	dc01      	bgt.n	8008edc <_printf_float+0x394>
 8008ed8:	07db      	lsls	r3, r3, #31
 8008eda:	d537      	bpl.n	8008f4c <_printf_float+0x404>
 8008edc:	2301      	movs	r3, #1
 8008ede:	4642      	mov	r2, r8
 8008ee0:	4631      	mov	r1, r6
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	47b8      	blx	r7
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	f43f ae7a 	beq.w	8008be0 <_printf_float+0x98>
 8008eec:	4653      	mov	r3, sl
 8008eee:	465a      	mov	r2, fp
 8008ef0:	4631      	mov	r1, r6
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	47b8      	blx	r7
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	f43f ae72 	beq.w	8008be0 <_printf_float+0x98>
 8008efc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008f00:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f08:	9b08      	ldr	r3, [sp, #32]
 8008f0a:	d01a      	beq.n	8008f42 <_printf_float+0x3fa>
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	f108 0201 	add.w	r2, r8, #1
 8008f12:	4631      	mov	r1, r6
 8008f14:	4628      	mov	r0, r5
 8008f16:	47b8      	blx	r7
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d10e      	bne.n	8008f3a <_printf_float+0x3f2>
 8008f1c:	e660      	b.n	8008be0 <_printf_float+0x98>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	464a      	mov	r2, r9
 8008f22:	4631      	mov	r1, r6
 8008f24:	4628      	mov	r0, r5
 8008f26:	47b8      	blx	r7
 8008f28:	3001      	adds	r0, #1
 8008f2a:	f43f ae59 	beq.w	8008be0 <_printf_float+0x98>
 8008f2e:	f108 0801 	add.w	r8, r8, #1
 8008f32:	9b08      	ldr	r3, [sp, #32]
 8008f34:	3b01      	subs	r3, #1
 8008f36:	4543      	cmp	r3, r8
 8008f38:	dcf1      	bgt.n	8008f1e <_printf_float+0x3d6>
 8008f3a:	9b04      	ldr	r3, [sp, #16]
 8008f3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f40:	e6dd      	b.n	8008cfe <_printf_float+0x1b6>
 8008f42:	f04f 0800 	mov.w	r8, #0
 8008f46:	f104 091a 	add.w	r9, r4, #26
 8008f4a:	e7f2      	b.n	8008f32 <_printf_float+0x3ea>
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	4642      	mov	r2, r8
 8008f50:	e7df      	b.n	8008f12 <_printf_float+0x3ca>
 8008f52:	2301      	movs	r3, #1
 8008f54:	464a      	mov	r2, r9
 8008f56:	4631      	mov	r1, r6
 8008f58:	4628      	mov	r0, r5
 8008f5a:	47b8      	blx	r7
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	f43f ae3f 	beq.w	8008be0 <_printf_float+0x98>
 8008f62:	f108 0801 	add.w	r8, r8, #1
 8008f66:	68e3      	ldr	r3, [r4, #12]
 8008f68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f6a:	1a5b      	subs	r3, r3, r1
 8008f6c:	4543      	cmp	r3, r8
 8008f6e:	dcf0      	bgt.n	8008f52 <_printf_float+0x40a>
 8008f70:	e6f9      	b.n	8008d66 <_printf_float+0x21e>
 8008f72:	f04f 0800 	mov.w	r8, #0
 8008f76:	f104 0919 	add.w	r9, r4, #25
 8008f7a:	e7f4      	b.n	8008f66 <_printf_float+0x41e>

08008f7c <_printf_common>:
 8008f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f80:	4616      	mov	r6, r2
 8008f82:	4699      	mov	r9, r3
 8008f84:	688a      	ldr	r2, [r1, #8]
 8008f86:	690b      	ldr	r3, [r1, #16]
 8008f88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	bfb8      	it	lt
 8008f90:	4613      	movlt	r3, r2
 8008f92:	6033      	str	r3, [r6, #0]
 8008f94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f98:	4607      	mov	r7, r0
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	b10a      	cbz	r2, 8008fa2 <_printf_common+0x26>
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	6033      	str	r3, [r6, #0]
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	0699      	lsls	r1, r3, #26
 8008fa6:	bf42      	ittt	mi
 8008fa8:	6833      	ldrmi	r3, [r6, #0]
 8008faa:	3302      	addmi	r3, #2
 8008fac:	6033      	strmi	r3, [r6, #0]
 8008fae:	6825      	ldr	r5, [r4, #0]
 8008fb0:	f015 0506 	ands.w	r5, r5, #6
 8008fb4:	d106      	bne.n	8008fc4 <_printf_common+0x48>
 8008fb6:	f104 0a19 	add.w	sl, r4, #25
 8008fba:	68e3      	ldr	r3, [r4, #12]
 8008fbc:	6832      	ldr	r2, [r6, #0]
 8008fbe:	1a9b      	subs	r3, r3, r2
 8008fc0:	42ab      	cmp	r3, r5
 8008fc2:	dc26      	bgt.n	8009012 <_printf_common+0x96>
 8008fc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fc8:	1e13      	subs	r3, r2, #0
 8008fca:	6822      	ldr	r2, [r4, #0]
 8008fcc:	bf18      	it	ne
 8008fce:	2301      	movne	r3, #1
 8008fd0:	0692      	lsls	r2, r2, #26
 8008fd2:	d42b      	bmi.n	800902c <_printf_common+0xb0>
 8008fd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fd8:	4649      	mov	r1, r9
 8008fda:	4638      	mov	r0, r7
 8008fdc:	47c0      	blx	r8
 8008fde:	3001      	adds	r0, #1
 8008fe0:	d01e      	beq.n	8009020 <_printf_common+0xa4>
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	6922      	ldr	r2, [r4, #16]
 8008fe6:	f003 0306 	and.w	r3, r3, #6
 8008fea:	2b04      	cmp	r3, #4
 8008fec:	bf02      	ittt	eq
 8008fee:	68e5      	ldreq	r5, [r4, #12]
 8008ff0:	6833      	ldreq	r3, [r6, #0]
 8008ff2:	1aed      	subeq	r5, r5, r3
 8008ff4:	68a3      	ldr	r3, [r4, #8]
 8008ff6:	bf0c      	ite	eq
 8008ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ffc:	2500      	movne	r5, #0
 8008ffe:	4293      	cmp	r3, r2
 8009000:	bfc4      	itt	gt
 8009002:	1a9b      	subgt	r3, r3, r2
 8009004:	18ed      	addgt	r5, r5, r3
 8009006:	2600      	movs	r6, #0
 8009008:	341a      	adds	r4, #26
 800900a:	42b5      	cmp	r5, r6
 800900c:	d11a      	bne.n	8009044 <_printf_common+0xc8>
 800900e:	2000      	movs	r0, #0
 8009010:	e008      	b.n	8009024 <_printf_common+0xa8>
 8009012:	2301      	movs	r3, #1
 8009014:	4652      	mov	r2, sl
 8009016:	4649      	mov	r1, r9
 8009018:	4638      	mov	r0, r7
 800901a:	47c0      	blx	r8
 800901c:	3001      	adds	r0, #1
 800901e:	d103      	bne.n	8009028 <_printf_common+0xac>
 8009020:	f04f 30ff 	mov.w	r0, #4294967295
 8009024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009028:	3501      	adds	r5, #1
 800902a:	e7c6      	b.n	8008fba <_printf_common+0x3e>
 800902c:	18e1      	adds	r1, r4, r3
 800902e:	1c5a      	adds	r2, r3, #1
 8009030:	2030      	movs	r0, #48	; 0x30
 8009032:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009036:	4422      	add	r2, r4
 8009038:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800903c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009040:	3302      	adds	r3, #2
 8009042:	e7c7      	b.n	8008fd4 <_printf_common+0x58>
 8009044:	2301      	movs	r3, #1
 8009046:	4622      	mov	r2, r4
 8009048:	4649      	mov	r1, r9
 800904a:	4638      	mov	r0, r7
 800904c:	47c0      	blx	r8
 800904e:	3001      	adds	r0, #1
 8009050:	d0e6      	beq.n	8009020 <_printf_common+0xa4>
 8009052:	3601      	adds	r6, #1
 8009054:	e7d9      	b.n	800900a <_printf_common+0x8e>
	...

08009058 <_printf_i>:
 8009058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800905c:	7e0f      	ldrb	r7, [r1, #24]
 800905e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009060:	2f78      	cmp	r7, #120	; 0x78
 8009062:	4691      	mov	r9, r2
 8009064:	4680      	mov	r8, r0
 8009066:	460c      	mov	r4, r1
 8009068:	469a      	mov	sl, r3
 800906a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800906e:	d807      	bhi.n	8009080 <_printf_i+0x28>
 8009070:	2f62      	cmp	r7, #98	; 0x62
 8009072:	d80a      	bhi.n	800908a <_printf_i+0x32>
 8009074:	2f00      	cmp	r7, #0
 8009076:	f000 80d4 	beq.w	8009222 <_printf_i+0x1ca>
 800907a:	2f58      	cmp	r7, #88	; 0x58
 800907c:	f000 80c0 	beq.w	8009200 <_printf_i+0x1a8>
 8009080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009084:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009088:	e03a      	b.n	8009100 <_printf_i+0xa8>
 800908a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800908e:	2b15      	cmp	r3, #21
 8009090:	d8f6      	bhi.n	8009080 <_printf_i+0x28>
 8009092:	a101      	add	r1, pc, #4	; (adr r1, 8009098 <_printf_i+0x40>)
 8009094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009098:	080090f1 	.word	0x080090f1
 800909c:	08009105 	.word	0x08009105
 80090a0:	08009081 	.word	0x08009081
 80090a4:	08009081 	.word	0x08009081
 80090a8:	08009081 	.word	0x08009081
 80090ac:	08009081 	.word	0x08009081
 80090b0:	08009105 	.word	0x08009105
 80090b4:	08009081 	.word	0x08009081
 80090b8:	08009081 	.word	0x08009081
 80090bc:	08009081 	.word	0x08009081
 80090c0:	08009081 	.word	0x08009081
 80090c4:	08009209 	.word	0x08009209
 80090c8:	08009131 	.word	0x08009131
 80090cc:	080091c3 	.word	0x080091c3
 80090d0:	08009081 	.word	0x08009081
 80090d4:	08009081 	.word	0x08009081
 80090d8:	0800922b 	.word	0x0800922b
 80090dc:	08009081 	.word	0x08009081
 80090e0:	08009131 	.word	0x08009131
 80090e4:	08009081 	.word	0x08009081
 80090e8:	08009081 	.word	0x08009081
 80090ec:	080091cb 	.word	0x080091cb
 80090f0:	682b      	ldr	r3, [r5, #0]
 80090f2:	1d1a      	adds	r2, r3, #4
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	602a      	str	r2, [r5, #0]
 80090f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009100:	2301      	movs	r3, #1
 8009102:	e09f      	b.n	8009244 <_printf_i+0x1ec>
 8009104:	6820      	ldr	r0, [r4, #0]
 8009106:	682b      	ldr	r3, [r5, #0]
 8009108:	0607      	lsls	r7, r0, #24
 800910a:	f103 0104 	add.w	r1, r3, #4
 800910e:	6029      	str	r1, [r5, #0]
 8009110:	d501      	bpl.n	8009116 <_printf_i+0xbe>
 8009112:	681e      	ldr	r6, [r3, #0]
 8009114:	e003      	b.n	800911e <_printf_i+0xc6>
 8009116:	0646      	lsls	r6, r0, #25
 8009118:	d5fb      	bpl.n	8009112 <_printf_i+0xba>
 800911a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800911e:	2e00      	cmp	r6, #0
 8009120:	da03      	bge.n	800912a <_printf_i+0xd2>
 8009122:	232d      	movs	r3, #45	; 0x2d
 8009124:	4276      	negs	r6, r6
 8009126:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800912a:	485a      	ldr	r0, [pc, #360]	; (8009294 <_printf_i+0x23c>)
 800912c:	230a      	movs	r3, #10
 800912e:	e012      	b.n	8009156 <_printf_i+0xfe>
 8009130:	682b      	ldr	r3, [r5, #0]
 8009132:	6820      	ldr	r0, [r4, #0]
 8009134:	1d19      	adds	r1, r3, #4
 8009136:	6029      	str	r1, [r5, #0]
 8009138:	0605      	lsls	r5, r0, #24
 800913a:	d501      	bpl.n	8009140 <_printf_i+0xe8>
 800913c:	681e      	ldr	r6, [r3, #0]
 800913e:	e002      	b.n	8009146 <_printf_i+0xee>
 8009140:	0641      	lsls	r1, r0, #25
 8009142:	d5fb      	bpl.n	800913c <_printf_i+0xe4>
 8009144:	881e      	ldrh	r6, [r3, #0]
 8009146:	4853      	ldr	r0, [pc, #332]	; (8009294 <_printf_i+0x23c>)
 8009148:	2f6f      	cmp	r7, #111	; 0x6f
 800914a:	bf0c      	ite	eq
 800914c:	2308      	moveq	r3, #8
 800914e:	230a      	movne	r3, #10
 8009150:	2100      	movs	r1, #0
 8009152:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009156:	6865      	ldr	r5, [r4, #4]
 8009158:	60a5      	str	r5, [r4, #8]
 800915a:	2d00      	cmp	r5, #0
 800915c:	bfa2      	ittt	ge
 800915e:	6821      	ldrge	r1, [r4, #0]
 8009160:	f021 0104 	bicge.w	r1, r1, #4
 8009164:	6021      	strge	r1, [r4, #0]
 8009166:	b90e      	cbnz	r6, 800916c <_printf_i+0x114>
 8009168:	2d00      	cmp	r5, #0
 800916a:	d04b      	beq.n	8009204 <_printf_i+0x1ac>
 800916c:	4615      	mov	r5, r2
 800916e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009172:	fb03 6711 	mls	r7, r3, r1, r6
 8009176:	5dc7      	ldrb	r7, [r0, r7]
 8009178:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800917c:	4637      	mov	r7, r6
 800917e:	42bb      	cmp	r3, r7
 8009180:	460e      	mov	r6, r1
 8009182:	d9f4      	bls.n	800916e <_printf_i+0x116>
 8009184:	2b08      	cmp	r3, #8
 8009186:	d10b      	bne.n	80091a0 <_printf_i+0x148>
 8009188:	6823      	ldr	r3, [r4, #0]
 800918a:	07de      	lsls	r6, r3, #31
 800918c:	d508      	bpl.n	80091a0 <_printf_i+0x148>
 800918e:	6923      	ldr	r3, [r4, #16]
 8009190:	6861      	ldr	r1, [r4, #4]
 8009192:	4299      	cmp	r1, r3
 8009194:	bfde      	ittt	le
 8009196:	2330      	movle	r3, #48	; 0x30
 8009198:	f805 3c01 	strble.w	r3, [r5, #-1]
 800919c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80091a0:	1b52      	subs	r2, r2, r5
 80091a2:	6122      	str	r2, [r4, #16]
 80091a4:	f8cd a000 	str.w	sl, [sp]
 80091a8:	464b      	mov	r3, r9
 80091aa:	aa03      	add	r2, sp, #12
 80091ac:	4621      	mov	r1, r4
 80091ae:	4640      	mov	r0, r8
 80091b0:	f7ff fee4 	bl	8008f7c <_printf_common>
 80091b4:	3001      	adds	r0, #1
 80091b6:	d14a      	bne.n	800924e <_printf_i+0x1f6>
 80091b8:	f04f 30ff 	mov.w	r0, #4294967295
 80091bc:	b004      	add	sp, #16
 80091be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	f043 0320 	orr.w	r3, r3, #32
 80091c8:	6023      	str	r3, [r4, #0]
 80091ca:	4833      	ldr	r0, [pc, #204]	; (8009298 <_printf_i+0x240>)
 80091cc:	2778      	movs	r7, #120	; 0x78
 80091ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	6829      	ldr	r1, [r5, #0]
 80091d6:	061f      	lsls	r7, r3, #24
 80091d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80091dc:	d402      	bmi.n	80091e4 <_printf_i+0x18c>
 80091de:	065f      	lsls	r7, r3, #25
 80091e0:	bf48      	it	mi
 80091e2:	b2b6      	uxthmi	r6, r6
 80091e4:	07df      	lsls	r7, r3, #31
 80091e6:	bf48      	it	mi
 80091e8:	f043 0320 	orrmi.w	r3, r3, #32
 80091ec:	6029      	str	r1, [r5, #0]
 80091ee:	bf48      	it	mi
 80091f0:	6023      	strmi	r3, [r4, #0]
 80091f2:	b91e      	cbnz	r6, 80091fc <_printf_i+0x1a4>
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	f023 0320 	bic.w	r3, r3, #32
 80091fa:	6023      	str	r3, [r4, #0]
 80091fc:	2310      	movs	r3, #16
 80091fe:	e7a7      	b.n	8009150 <_printf_i+0xf8>
 8009200:	4824      	ldr	r0, [pc, #144]	; (8009294 <_printf_i+0x23c>)
 8009202:	e7e4      	b.n	80091ce <_printf_i+0x176>
 8009204:	4615      	mov	r5, r2
 8009206:	e7bd      	b.n	8009184 <_printf_i+0x12c>
 8009208:	682b      	ldr	r3, [r5, #0]
 800920a:	6826      	ldr	r6, [r4, #0]
 800920c:	6961      	ldr	r1, [r4, #20]
 800920e:	1d18      	adds	r0, r3, #4
 8009210:	6028      	str	r0, [r5, #0]
 8009212:	0635      	lsls	r5, r6, #24
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	d501      	bpl.n	800921c <_printf_i+0x1c4>
 8009218:	6019      	str	r1, [r3, #0]
 800921a:	e002      	b.n	8009222 <_printf_i+0x1ca>
 800921c:	0670      	lsls	r0, r6, #25
 800921e:	d5fb      	bpl.n	8009218 <_printf_i+0x1c0>
 8009220:	8019      	strh	r1, [r3, #0]
 8009222:	2300      	movs	r3, #0
 8009224:	6123      	str	r3, [r4, #16]
 8009226:	4615      	mov	r5, r2
 8009228:	e7bc      	b.n	80091a4 <_printf_i+0x14c>
 800922a:	682b      	ldr	r3, [r5, #0]
 800922c:	1d1a      	adds	r2, r3, #4
 800922e:	602a      	str	r2, [r5, #0]
 8009230:	681d      	ldr	r5, [r3, #0]
 8009232:	6862      	ldr	r2, [r4, #4]
 8009234:	2100      	movs	r1, #0
 8009236:	4628      	mov	r0, r5
 8009238:	f7f7 f802 	bl	8000240 <memchr>
 800923c:	b108      	cbz	r0, 8009242 <_printf_i+0x1ea>
 800923e:	1b40      	subs	r0, r0, r5
 8009240:	6060      	str	r0, [r4, #4]
 8009242:	6863      	ldr	r3, [r4, #4]
 8009244:	6123      	str	r3, [r4, #16]
 8009246:	2300      	movs	r3, #0
 8009248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800924c:	e7aa      	b.n	80091a4 <_printf_i+0x14c>
 800924e:	6923      	ldr	r3, [r4, #16]
 8009250:	462a      	mov	r2, r5
 8009252:	4649      	mov	r1, r9
 8009254:	4640      	mov	r0, r8
 8009256:	47d0      	blx	sl
 8009258:	3001      	adds	r0, #1
 800925a:	d0ad      	beq.n	80091b8 <_printf_i+0x160>
 800925c:	6823      	ldr	r3, [r4, #0]
 800925e:	079b      	lsls	r3, r3, #30
 8009260:	d413      	bmi.n	800928a <_printf_i+0x232>
 8009262:	68e0      	ldr	r0, [r4, #12]
 8009264:	9b03      	ldr	r3, [sp, #12]
 8009266:	4298      	cmp	r0, r3
 8009268:	bfb8      	it	lt
 800926a:	4618      	movlt	r0, r3
 800926c:	e7a6      	b.n	80091bc <_printf_i+0x164>
 800926e:	2301      	movs	r3, #1
 8009270:	4632      	mov	r2, r6
 8009272:	4649      	mov	r1, r9
 8009274:	4640      	mov	r0, r8
 8009276:	47d0      	blx	sl
 8009278:	3001      	adds	r0, #1
 800927a:	d09d      	beq.n	80091b8 <_printf_i+0x160>
 800927c:	3501      	adds	r5, #1
 800927e:	68e3      	ldr	r3, [r4, #12]
 8009280:	9903      	ldr	r1, [sp, #12]
 8009282:	1a5b      	subs	r3, r3, r1
 8009284:	42ab      	cmp	r3, r5
 8009286:	dcf2      	bgt.n	800926e <_printf_i+0x216>
 8009288:	e7eb      	b.n	8009262 <_printf_i+0x20a>
 800928a:	2500      	movs	r5, #0
 800928c:	f104 0619 	add.w	r6, r4, #25
 8009290:	e7f5      	b.n	800927e <_printf_i+0x226>
 8009292:	bf00      	nop
 8009294:	08031ce6 	.word	0x08031ce6
 8009298:	08031cf7 	.word	0x08031cf7

0800929c <std>:
 800929c:	2300      	movs	r3, #0
 800929e:	b510      	push	{r4, lr}
 80092a0:	4604      	mov	r4, r0
 80092a2:	e9c0 3300 	strd	r3, r3, [r0]
 80092a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092aa:	6083      	str	r3, [r0, #8]
 80092ac:	8181      	strh	r1, [r0, #12]
 80092ae:	6643      	str	r3, [r0, #100]	; 0x64
 80092b0:	81c2      	strh	r2, [r0, #14]
 80092b2:	6183      	str	r3, [r0, #24]
 80092b4:	4619      	mov	r1, r3
 80092b6:	2208      	movs	r2, #8
 80092b8:	305c      	adds	r0, #92	; 0x5c
 80092ba:	f000 f914 	bl	80094e6 <memset>
 80092be:	4b0d      	ldr	r3, [pc, #52]	; (80092f4 <std+0x58>)
 80092c0:	6263      	str	r3, [r4, #36]	; 0x24
 80092c2:	4b0d      	ldr	r3, [pc, #52]	; (80092f8 <std+0x5c>)
 80092c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80092c6:	4b0d      	ldr	r3, [pc, #52]	; (80092fc <std+0x60>)
 80092c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092ca:	4b0d      	ldr	r3, [pc, #52]	; (8009300 <std+0x64>)
 80092cc:	6323      	str	r3, [r4, #48]	; 0x30
 80092ce:	4b0d      	ldr	r3, [pc, #52]	; (8009304 <std+0x68>)
 80092d0:	6224      	str	r4, [r4, #32]
 80092d2:	429c      	cmp	r4, r3
 80092d4:	d006      	beq.n	80092e4 <std+0x48>
 80092d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80092da:	4294      	cmp	r4, r2
 80092dc:	d002      	beq.n	80092e4 <std+0x48>
 80092de:	33d0      	adds	r3, #208	; 0xd0
 80092e0:	429c      	cmp	r4, r3
 80092e2:	d105      	bne.n	80092f0 <std+0x54>
 80092e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092ec:	f000 b978 	b.w	80095e0 <__retarget_lock_init_recursive>
 80092f0:	bd10      	pop	{r4, pc}
 80092f2:	bf00      	nop
 80092f4:	08009461 	.word	0x08009461
 80092f8:	08009483 	.word	0x08009483
 80092fc:	080094bb 	.word	0x080094bb
 8009300:	080094df 	.word	0x080094df
 8009304:	20000e54 	.word	0x20000e54

08009308 <stdio_exit_handler>:
 8009308:	4a02      	ldr	r2, [pc, #8]	; (8009314 <stdio_exit_handler+0xc>)
 800930a:	4903      	ldr	r1, [pc, #12]	; (8009318 <stdio_exit_handler+0x10>)
 800930c:	4803      	ldr	r0, [pc, #12]	; (800931c <stdio_exit_handler+0x14>)
 800930e:	f000 b869 	b.w	80093e4 <_fwalk_sglue>
 8009312:	bf00      	nop
 8009314:	20000010 	.word	0x20000010
 8009318:	0800ae85 	.word	0x0800ae85
 800931c:	2000001c 	.word	0x2000001c

08009320 <cleanup_stdio>:
 8009320:	6841      	ldr	r1, [r0, #4]
 8009322:	4b0c      	ldr	r3, [pc, #48]	; (8009354 <cleanup_stdio+0x34>)
 8009324:	4299      	cmp	r1, r3
 8009326:	b510      	push	{r4, lr}
 8009328:	4604      	mov	r4, r0
 800932a:	d001      	beq.n	8009330 <cleanup_stdio+0x10>
 800932c:	f001 fdaa 	bl	800ae84 <_fflush_r>
 8009330:	68a1      	ldr	r1, [r4, #8]
 8009332:	4b09      	ldr	r3, [pc, #36]	; (8009358 <cleanup_stdio+0x38>)
 8009334:	4299      	cmp	r1, r3
 8009336:	d002      	beq.n	800933e <cleanup_stdio+0x1e>
 8009338:	4620      	mov	r0, r4
 800933a:	f001 fda3 	bl	800ae84 <_fflush_r>
 800933e:	68e1      	ldr	r1, [r4, #12]
 8009340:	4b06      	ldr	r3, [pc, #24]	; (800935c <cleanup_stdio+0x3c>)
 8009342:	4299      	cmp	r1, r3
 8009344:	d004      	beq.n	8009350 <cleanup_stdio+0x30>
 8009346:	4620      	mov	r0, r4
 8009348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800934c:	f001 bd9a 	b.w	800ae84 <_fflush_r>
 8009350:	bd10      	pop	{r4, pc}
 8009352:	bf00      	nop
 8009354:	20000e54 	.word	0x20000e54
 8009358:	20000ebc 	.word	0x20000ebc
 800935c:	20000f24 	.word	0x20000f24

08009360 <global_stdio_init.part.0>:
 8009360:	b510      	push	{r4, lr}
 8009362:	4b0b      	ldr	r3, [pc, #44]	; (8009390 <global_stdio_init.part.0+0x30>)
 8009364:	4c0b      	ldr	r4, [pc, #44]	; (8009394 <global_stdio_init.part.0+0x34>)
 8009366:	4a0c      	ldr	r2, [pc, #48]	; (8009398 <global_stdio_init.part.0+0x38>)
 8009368:	601a      	str	r2, [r3, #0]
 800936a:	4620      	mov	r0, r4
 800936c:	2200      	movs	r2, #0
 800936e:	2104      	movs	r1, #4
 8009370:	f7ff ff94 	bl	800929c <std>
 8009374:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009378:	2201      	movs	r2, #1
 800937a:	2109      	movs	r1, #9
 800937c:	f7ff ff8e 	bl	800929c <std>
 8009380:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009384:	2202      	movs	r2, #2
 8009386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800938a:	2112      	movs	r1, #18
 800938c:	f7ff bf86 	b.w	800929c <std>
 8009390:	20000f8c 	.word	0x20000f8c
 8009394:	20000e54 	.word	0x20000e54
 8009398:	08009309 	.word	0x08009309

0800939c <__sfp_lock_acquire>:
 800939c:	4801      	ldr	r0, [pc, #4]	; (80093a4 <__sfp_lock_acquire+0x8>)
 800939e:	f000 b920 	b.w	80095e2 <__retarget_lock_acquire_recursive>
 80093a2:	bf00      	nop
 80093a4:	20000f95 	.word	0x20000f95

080093a8 <__sfp_lock_release>:
 80093a8:	4801      	ldr	r0, [pc, #4]	; (80093b0 <__sfp_lock_release+0x8>)
 80093aa:	f000 b91b 	b.w	80095e4 <__retarget_lock_release_recursive>
 80093ae:	bf00      	nop
 80093b0:	20000f95 	.word	0x20000f95

080093b4 <__sinit>:
 80093b4:	b510      	push	{r4, lr}
 80093b6:	4604      	mov	r4, r0
 80093b8:	f7ff fff0 	bl	800939c <__sfp_lock_acquire>
 80093bc:	6a23      	ldr	r3, [r4, #32]
 80093be:	b11b      	cbz	r3, 80093c8 <__sinit+0x14>
 80093c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093c4:	f7ff bff0 	b.w	80093a8 <__sfp_lock_release>
 80093c8:	4b04      	ldr	r3, [pc, #16]	; (80093dc <__sinit+0x28>)
 80093ca:	6223      	str	r3, [r4, #32]
 80093cc:	4b04      	ldr	r3, [pc, #16]	; (80093e0 <__sinit+0x2c>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1f5      	bne.n	80093c0 <__sinit+0xc>
 80093d4:	f7ff ffc4 	bl	8009360 <global_stdio_init.part.0>
 80093d8:	e7f2      	b.n	80093c0 <__sinit+0xc>
 80093da:	bf00      	nop
 80093dc:	08009321 	.word	0x08009321
 80093e0:	20000f8c 	.word	0x20000f8c

080093e4 <_fwalk_sglue>:
 80093e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093e8:	4607      	mov	r7, r0
 80093ea:	4688      	mov	r8, r1
 80093ec:	4614      	mov	r4, r2
 80093ee:	2600      	movs	r6, #0
 80093f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093f4:	f1b9 0901 	subs.w	r9, r9, #1
 80093f8:	d505      	bpl.n	8009406 <_fwalk_sglue+0x22>
 80093fa:	6824      	ldr	r4, [r4, #0]
 80093fc:	2c00      	cmp	r4, #0
 80093fe:	d1f7      	bne.n	80093f0 <_fwalk_sglue+0xc>
 8009400:	4630      	mov	r0, r6
 8009402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009406:	89ab      	ldrh	r3, [r5, #12]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d907      	bls.n	800941c <_fwalk_sglue+0x38>
 800940c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009410:	3301      	adds	r3, #1
 8009412:	d003      	beq.n	800941c <_fwalk_sglue+0x38>
 8009414:	4629      	mov	r1, r5
 8009416:	4638      	mov	r0, r7
 8009418:	47c0      	blx	r8
 800941a:	4306      	orrs	r6, r0
 800941c:	3568      	adds	r5, #104	; 0x68
 800941e:	e7e9      	b.n	80093f4 <_fwalk_sglue+0x10>

08009420 <siprintf>:
 8009420:	b40e      	push	{r1, r2, r3}
 8009422:	b500      	push	{lr}
 8009424:	b09c      	sub	sp, #112	; 0x70
 8009426:	ab1d      	add	r3, sp, #116	; 0x74
 8009428:	9002      	str	r0, [sp, #8]
 800942a:	9006      	str	r0, [sp, #24]
 800942c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009430:	4809      	ldr	r0, [pc, #36]	; (8009458 <siprintf+0x38>)
 8009432:	9107      	str	r1, [sp, #28]
 8009434:	9104      	str	r1, [sp, #16]
 8009436:	4909      	ldr	r1, [pc, #36]	; (800945c <siprintf+0x3c>)
 8009438:	f853 2b04 	ldr.w	r2, [r3], #4
 800943c:	9105      	str	r1, [sp, #20]
 800943e:	6800      	ldr	r0, [r0, #0]
 8009440:	9301      	str	r3, [sp, #4]
 8009442:	a902      	add	r1, sp, #8
 8009444:	f001 fb9a 	bl	800ab7c <_svfiprintf_r>
 8009448:	9b02      	ldr	r3, [sp, #8]
 800944a:	2200      	movs	r2, #0
 800944c:	701a      	strb	r2, [r3, #0]
 800944e:	b01c      	add	sp, #112	; 0x70
 8009450:	f85d eb04 	ldr.w	lr, [sp], #4
 8009454:	b003      	add	sp, #12
 8009456:	4770      	bx	lr
 8009458:	20000068 	.word	0x20000068
 800945c:	ffff0208 	.word	0xffff0208

08009460 <__sread>:
 8009460:	b510      	push	{r4, lr}
 8009462:	460c      	mov	r4, r1
 8009464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009468:	f000 f86c 	bl	8009544 <_read_r>
 800946c:	2800      	cmp	r0, #0
 800946e:	bfab      	itete	ge
 8009470:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009472:	89a3      	ldrhlt	r3, [r4, #12]
 8009474:	181b      	addge	r3, r3, r0
 8009476:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800947a:	bfac      	ite	ge
 800947c:	6563      	strge	r3, [r4, #84]	; 0x54
 800947e:	81a3      	strhlt	r3, [r4, #12]
 8009480:	bd10      	pop	{r4, pc}

08009482 <__swrite>:
 8009482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009486:	461f      	mov	r7, r3
 8009488:	898b      	ldrh	r3, [r1, #12]
 800948a:	05db      	lsls	r3, r3, #23
 800948c:	4605      	mov	r5, r0
 800948e:	460c      	mov	r4, r1
 8009490:	4616      	mov	r6, r2
 8009492:	d505      	bpl.n	80094a0 <__swrite+0x1e>
 8009494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009498:	2302      	movs	r3, #2
 800949a:	2200      	movs	r2, #0
 800949c:	f000 f840 	bl	8009520 <_lseek_r>
 80094a0:	89a3      	ldrh	r3, [r4, #12]
 80094a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094aa:	81a3      	strh	r3, [r4, #12]
 80094ac:	4632      	mov	r2, r6
 80094ae:	463b      	mov	r3, r7
 80094b0:	4628      	mov	r0, r5
 80094b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094b6:	f000 b857 	b.w	8009568 <_write_r>

080094ba <__sseek>:
 80094ba:	b510      	push	{r4, lr}
 80094bc:	460c      	mov	r4, r1
 80094be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c2:	f000 f82d 	bl	8009520 <_lseek_r>
 80094c6:	1c43      	adds	r3, r0, #1
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	bf15      	itete	ne
 80094cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80094ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094d6:	81a3      	strheq	r3, [r4, #12]
 80094d8:	bf18      	it	ne
 80094da:	81a3      	strhne	r3, [r4, #12]
 80094dc:	bd10      	pop	{r4, pc}

080094de <__sclose>:
 80094de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e2:	f000 b80d 	b.w	8009500 <_close_r>

080094e6 <memset>:
 80094e6:	4402      	add	r2, r0
 80094e8:	4603      	mov	r3, r0
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d100      	bne.n	80094f0 <memset+0xa>
 80094ee:	4770      	bx	lr
 80094f0:	f803 1b01 	strb.w	r1, [r3], #1
 80094f4:	e7f9      	b.n	80094ea <memset+0x4>
	...

080094f8 <_localeconv_r>:
 80094f8:	4800      	ldr	r0, [pc, #0]	; (80094fc <_localeconv_r+0x4>)
 80094fa:	4770      	bx	lr
 80094fc:	2000015c 	.word	0x2000015c

08009500 <_close_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4d06      	ldr	r5, [pc, #24]	; (800951c <_close_r+0x1c>)
 8009504:	2300      	movs	r3, #0
 8009506:	4604      	mov	r4, r0
 8009508:	4608      	mov	r0, r1
 800950a:	602b      	str	r3, [r5, #0]
 800950c:	f7f8 fb7d 	bl	8001c0a <_close>
 8009510:	1c43      	adds	r3, r0, #1
 8009512:	d102      	bne.n	800951a <_close_r+0x1a>
 8009514:	682b      	ldr	r3, [r5, #0]
 8009516:	b103      	cbz	r3, 800951a <_close_r+0x1a>
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	20000f90 	.word	0x20000f90

08009520 <_lseek_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4d07      	ldr	r5, [pc, #28]	; (8009540 <_lseek_r+0x20>)
 8009524:	4604      	mov	r4, r0
 8009526:	4608      	mov	r0, r1
 8009528:	4611      	mov	r1, r2
 800952a:	2200      	movs	r2, #0
 800952c:	602a      	str	r2, [r5, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	f7f8 fb92 	bl	8001c58 <_lseek>
 8009534:	1c43      	adds	r3, r0, #1
 8009536:	d102      	bne.n	800953e <_lseek_r+0x1e>
 8009538:	682b      	ldr	r3, [r5, #0]
 800953a:	b103      	cbz	r3, 800953e <_lseek_r+0x1e>
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	bd38      	pop	{r3, r4, r5, pc}
 8009540:	20000f90 	.word	0x20000f90

08009544 <_read_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	4d07      	ldr	r5, [pc, #28]	; (8009564 <_read_r+0x20>)
 8009548:	4604      	mov	r4, r0
 800954a:	4608      	mov	r0, r1
 800954c:	4611      	mov	r1, r2
 800954e:	2200      	movs	r2, #0
 8009550:	602a      	str	r2, [r5, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	f7f8 fb20 	bl	8001b98 <_read>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	d102      	bne.n	8009562 <_read_r+0x1e>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	b103      	cbz	r3, 8009562 <_read_r+0x1e>
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	bd38      	pop	{r3, r4, r5, pc}
 8009564:	20000f90 	.word	0x20000f90

08009568 <_write_r>:
 8009568:	b538      	push	{r3, r4, r5, lr}
 800956a:	4d07      	ldr	r5, [pc, #28]	; (8009588 <_write_r+0x20>)
 800956c:	4604      	mov	r4, r0
 800956e:	4608      	mov	r0, r1
 8009570:	4611      	mov	r1, r2
 8009572:	2200      	movs	r2, #0
 8009574:	602a      	str	r2, [r5, #0]
 8009576:	461a      	mov	r2, r3
 8009578:	f7f8 fb2b 	bl	8001bd2 <_write>
 800957c:	1c43      	adds	r3, r0, #1
 800957e:	d102      	bne.n	8009586 <_write_r+0x1e>
 8009580:	682b      	ldr	r3, [r5, #0]
 8009582:	b103      	cbz	r3, 8009586 <_write_r+0x1e>
 8009584:	6023      	str	r3, [r4, #0]
 8009586:	bd38      	pop	{r3, r4, r5, pc}
 8009588:	20000f90 	.word	0x20000f90

0800958c <__errno>:
 800958c:	4b01      	ldr	r3, [pc, #4]	; (8009594 <__errno+0x8>)
 800958e:	6818      	ldr	r0, [r3, #0]
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	20000068 	.word	0x20000068

08009598 <__libc_init_array>:
 8009598:	b570      	push	{r4, r5, r6, lr}
 800959a:	4d0d      	ldr	r5, [pc, #52]	; (80095d0 <__libc_init_array+0x38>)
 800959c:	4c0d      	ldr	r4, [pc, #52]	; (80095d4 <__libc_init_array+0x3c>)
 800959e:	1b64      	subs	r4, r4, r5
 80095a0:	10a4      	asrs	r4, r4, #2
 80095a2:	2600      	movs	r6, #0
 80095a4:	42a6      	cmp	r6, r4
 80095a6:	d109      	bne.n	80095bc <__libc_init_array+0x24>
 80095a8:	4d0b      	ldr	r5, [pc, #44]	; (80095d8 <__libc_init_array+0x40>)
 80095aa:	4c0c      	ldr	r4, [pc, #48]	; (80095dc <__libc_init_array+0x44>)
 80095ac:	f002 fe3c 	bl	800c228 <_init>
 80095b0:	1b64      	subs	r4, r4, r5
 80095b2:	10a4      	asrs	r4, r4, #2
 80095b4:	2600      	movs	r6, #0
 80095b6:	42a6      	cmp	r6, r4
 80095b8:	d105      	bne.n	80095c6 <__libc_init_array+0x2e>
 80095ba:	bd70      	pop	{r4, r5, r6, pc}
 80095bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80095c0:	4798      	blx	r3
 80095c2:	3601      	adds	r6, #1
 80095c4:	e7ee      	b.n	80095a4 <__libc_init_array+0xc>
 80095c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ca:	4798      	blx	r3
 80095cc:	3601      	adds	r6, #1
 80095ce:	e7f2      	b.n	80095b6 <__libc_init_array+0x1e>
 80095d0:	08032228 	.word	0x08032228
 80095d4:	08032228 	.word	0x08032228
 80095d8:	08032228 	.word	0x08032228
 80095dc:	0803222c 	.word	0x0803222c

080095e0 <__retarget_lock_init_recursive>:
 80095e0:	4770      	bx	lr

080095e2 <__retarget_lock_acquire_recursive>:
 80095e2:	4770      	bx	lr

080095e4 <__retarget_lock_release_recursive>:
 80095e4:	4770      	bx	lr

080095e6 <quorem>:
 80095e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ea:	6903      	ldr	r3, [r0, #16]
 80095ec:	690c      	ldr	r4, [r1, #16]
 80095ee:	42a3      	cmp	r3, r4
 80095f0:	4607      	mov	r7, r0
 80095f2:	db7e      	blt.n	80096f2 <quorem+0x10c>
 80095f4:	3c01      	subs	r4, #1
 80095f6:	f101 0814 	add.w	r8, r1, #20
 80095fa:	f100 0514 	add.w	r5, r0, #20
 80095fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009602:	9301      	str	r3, [sp, #4]
 8009604:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009608:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800960c:	3301      	adds	r3, #1
 800960e:	429a      	cmp	r2, r3
 8009610:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009614:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009618:	fbb2 f6f3 	udiv	r6, r2, r3
 800961c:	d331      	bcc.n	8009682 <quorem+0x9c>
 800961e:	f04f 0e00 	mov.w	lr, #0
 8009622:	4640      	mov	r0, r8
 8009624:	46ac      	mov	ip, r5
 8009626:	46f2      	mov	sl, lr
 8009628:	f850 2b04 	ldr.w	r2, [r0], #4
 800962c:	b293      	uxth	r3, r2
 800962e:	fb06 e303 	mla	r3, r6, r3, lr
 8009632:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009636:	0c1a      	lsrs	r2, r3, #16
 8009638:	b29b      	uxth	r3, r3
 800963a:	ebaa 0303 	sub.w	r3, sl, r3
 800963e:	f8dc a000 	ldr.w	sl, [ip]
 8009642:	fa13 f38a 	uxtah	r3, r3, sl
 8009646:	fb06 220e 	mla	r2, r6, lr, r2
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	9b00      	ldr	r3, [sp, #0]
 800964e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009652:	b292      	uxth	r2, r2
 8009654:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009658:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800965c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009660:	4581      	cmp	r9, r0
 8009662:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009666:	f84c 3b04 	str.w	r3, [ip], #4
 800966a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800966e:	d2db      	bcs.n	8009628 <quorem+0x42>
 8009670:	f855 300b 	ldr.w	r3, [r5, fp]
 8009674:	b92b      	cbnz	r3, 8009682 <quorem+0x9c>
 8009676:	9b01      	ldr	r3, [sp, #4]
 8009678:	3b04      	subs	r3, #4
 800967a:	429d      	cmp	r5, r3
 800967c:	461a      	mov	r2, r3
 800967e:	d32c      	bcc.n	80096da <quorem+0xf4>
 8009680:	613c      	str	r4, [r7, #16]
 8009682:	4638      	mov	r0, r7
 8009684:	f001 f920 	bl	800a8c8 <__mcmp>
 8009688:	2800      	cmp	r0, #0
 800968a:	db22      	blt.n	80096d2 <quorem+0xec>
 800968c:	3601      	adds	r6, #1
 800968e:	4629      	mov	r1, r5
 8009690:	2000      	movs	r0, #0
 8009692:	f858 2b04 	ldr.w	r2, [r8], #4
 8009696:	f8d1 c000 	ldr.w	ip, [r1]
 800969a:	b293      	uxth	r3, r2
 800969c:	1ac3      	subs	r3, r0, r3
 800969e:	0c12      	lsrs	r2, r2, #16
 80096a0:	fa13 f38c 	uxtah	r3, r3, ip
 80096a4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80096a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096b2:	45c1      	cmp	r9, r8
 80096b4:	f841 3b04 	str.w	r3, [r1], #4
 80096b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80096bc:	d2e9      	bcs.n	8009692 <quorem+0xac>
 80096be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096c6:	b922      	cbnz	r2, 80096d2 <quorem+0xec>
 80096c8:	3b04      	subs	r3, #4
 80096ca:	429d      	cmp	r5, r3
 80096cc:	461a      	mov	r2, r3
 80096ce:	d30a      	bcc.n	80096e6 <quorem+0x100>
 80096d0:	613c      	str	r4, [r7, #16]
 80096d2:	4630      	mov	r0, r6
 80096d4:	b003      	add	sp, #12
 80096d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096da:	6812      	ldr	r2, [r2, #0]
 80096dc:	3b04      	subs	r3, #4
 80096de:	2a00      	cmp	r2, #0
 80096e0:	d1ce      	bne.n	8009680 <quorem+0x9a>
 80096e2:	3c01      	subs	r4, #1
 80096e4:	e7c9      	b.n	800967a <quorem+0x94>
 80096e6:	6812      	ldr	r2, [r2, #0]
 80096e8:	3b04      	subs	r3, #4
 80096ea:	2a00      	cmp	r2, #0
 80096ec:	d1f0      	bne.n	80096d0 <quorem+0xea>
 80096ee:	3c01      	subs	r4, #1
 80096f0:	e7eb      	b.n	80096ca <quorem+0xe4>
 80096f2:	2000      	movs	r0, #0
 80096f4:	e7ee      	b.n	80096d4 <quorem+0xee>
	...

080096f8 <_dtoa_r>:
 80096f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	ed2d 8b02 	vpush	{d8}
 8009700:	69c5      	ldr	r5, [r0, #28]
 8009702:	b091      	sub	sp, #68	; 0x44
 8009704:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009708:	ec59 8b10 	vmov	r8, r9, d0
 800970c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800970e:	9106      	str	r1, [sp, #24]
 8009710:	4606      	mov	r6, r0
 8009712:	9208      	str	r2, [sp, #32]
 8009714:	930c      	str	r3, [sp, #48]	; 0x30
 8009716:	b975      	cbnz	r5, 8009736 <_dtoa_r+0x3e>
 8009718:	2010      	movs	r0, #16
 800971a:	f000 fda5 	bl	800a268 <malloc>
 800971e:	4602      	mov	r2, r0
 8009720:	61f0      	str	r0, [r6, #28]
 8009722:	b920      	cbnz	r0, 800972e <_dtoa_r+0x36>
 8009724:	4ba6      	ldr	r3, [pc, #664]	; (80099c0 <_dtoa_r+0x2c8>)
 8009726:	21ef      	movs	r1, #239	; 0xef
 8009728:	48a6      	ldr	r0, [pc, #664]	; (80099c4 <_dtoa_r+0x2cc>)
 800972a:	f001 fc0b 	bl	800af44 <__assert_func>
 800972e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009732:	6005      	str	r5, [r0, #0]
 8009734:	60c5      	str	r5, [r0, #12]
 8009736:	69f3      	ldr	r3, [r6, #28]
 8009738:	6819      	ldr	r1, [r3, #0]
 800973a:	b151      	cbz	r1, 8009752 <_dtoa_r+0x5a>
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	604a      	str	r2, [r1, #4]
 8009740:	2301      	movs	r3, #1
 8009742:	4093      	lsls	r3, r2
 8009744:	608b      	str	r3, [r1, #8]
 8009746:	4630      	mov	r0, r6
 8009748:	f000 fe82 	bl	800a450 <_Bfree>
 800974c:	69f3      	ldr	r3, [r6, #28]
 800974e:	2200      	movs	r2, #0
 8009750:	601a      	str	r2, [r3, #0]
 8009752:	f1b9 0300 	subs.w	r3, r9, #0
 8009756:	bfbb      	ittet	lt
 8009758:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800975c:	9303      	strlt	r3, [sp, #12]
 800975e:	2300      	movge	r3, #0
 8009760:	2201      	movlt	r2, #1
 8009762:	bfac      	ite	ge
 8009764:	6023      	strge	r3, [r4, #0]
 8009766:	6022      	strlt	r2, [r4, #0]
 8009768:	4b97      	ldr	r3, [pc, #604]	; (80099c8 <_dtoa_r+0x2d0>)
 800976a:	9c03      	ldr	r4, [sp, #12]
 800976c:	43a3      	bics	r3, r4
 800976e:	d11c      	bne.n	80097aa <_dtoa_r+0xb2>
 8009770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009772:	f242 730f 	movw	r3, #9999	; 0x270f
 8009776:	6013      	str	r3, [r2, #0]
 8009778:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800977c:	ea53 0308 	orrs.w	r3, r3, r8
 8009780:	f000 84fb 	beq.w	800a17a <_dtoa_r+0xa82>
 8009784:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009786:	b963      	cbnz	r3, 80097a2 <_dtoa_r+0xaa>
 8009788:	4b90      	ldr	r3, [pc, #576]	; (80099cc <_dtoa_r+0x2d4>)
 800978a:	e020      	b.n	80097ce <_dtoa_r+0xd6>
 800978c:	4b90      	ldr	r3, [pc, #576]	; (80099d0 <_dtoa_r+0x2d8>)
 800978e:	9301      	str	r3, [sp, #4]
 8009790:	3308      	adds	r3, #8
 8009792:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009794:	6013      	str	r3, [r2, #0]
 8009796:	9801      	ldr	r0, [sp, #4]
 8009798:	b011      	add	sp, #68	; 0x44
 800979a:	ecbd 8b02 	vpop	{d8}
 800979e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a2:	4b8a      	ldr	r3, [pc, #552]	; (80099cc <_dtoa_r+0x2d4>)
 80097a4:	9301      	str	r3, [sp, #4]
 80097a6:	3303      	adds	r3, #3
 80097a8:	e7f3      	b.n	8009792 <_dtoa_r+0x9a>
 80097aa:	ed9d 8b02 	vldr	d8, [sp, #8]
 80097ae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80097b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097b6:	d10c      	bne.n	80097d2 <_dtoa_r+0xda>
 80097b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097ba:	2301      	movs	r3, #1
 80097bc:	6013      	str	r3, [r2, #0]
 80097be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f000 84d7 	beq.w	800a174 <_dtoa_r+0xa7c>
 80097c6:	4b83      	ldr	r3, [pc, #524]	; (80099d4 <_dtoa_r+0x2dc>)
 80097c8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80097ca:	6013      	str	r3, [r2, #0]
 80097cc:	3b01      	subs	r3, #1
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	e7e1      	b.n	8009796 <_dtoa_r+0x9e>
 80097d2:	aa0e      	add	r2, sp, #56	; 0x38
 80097d4:	a90f      	add	r1, sp, #60	; 0x3c
 80097d6:	4630      	mov	r0, r6
 80097d8:	eeb0 0b48 	vmov.f64	d0, d8
 80097dc:	f001 f91a 	bl	800aa14 <__d2b>
 80097e0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80097e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097e6:	4605      	mov	r5, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d046      	beq.n	800987a <_dtoa_r+0x182>
 80097ec:	eeb0 7b48 	vmov.f64	d7, d8
 80097f0:	ee18 1a90 	vmov	r1, s17
 80097f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80097f8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80097fc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009800:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009804:	2000      	movs	r0, #0
 8009806:	ee07 1a90 	vmov	s15, r1
 800980a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800980e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80099a8 <_dtoa_r+0x2b0>
 8009812:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009816:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80099b0 <_dtoa_r+0x2b8>
 800981a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800981e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80099b8 <_dtoa_r+0x2c0>
 8009822:	ee07 3a90 	vmov	s15, r3
 8009826:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800982a:	eeb0 7b46 	vmov.f64	d7, d6
 800982e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009832:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009836:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800983a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800983e:	ee16 ba90 	vmov	fp, s13
 8009842:	9009      	str	r0, [sp, #36]	; 0x24
 8009844:	d508      	bpl.n	8009858 <_dtoa_r+0x160>
 8009846:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800984a:	eeb4 6b47 	vcmp.f64	d6, d7
 800984e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009852:	bf18      	it	ne
 8009854:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009858:	f1bb 0f16 	cmp.w	fp, #22
 800985c:	d82b      	bhi.n	80098b6 <_dtoa_r+0x1be>
 800985e:	495e      	ldr	r1, [pc, #376]	; (80099d8 <_dtoa_r+0x2e0>)
 8009860:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8009864:	ed91 7b00 	vldr	d7, [r1]
 8009868:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800986c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009870:	d501      	bpl.n	8009876 <_dtoa_r+0x17e>
 8009872:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009876:	2100      	movs	r1, #0
 8009878:	e01e      	b.n	80098b8 <_dtoa_r+0x1c0>
 800987a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800987c:	4413      	add	r3, r2
 800987e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8009882:	2920      	cmp	r1, #32
 8009884:	bfc1      	itttt	gt
 8009886:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800988a:	408c      	lslgt	r4, r1
 800988c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8009890:	fa28 f101 	lsrgt.w	r1, r8, r1
 8009894:	bfd6      	itet	le
 8009896:	f1c1 0120 	rsble	r1, r1, #32
 800989a:	4321      	orrgt	r1, r4
 800989c:	fa08 f101 	lslle.w	r1, r8, r1
 80098a0:	ee07 1a90 	vmov	s15, r1
 80098a4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80098a8:	3b01      	subs	r3, #1
 80098aa:	ee17 1a90 	vmov	r1, s15
 80098ae:	2001      	movs	r0, #1
 80098b0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80098b4:	e7a7      	b.n	8009806 <_dtoa_r+0x10e>
 80098b6:	2101      	movs	r1, #1
 80098b8:	1ad2      	subs	r2, r2, r3
 80098ba:	1e53      	subs	r3, r2, #1
 80098bc:	9305      	str	r3, [sp, #20]
 80098be:	bf45      	ittet	mi
 80098c0:	f1c2 0301 	rsbmi	r3, r2, #1
 80098c4:	9304      	strmi	r3, [sp, #16]
 80098c6:	2300      	movpl	r3, #0
 80098c8:	2300      	movmi	r3, #0
 80098ca:	bf4c      	ite	mi
 80098cc:	9305      	strmi	r3, [sp, #20]
 80098ce:	9304      	strpl	r3, [sp, #16]
 80098d0:	f1bb 0f00 	cmp.w	fp, #0
 80098d4:	910b      	str	r1, [sp, #44]	; 0x2c
 80098d6:	db18      	blt.n	800990a <_dtoa_r+0x212>
 80098d8:	9b05      	ldr	r3, [sp, #20]
 80098da:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80098de:	445b      	add	r3, fp
 80098e0:	9305      	str	r3, [sp, #20]
 80098e2:	2300      	movs	r3, #0
 80098e4:	9a06      	ldr	r2, [sp, #24]
 80098e6:	2a09      	cmp	r2, #9
 80098e8:	d848      	bhi.n	800997c <_dtoa_r+0x284>
 80098ea:	2a05      	cmp	r2, #5
 80098ec:	bfc4      	itt	gt
 80098ee:	3a04      	subgt	r2, #4
 80098f0:	9206      	strgt	r2, [sp, #24]
 80098f2:	9a06      	ldr	r2, [sp, #24]
 80098f4:	f1a2 0202 	sub.w	r2, r2, #2
 80098f8:	bfcc      	ite	gt
 80098fa:	2400      	movgt	r4, #0
 80098fc:	2401      	movle	r4, #1
 80098fe:	2a03      	cmp	r2, #3
 8009900:	d847      	bhi.n	8009992 <_dtoa_r+0x29a>
 8009902:	e8df f002 	tbb	[pc, r2]
 8009906:	2d0b      	.short	0x2d0b
 8009908:	392b      	.short	0x392b
 800990a:	9b04      	ldr	r3, [sp, #16]
 800990c:	2200      	movs	r2, #0
 800990e:	eba3 030b 	sub.w	r3, r3, fp
 8009912:	9304      	str	r3, [sp, #16]
 8009914:	920a      	str	r2, [sp, #40]	; 0x28
 8009916:	f1cb 0300 	rsb	r3, fp, #0
 800991a:	e7e3      	b.n	80098e4 <_dtoa_r+0x1ec>
 800991c:	2200      	movs	r2, #0
 800991e:	9207      	str	r2, [sp, #28]
 8009920:	9a08      	ldr	r2, [sp, #32]
 8009922:	2a00      	cmp	r2, #0
 8009924:	dc38      	bgt.n	8009998 <_dtoa_r+0x2a0>
 8009926:	f04f 0a01 	mov.w	sl, #1
 800992a:	46d1      	mov	r9, sl
 800992c:	4652      	mov	r2, sl
 800992e:	f8cd a020 	str.w	sl, [sp, #32]
 8009932:	69f7      	ldr	r7, [r6, #28]
 8009934:	2100      	movs	r1, #0
 8009936:	2004      	movs	r0, #4
 8009938:	f100 0c14 	add.w	ip, r0, #20
 800993c:	4594      	cmp	ip, r2
 800993e:	d930      	bls.n	80099a2 <_dtoa_r+0x2aa>
 8009940:	6079      	str	r1, [r7, #4]
 8009942:	4630      	mov	r0, r6
 8009944:	930d      	str	r3, [sp, #52]	; 0x34
 8009946:	f000 fd43 	bl	800a3d0 <_Balloc>
 800994a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800994c:	9001      	str	r0, [sp, #4]
 800994e:	4602      	mov	r2, r0
 8009950:	2800      	cmp	r0, #0
 8009952:	d145      	bne.n	80099e0 <_dtoa_r+0x2e8>
 8009954:	4b21      	ldr	r3, [pc, #132]	; (80099dc <_dtoa_r+0x2e4>)
 8009956:	f240 11af 	movw	r1, #431	; 0x1af
 800995a:	e6e5      	b.n	8009728 <_dtoa_r+0x30>
 800995c:	2201      	movs	r2, #1
 800995e:	e7de      	b.n	800991e <_dtoa_r+0x226>
 8009960:	2200      	movs	r2, #0
 8009962:	9207      	str	r2, [sp, #28]
 8009964:	9a08      	ldr	r2, [sp, #32]
 8009966:	eb0b 0a02 	add.w	sl, fp, r2
 800996a:	f10a 0901 	add.w	r9, sl, #1
 800996e:	464a      	mov	r2, r9
 8009970:	2a01      	cmp	r2, #1
 8009972:	bfb8      	it	lt
 8009974:	2201      	movlt	r2, #1
 8009976:	e7dc      	b.n	8009932 <_dtoa_r+0x23a>
 8009978:	2201      	movs	r2, #1
 800997a:	e7f2      	b.n	8009962 <_dtoa_r+0x26a>
 800997c:	2401      	movs	r4, #1
 800997e:	2200      	movs	r2, #0
 8009980:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009984:	f04f 3aff 	mov.w	sl, #4294967295
 8009988:	2100      	movs	r1, #0
 800998a:	46d1      	mov	r9, sl
 800998c:	2212      	movs	r2, #18
 800998e:	9108      	str	r1, [sp, #32]
 8009990:	e7cf      	b.n	8009932 <_dtoa_r+0x23a>
 8009992:	2201      	movs	r2, #1
 8009994:	9207      	str	r2, [sp, #28]
 8009996:	e7f5      	b.n	8009984 <_dtoa_r+0x28c>
 8009998:	f8dd a020 	ldr.w	sl, [sp, #32]
 800999c:	46d1      	mov	r9, sl
 800999e:	4652      	mov	r2, sl
 80099a0:	e7c7      	b.n	8009932 <_dtoa_r+0x23a>
 80099a2:	3101      	adds	r1, #1
 80099a4:	0040      	lsls	r0, r0, #1
 80099a6:	e7c7      	b.n	8009938 <_dtoa_r+0x240>
 80099a8:	636f4361 	.word	0x636f4361
 80099ac:	3fd287a7 	.word	0x3fd287a7
 80099b0:	8b60c8b3 	.word	0x8b60c8b3
 80099b4:	3fc68a28 	.word	0x3fc68a28
 80099b8:	509f79fb 	.word	0x509f79fb
 80099bc:	3fd34413 	.word	0x3fd34413
 80099c0:	08031d15 	.word	0x08031d15
 80099c4:	08031d2c 	.word	0x08031d2c
 80099c8:	7ff00000 	.word	0x7ff00000
 80099cc:	08031d11 	.word	0x08031d11
 80099d0:	08031d08 	.word	0x08031d08
 80099d4:	08031ce5 	.word	0x08031ce5
 80099d8:	08031e18 	.word	0x08031e18
 80099dc:	08031d84 	.word	0x08031d84
 80099e0:	69f2      	ldr	r2, [r6, #28]
 80099e2:	9901      	ldr	r1, [sp, #4]
 80099e4:	6011      	str	r1, [r2, #0]
 80099e6:	f1b9 0f0e 	cmp.w	r9, #14
 80099ea:	d86c      	bhi.n	8009ac6 <_dtoa_r+0x3ce>
 80099ec:	2c00      	cmp	r4, #0
 80099ee:	d06a      	beq.n	8009ac6 <_dtoa_r+0x3ce>
 80099f0:	f1bb 0f00 	cmp.w	fp, #0
 80099f4:	f340 80a0 	ble.w	8009b38 <_dtoa_r+0x440>
 80099f8:	4ac1      	ldr	r2, [pc, #772]	; (8009d00 <_dtoa_r+0x608>)
 80099fa:	f00b 010f 	and.w	r1, fp, #15
 80099fe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009a02:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009a06:	ed92 7b00 	vldr	d7, [r2]
 8009a0a:	ea4f 122b 	mov.w	r2, fp, asr #4
 8009a0e:	f000 8087 	beq.w	8009b20 <_dtoa_r+0x428>
 8009a12:	49bc      	ldr	r1, [pc, #752]	; (8009d04 <_dtoa_r+0x60c>)
 8009a14:	ed91 6b08 	vldr	d6, [r1, #32]
 8009a18:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009a1c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009a20:	f002 020f 	and.w	r2, r2, #15
 8009a24:	2103      	movs	r1, #3
 8009a26:	48b7      	ldr	r0, [pc, #732]	; (8009d04 <_dtoa_r+0x60c>)
 8009a28:	2a00      	cmp	r2, #0
 8009a2a:	d17b      	bne.n	8009b24 <_dtoa_r+0x42c>
 8009a2c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009a30:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009a34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a3e:	2a00      	cmp	r2, #0
 8009a40:	f000 80a0 	beq.w	8009b84 <_dtoa_r+0x48c>
 8009a44:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009a48:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a50:	f140 8098 	bpl.w	8009b84 <_dtoa_r+0x48c>
 8009a54:	f1b9 0f00 	cmp.w	r9, #0
 8009a58:	f000 8094 	beq.w	8009b84 <_dtoa_r+0x48c>
 8009a5c:	f1ba 0f00 	cmp.w	sl, #0
 8009a60:	dd2f      	ble.n	8009ac2 <_dtoa_r+0x3ca>
 8009a62:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009a66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a6a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a6e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009a72:	3101      	adds	r1, #1
 8009a74:	4654      	mov	r4, sl
 8009a76:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009a7a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009a7e:	ee07 1a90 	vmov	s15, r1
 8009a82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009a86:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009a8a:	ee15 7a90 	vmov	r7, s11
 8009a8e:	ec51 0b15 	vmov	r0, r1, d5
 8009a92:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8009a96:	2c00      	cmp	r4, #0
 8009a98:	d177      	bne.n	8009b8a <_dtoa_r+0x492>
 8009a9a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009a9e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009aa2:	ec41 0b17 	vmov	d7, r0, r1
 8009aa6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aae:	f300 826a 	bgt.w	8009f86 <_dtoa_r+0x88e>
 8009ab2:	eeb1 7b47 	vneg.f64	d7, d7
 8009ab6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009abe:	f100 8260 	bmi.w	8009f82 <_dtoa_r+0x88a>
 8009ac2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009ac6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ac8:	2a00      	cmp	r2, #0
 8009aca:	f2c0 811d 	blt.w	8009d08 <_dtoa_r+0x610>
 8009ace:	f1bb 0f0e 	cmp.w	fp, #14
 8009ad2:	f300 8119 	bgt.w	8009d08 <_dtoa_r+0x610>
 8009ad6:	4b8a      	ldr	r3, [pc, #552]	; (8009d00 <_dtoa_r+0x608>)
 8009ad8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009adc:	ed93 6b00 	vldr	d6, [r3]
 8009ae0:	9b08      	ldr	r3, [sp, #32]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f280 80b7 	bge.w	8009c56 <_dtoa_r+0x55e>
 8009ae8:	f1b9 0f00 	cmp.w	r9, #0
 8009aec:	f300 80b3 	bgt.w	8009c56 <_dtoa_r+0x55e>
 8009af0:	f040 8246 	bne.w	8009f80 <_dtoa_r+0x888>
 8009af4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009af8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009afc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b08:	464c      	mov	r4, r9
 8009b0a:	464f      	mov	r7, r9
 8009b0c:	f280 821c 	bge.w	8009f48 <_dtoa_r+0x850>
 8009b10:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009b14:	2331      	movs	r3, #49	; 0x31
 8009b16:	f808 3b01 	strb.w	r3, [r8], #1
 8009b1a:	f10b 0b01 	add.w	fp, fp, #1
 8009b1e:	e218      	b.n	8009f52 <_dtoa_r+0x85a>
 8009b20:	2102      	movs	r1, #2
 8009b22:	e780      	b.n	8009a26 <_dtoa_r+0x32e>
 8009b24:	07d4      	lsls	r4, r2, #31
 8009b26:	d504      	bpl.n	8009b32 <_dtoa_r+0x43a>
 8009b28:	ed90 6b00 	vldr	d6, [r0]
 8009b2c:	3101      	adds	r1, #1
 8009b2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b32:	1052      	asrs	r2, r2, #1
 8009b34:	3008      	adds	r0, #8
 8009b36:	e777      	b.n	8009a28 <_dtoa_r+0x330>
 8009b38:	d022      	beq.n	8009b80 <_dtoa_r+0x488>
 8009b3a:	f1cb 0200 	rsb	r2, fp, #0
 8009b3e:	4970      	ldr	r1, [pc, #448]	; (8009d00 <_dtoa_r+0x608>)
 8009b40:	f002 000f 	and.w	r0, r2, #15
 8009b44:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009b48:	ed91 7b00 	vldr	d7, [r1]
 8009b4c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009b50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b54:	486b      	ldr	r0, [pc, #428]	; (8009d04 <_dtoa_r+0x60c>)
 8009b56:	1112      	asrs	r2, r2, #4
 8009b58:	2400      	movs	r4, #0
 8009b5a:	2102      	movs	r1, #2
 8009b5c:	b92a      	cbnz	r2, 8009b6a <_dtoa_r+0x472>
 8009b5e:	2c00      	cmp	r4, #0
 8009b60:	f43f af6a 	beq.w	8009a38 <_dtoa_r+0x340>
 8009b64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b68:	e766      	b.n	8009a38 <_dtoa_r+0x340>
 8009b6a:	07d7      	lsls	r7, r2, #31
 8009b6c:	d505      	bpl.n	8009b7a <_dtoa_r+0x482>
 8009b6e:	ed90 6b00 	vldr	d6, [r0]
 8009b72:	3101      	adds	r1, #1
 8009b74:	2401      	movs	r4, #1
 8009b76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b7a:	1052      	asrs	r2, r2, #1
 8009b7c:	3008      	adds	r0, #8
 8009b7e:	e7ed      	b.n	8009b5c <_dtoa_r+0x464>
 8009b80:	2102      	movs	r1, #2
 8009b82:	e759      	b.n	8009a38 <_dtoa_r+0x340>
 8009b84:	465a      	mov	r2, fp
 8009b86:	464c      	mov	r4, r9
 8009b88:	e775      	b.n	8009a76 <_dtoa_r+0x37e>
 8009b8a:	ec41 0b17 	vmov	d7, r0, r1
 8009b8e:	495c      	ldr	r1, [pc, #368]	; (8009d00 <_dtoa_r+0x608>)
 8009b90:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8009b94:	ed11 4b02 	vldr	d4, [r1, #-8]
 8009b98:	9901      	ldr	r1, [sp, #4]
 8009b9a:	440c      	add	r4, r1
 8009b9c:	9907      	ldr	r1, [sp, #28]
 8009b9e:	b351      	cbz	r1, 8009bf6 <_dtoa_r+0x4fe>
 8009ba0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009ba4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009ba8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009bac:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009bb0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009bb4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009bb8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009bbc:	ee14 1a90 	vmov	r1, s9
 8009bc0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009bc4:	3130      	adds	r1, #48	; 0x30
 8009bc6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009bca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd2:	f808 1b01 	strb.w	r1, [r8], #1
 8009bd6:	d439      	bmi.n	8009c4c <_dtoa_r+0x554>
 8009bd8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009bdc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009be4:	d472      	bmi.n	8009ccc <_dtoa_r+0x5d4>
 8009be6:	45a0      	cmp	r8, r4
 8009be8:	f43f af6b 	beq.w	8009ac2 <_dtoa_r+0x3ca>
 8009bec:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009bf0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009bf4:	e7e0      	b.n	8009bb8 <_dtoa_r+0x4c0>
 8009bf6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009bfa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009bfe:	4620      	mov	r0, r4
 8009c00:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009c04:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009c08:	ee14 1a90 	vmov	r1, s9
 8009c0c:	3130      	adds	r1, #48	; 0x30
 8009c0e:	f808 1b01 	strb.w	r1, [r8], #1
 8009c12:	45a0      	cmp	r8, r4
 8009c14:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009c18:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009c1c:	d118      	bne.n	8009c50 <_dtoa_r+0x558>
 8009c1e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009c22:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009c26:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c2e:	dc4d      	bgt.n	8009ccc <_dtoa_r+0x5d4>
 8009c30:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009c34:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c3c:	f57f af41 	bpl.w	8009ac2 <_dtoa_r+0x3ca>
 8009c40:	4680      	mov	r8, r0
 8009c42:	3801      	subs	r0, #1
 8009c44:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009c48:	2b30      	cmp	r3, #48	; 0x30
 8009c4a:	d0f9      	beq.n	8009c40 <_dtoa_r+0x548>
 8009c4c:	4693      	mov	fp, r2
 8009c4e:	e02a      	b.n	8009ca6 <_dtoa_r+0x5ae>
 8009c50:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009c54:	e7d6      	b.n	8009c04 <_dtoa_r+0x50c>
 8009c56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c5a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009c5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009c62:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009c66:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009c6a:	ee15 3a10 	vmov	r3, s10
 8009c6e:	3330      	adds	r3, #48	; 0x30
 8009c70:	f808 3b01 	strb.w	r3, [r8], #1
 8009c74:	9b01      	ldr	r3, [sp, #4]
 8009c76:	eba8 0303 	sub.w	r3, r8, r3
 8009c7a:	4599      	cmp	r9, r3
 8009c7c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009c80:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009c84:	d133      	bne.n	8009cee <_dtoa_r+0x5f6>
 8009c86:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009c8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c92:	dc1a      	bgt.n	8009cca <_dtoa_r+0x5d2>
 8009c94:	eeb4 7b46 	vcmp.f64	d7, d6
 8009c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c9c:	d103      	bne.n	8009ca6 <_dtoa_r+0x5ae>
 8009c9e:	ee15 3a10 	vmov	r3, s10
 8009ca2:	07d9      	lsls	r1, r3, #31
 8009ca4:	d411      	bmi.n	8009cca <_dtoa_r+0x5d2>
 8009ca6:	4629      	mov	r1, r5
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f000 fbd1 	bl	800a450 <_Bfree>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cb2:	f888 3000 	strb.w	r3, [r8]
 8009cb6:	f10b 0301 	add.w	r3, fp, #1
 8009cba:	6013      	str	r3, [r2, #0]
 8009cbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f43f ad69 	beq.w	8009796 <_dtoa_r+0x9e>
 8009cc4:	f8c3 8000 	str.w	r8, [r3]
 8009cc8:	e565      	b.n	8009796 <_dtoa_r+0x9e>
 8009cca:	465a      	mov	r2, fp
 8009ccc:	4643      	mov	r3, r8
 8009cce:	4698      	mov	r8, r3
 8009cd0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8009cd4:	2939      	cmp	r1, #57	; 0x39
 8009cd6:	d106      	bne.n	8009ce6 <_dtoa_r+0x5ee>
 8009cd8:	9901      	ldr	r1, [sp, #4]
 8009cda:	4299      	cmp	r1, r3
 8009cdc:	d1f7      	bne.n	8009cce <_dtoa_r+0x5d6>
 8009cde:	9801      	ldr	r0, [sp, #4]
 8009ce0:	2130      	movs	r1, #48	; 0x30
 8009ce2:	3201      	adds	r2, #1
 8009ce4:	7001      	strb	r1, [r0, #0]
 8009ce6:	7819      	ldrb	r1, [r3, #0]
 8009ce8:	3101      	adds	r1, #1
 8009cea:	7019      	strb	r1, [r3, #0]
 8009cec:	e7ae      	b.n	8009c4c <_dtoa_r+0x554>
 8009cee:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009cf2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cfa:	d1b2      	bne.n	8009c62 <_dtoa_r+0x56a>
 8009cfc:	e7d3      	b.n	8009ca6 <_dtoa_r+0x5ae>
 8009cfe:	bf00      	nop
 8009d00:	08031e18 	.word	0x08031e18
 8009d04:	08031df0 	.word	0x08031df0
 8009d08:	9907      	ldr	r1, [sp, #28]
 8009d0a:	2900      	cmp	r1, #0
 8009d0c:	f000 80d0 	beq.w	8009eb0 <_dtoa_r+0x7b8>
 8009d10:	9906      	ldr	r1, [sp, #24]
 8009d12:	2901      	cmp	r1, #1
 8009d14:	f300 80b4 	bgt.w	8009e80 <_dtoa_r+0x788>
 8009d18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d1a:	2900      	cmp	r1, #0
 8009d1c:	f000 80ac 	beq.w	8009e78 <_dtoa_r+0x780>
 8009d20:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009d24:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009d28:	461c      	mov	r4, r3
 8009d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d2c:	9b04      	ldr	r3, [sp, #16]
 8009d2e:	4413      	add	r3, r2
 8009d30:	9304      	str	r3, [sp, #16]
 8009d32:	9b05      	ldr	r3, [sp, #20]
 8009d34:	2101      	movs	r1, #1
 8009d36:	4413      	add	r3, r2
 8009d38:	4630      	mov	r0, r6
 8009d3a:	9305      	str	r3, [sp, #20]
 8009d3c:	f000 fc3e 	bl	800a5bc <__i2b>
 8009d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d42:	4607      	mov	r7, r0
 8009d44:	f1b8 0f00 	cmp.w	r8, #0
 8009d48:	d00d      	beq.n	8009d66 <_dtoa_r+0x66e>
 8009d4a:	9a05      	ldr	r2, [sp, #20]
 8009d4c:	2a00      	cmp	r2, #0
 8009d4e:	dd0a      	ble.n	8009d66 <_dtoa_r+0x66e>
 8009d50:	4542      	cmp	r2, r8
 8009d52:	9904      	ldr	r1, [sp, #16]
 8009d54:	bfa8      	it	ge
 8009d56:	4642      	movge	r2, r8
 8009d58:	1a89      	subs	r1, r1, r2
 8009d5a:	9104      	str	r1, [sp, #16]
 8009d5c:	9905      	ldr	r1, [sp, #20]
 8009d5e:	eba8 0802 	sub.w	r8, r8, r2
 8009d62:	1a8a      	subs	r2, r1, r2
 8009d64:	9205      	str	r2, [sp, #20]
 8009d66:	b303      	cbz	r3, 8009daa <_dtoa_r+0x6b2>
 8009d68:	9a07      	ldr	r2, [sp, #28]
 8009d6a:	2a00      	cmp	r2, #0
 8009d6c:	f000 80a5 	beq.w	8009eba <_dtoa_r+0x7c2>
 8009d70:	2c00      	cmp	r4, #0
 8009d72:	dd13      	ble.n	8009d9c <_dtoa_r+0x6a4>
 8009d74:	4639      	mov	r1, r7
 8009d76:	4622      	mov	r2, r4
 8009d78:	4630      	mov	r0, r6
 8009d7a:	930d      	str	r3, [sp, #52]	; 0x34
 8009d7c:	f000 fcde 	bl	800a73c <__pow5mult>
 8009d80:	462a      	mov	r2, r5
 8009d82:	4601      	mov	r1, r0
 8009d84:	4607      	mov	r7, r0
 8009d86:	4630      	mov	r0, r6
 8009d88:	f000 fc2e 	bl	800a5e8 <__multiply>
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	9009      	str	r0, [sp, #36]	; 0x24
 8009d90:	4630      	mov	r0, r6
 8009d92:	f000 fb5d 	bl	800a450 <_Bfree>
 8009d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d9a:	4615      	mov	r5, r2
 8009d9c:	1b1a      	subs	r2, r3, r4
 8009d9e:	d004      	beq.n	8009daa <_dtoa_r+0x6b2>
 8009da0:	4629      	mov	r1, r5
 8009da2:	4630      	mov	r0, r6
 8009da4:	f000 fcca 	bl	800a73c <__pow5mult>
 8009da8:	4605      	mov	r5, r0
 8009daa:	2101      	movs	r1, #1
 8009dac:	4630      	mov	r0, r6
 8009dae:	f000 fc05 	bl	800a5bc <__i2b>
 8009db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	4604      	mov	r4, r0
 8009db8:	f340 8081 	ble.w	8009ebe <_dtoa_r+0x7c6>
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	4601      	mov	r1, r0
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	f000 fcbb 	bl	800a73c <__pow5mult>
 8009dc6:	9b06      	ldr	r3, [sp, #24]
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	4604      	mov	r4, r0
 8009dcc:	dd7a      	ble.n	8009ec4 <_dtoa_r+0x7cc>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd2:	6922      	ldr	r2, [r4, #16]
 8009dd4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009dd8:	6910      	ldr	r0, [r2, #16]
 8009dda:	f000 fba1 	bl	800a520 <__hi0bits>
 8009dde:	f1c0 0020 	rsb	r0, r0, #32
 8009de2:	9b05      	ldr	r3, [sp, #20]
 8009de4:	4418      	add	r0, r3
 8009de6:	f010 001f 	ands.w	r0, r0, #31
 8009dea:	f000 8093 	beq.w	8009f14 <_dtoa_r+0x81c>
 8009dee:	f1c0 0220 	rsb	r2, r0, #32
 8009df2:	2a04      	cmp	r2, #4
 8009df4:	f340 8085 	ble.w	8009f02 <_dtoa_r+0x80a>
 8009df8:	9b04      	ldr	r3, [sp, #16]
 8009dfa:	f1c0 001c 	rsb	r0, r0, #28
 8009dfe:	4403      	add	r3, r0
 8009e00:	9304      	str	r3, [sp, #16]
 8009e02:	9b05      	ldr	r3, [sp, #20]
 8009e04:	4480      	add	r8, r0
 8009e06:	4403      	add	r3, r0
 8009e08:	9305      	str	r3, [sp, #20]
 8009e0a:	9b04      	ldr	r3, [sp, #16]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	dd05      	ble.n	8009e1c <_dtoa_r+0x724>
 8009e10:	4629      	mov	r1, r5
 8009e12:	461a      	mov	r2, r3
 8009e14:	4630      	mov	r0, r6
 8009e16:	f000 fceb 	bl	800a7f0 <__lshift>
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	9b05      	ldr	r3, [sp, #20]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	dd05      	ble.n	8009e2e <_dtoa_r+0x736>
 8009e22:	4621      	mov	r1, r4
 8009e24:	461a      	mov	r2, r3
 8009e26:	4630      	mov	r0, r6
 8009e28:	f000 fce2 	bl	800a7f0 <__lshift>
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d071      	beq.n	8009f18 <_dtoa_r+0x820>
 8009e34:	4621      	mov	r1, r4
 8009e36:	4628      	mov	r0, r5
 8009e38:	f000 fd46 	bl	800a8c8 <__mcmp>
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	da6b      	bge.n	8009f18 <_dtoa_r+0x820>
 8009e40:	2300      	movs	r3, #0
 8009e42:	4629      	mov	r1, r5
 8009e44:	220a      	movs	r2, #10
 8009e46:	4630      	mov	r0, r6
 8009e48:	f000 fb24 	bl	800a494 <__multadd>
 8009e4c:	9b07      	ldr	r3, [sp, #28]
 8009e4e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e52:	4605      	mov	r5, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f000 8197 	beq.w	800a188 <_dtoa_r+0xa90>
 8009e5a:	4639      	mov	r1, r7
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	220a      	movs	r2, #10
 8009e60:	4630      	mov	r0, r6
 8009e62:	f000 fb17 	bl	800a494 <__multadd>
 8009e66:	f1ba 0f00 	cmp.w	sl, #0
 8009e6a:	4607      	mov	r7, r0
 8009e6c:	f300 8093 	bgt.w	8009f96 <_dtoa_r+0x89e>
 8009e70:	9b06      	ldr	r3, [sp, #24]
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	dc57      	bgt.n	8009f26 <_dtoa_r+0x82e>
 8009e76:	e08e      	b.n	8009f96 <_dtoa_r+0x89e>
 8009e78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e7a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009e7e:	e751      	b.n	8009d24 <_dtoa_r+0x62c>
 8009e80:	f109 34ff 	add.w	r4, r9, #4294967295
 8009e84:	42a3      	cmp	r3, r4
 8009e86:	bfbf      	itttt	lt
 8009e88:	1ae2      	sublt	r2, r4, r3
 8009e8a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009e8c:	189b      	addlt	r3, r3, r2
 8009e8e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009e90:	bfae      	itee	ge
 8009e92:	1b1c      	subge	r4, r3, r4
 8009e94:	4623      	movlt	r3, r4
 8009e96:	2400      	movlt	r4, #0
 8009e98:	f1b9 0f00 	cmp.w	r9, #0
 8009e9c:	bfb5      	itete	lt
 8009e9e:	9a04      	ldrlt	r2, [sp, #16]
 8009ea0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009ea4:	eba2 0809 	sublt.w	r8, r2, r9
 8009ea8:	464a      	movge	r2, r9
 8009eaa:	bfb8      	it	lt
 8009eac:	2200      	movlt	r2, #0
 8009eae:	e73c      	b.n	8009d2a <_dtoa_r+0x632>
 8009eb0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009eb4:	9f07      	ldr	r7, [sp, #28]
 8009eb6:	461c      	mov	r4, r3
 8009eb8:	e744      	b.n	8009d44 <_dtoa_r+0x64c>
 8009eba:	461a      	mov	r2, r3
 8009ebc:	e770      	b.n	8009da0 <_dtoa_r+0x6a8>
 8009ebe:	9b06      	ldr	r3, [sp, #24]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	dc18      	bgt.n	8009ef6 <_dtoa_r+0x7fe>
 8009ec4:	9b02      	ldr	r3, [sp, #8]
 8009ec6:	b9b3      	cbnz	r3, 8009ef6 <_dtoa_r+0x7fe>
 8009ec8:	9b03      	ldr	r3, [sp, #12]
 8009eca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009ece:	b9a2      	cbnz	r2, 8009efa <_dtoa_r+0x802>
 8009ed0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ed4:	0d12      	lsrs	r2, r2, #20
 8009ed6:	0512      	lsls	r2, r2, #20
 8009ed8:	b18a      	cbz	r2, 8009efe <_dtoa_r+0x806>
 8009eda:	9b04      	ldr	r3, [sp, #16]
 8009edc:	3301      	adds	r3, #1
 8009ede:	9304      	str	r3, [sp, #16]
 8009ee0:	9b05      	ldr	r3, [sp, #20]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	9305      	str	r3, [sp, #20]
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8009eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f47f af70 	bne.w	8009dd2 <_dtoa_r+0x6da>
 8009ef2:	2001      	movs	r0, #1
 8009ef4:	e775      	b.n	8009de2 <_dtoa_r+0x6ea>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	e7f6      	b.n	8009ee8 <_dtoa_r+0x7f0>
 8009efa:	9b02      	ldr	r3, [sp, #8]
 8009efc:	e7f4      	b.n	8009ee8 <_dtoa_r+0x7f0>
 8009efe:	9209      	str	r2, [sp, #36]	; 0x24
 8009f00:	e7f3      	b.n	8009eea <_dtoa_r+0x7f2>
 8009f02:	d082      	beq.n	8009e0a <_dtoa_r+0x712>
 8009f04:	9b04      	ldr	r3, [sp, #16]
 8009f06:	321c      	adds	r2, #28
 8009f08:	4413      	add	r3, r2
 8009f0a:	9304      	str	r3, [sp, #16]
 8009f0c:	9b05      	ldr	r3, [sp, #20]
 8009f0e:	4490      	add	r8, r2
 8009f10:	4413      	add	r3, r2
 8009f12:	e779      	b.n	8009e08 <_dtoa_r+0x710>
 8009f14:	4602      	mov	r2, r0
 8009f16:	e7f5      	b.n	8009f04 <_dtoa_r+0x80c>
 8009f18:	f1b9 0f00 	cmp.w	r9, #0
 8009f1c:	dc36      	bgt.n	8009f8c <_dtoa_r+0x894>
 8009f1e:	9b06      	ldr	r3, [sp, #24]
 8009f20:	2b02      	cmp	r3, #2
 8009f22:	dd33      	ble.n	8009f8c <_dtoa_r+0x894>
 8009f24:	46ca      	mov	sl, r9
 8009f26:	f1ba 0f00 	cmp.w	sl, #0
 8009f2a:	d10d      	bne.n	8009f48 <_dtoa_r+0x850>
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	4653      	mov	r3, sl
 8009f30:	2205      	movs	r2, #5
 8009f32:	4630      	mov	r0, r6
 8009f34:	f000 faae 	bl	800a494 <__multadd>
 8009f38:	4601      	mov	r1, r0
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	f000 fcc3 	bl	800a8c8 <__mcmp>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	f73f ade4 	bgt.w	8009b10 <_dtoa_r+0x418>
 8009f48:	9b08      	ldr	r3, [sp, #32]
 8009f4a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009f4e:	ea6f 0b03 	mvn.w	fp, r3
 8009f52:	f04f 0900 	mov.w	r9, #0
 8009f56:	4621      	mov	r1, r4
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f000 fa79 	bl	800a450 <_Bfree>
 8009f5e:	2f00      	cmp	r7, #0
 8009f60:	f43f aea1 	beq.w	8009ca6 <_dtoa_r+0x5ae>
 8009f64:	f1b9 0f00 	cmp.w	r9, #0
 8009f68:	d005      	beq.n	8009f76 <_dtoa_r+0x87e>
 8009f6a:	45b9      	cmp	r9, r7
 8009f6c:	d003      	beq.n	8009f76 <_dtoa_r+0x87e>
 8009f6e:	4649      	mov	r1, r9
 8009f70:	4630      	mov	r0, r6
 8009f72:	f000 fa6d 	bl	800a450 <_Bfree>
 8009f76:	4639      	mov	r1, r7
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f000 fa69 	bl	800a450 <_Bfree>
 8009f7e:	e692      	b.n	8009ca6 <_dtoa_r+0x5ae>
 8009f80:	2400      	movs	r4, #0
 8009f82:	4627      	mov	r7, r4
 8009f84:	e7e0      	b.n	8009f48 <_dtoa_r+0x850>
 8009f86:	4693      	mov	fp, r2
 8009f88:	4627      	mov	r7, r4
 8009f8a:	e5c1      	b.n	8009b10 <_dtoa_r+0x418>
 8009f8c:	9b07      	ldr	r3, [sp, #28]
 8009f8e:	46ca      	mov	sl, r9
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	f000 8100 	beq.w	800a196 <_dtoa_r+0xa9e>
 8009f96:	f1b8 0f00 	cmp.w	r8, #0
 8009f9a:	dd05      	ble.n	8009fa8 <_dtoa_r+0x8b0>
 8009f9c:	4639      	mov	r1, r7
 8009f9e:	4642      	mov	r2, r8
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	f000 fc25 	bl	800a7f0 <__lshift>
 8009fa6:	4607      	mov	r7, r0
 8009fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d05d      	beq.n	800a06a <_dtoa_r+0x972>
 8009fae:	6879      	ldr	r1, [r7, #4]
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f000 fa0d 	bl	800a3d0 <_Balloc>
 8009fb6:	4680      	mov	r8, r0
 8009fb8:	b928      	cbnz	r0, 8009fc6 <_dtoa_r+0x8ce>
 8009fba:	4b82      	ldr	r3, [pc, #520]	; (800a1c4 <_dtoa_r+0xacc>)
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009fc2:	f7ff bbb1 	b.w	8009728 <_dtoa_r+0x30>
 8009fc6:	693a      	ldr	r2, [r7, #16]
 8009fc8:	3202      	adds	r2, #2
 8009fca:	0092      	lsls	r2, r2, #2
 8009fcc:	f107 010c 	add.w	r1, r7, #12
 8009fd0:	300c      	adds	r0, #12
 8009fd2:	f000 ffa9 	bl	800af28 <memcpy>
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	4641      	mov	r1, r8
 8009fda:	4630      	mov	r0, r6
 8009fdc:	f000 fc08 	bl	800a7f0 <__lshift>
 8009fe0:	9b01      	ldr	r3, [sp, #4]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	9304      	str	r3, [sp, #16]
 8009fe6:	9b01      	ldr	r3, [sp, #4]
 8009fe8:	4453      	add	r3, sl
 8009fea:	9308      	str	r3, [sp, #32]
 8009fec:	9b02      	ldr	r3, [sp, #8]
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	46b9      	mov	r9, r7
 8009ff4:	9307      	str	r3, [sp, #28]
 8009ff6:	4607      	mov	r7, r0
 8009ff8:	9b04      	ldr	r3, [sp, #16]
 8009ffa:	4621      	mov	r1, r4
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	4628      	mov	r0, r5
 800a000:	9302      	str	r3, [sp, #8]
 800a002:	f7ff faf0 	bl	80095e6 <quorem>
 800a006:	4603      	mov	r3, r0
 800a008:	3330      	adds	r3, #48	; 0x30
 800a00a:	9005      	str	r0, [sp, #20]
 800a00c:	4649      	mov	r1, r9
 800a00e:	4628      	mov	r0, r5
 800a010:	9309      	str	r3, [sp, #36]	; 0x24
 800a012:	f000 fc59 	bl	800a8c8 <__mcmp>
 800a016:	463a      	mov	r2, r7
 800a018:	4682      	mov	sl, r0
 800a01a:	4621      	mov	r1, r4
 800a01c:	4630      	mov	r0, r6
 800a01e:	f000 fc6f 	bl	800a900 <__mdiff>
 800a022:	68c2      	ldr	r2, [r0, #12]
 800a024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a026:	4680      	mov	r8, r0
 800a028:	bb0a      	cbnz	r2, 800a06e <_dtoa_r+0x976>
 800a02a:	4601      	mov	r1, r0
 800a02c:	4628      	mov	r0, r5
 800a02e:	f000 fc4b 	bl	800a8c8 <__mcmp>
 800a032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a034:	4602      	mov	r2, r0
 800a036:	4641      	mov	r1, r8
 800a038:	4630      	mov	r0, r6
 800a03a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a03e:	f000 fa07 	bl	800a450 <_Bfree>
 800a042:	9b06      	ldr	r3, [sp, #24]
 800a044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a046:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a04a:	ea43 0102 	orr.w	r1, r3, r2
 800a04e:	9b07      	ldr	r3, [sp, #28]
 800a050:	4319      	orrs	r1, r3
 800a052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a054:	d10d      	bne.n	800a072 <_dtoa_r+0x97a>
 800a056:	2b39      	cmp	r3, #57	; 0x39
 800a058:	d029      	beq.n	800a0ae <_dtoa_r+0x9b6>
 800a05a:	f1ba 0f00 	cmp.w	sl, #0
 800a05e:	dd01      	ble.n	800a064 <_dtoa_r+0x96c>
 800a060:	9b05      	ldr	r3, [sp, #20]
 800a062:	3331      	adds	r3, #49	; 0x31
 800a064:	9a02      	ldr	r2, [sp, #8]
 800a066:	7013      	strb	r3, [r2, #0]
 800a068:	e775      	b.n	8009f56 <_dtoa_r+0x85e>
 800a06a:	4638      	mov	r0, r7
 800a06c:	e7b8      	b.n	8009fe0 <_dtoa_r+0x8e8>
 800a06e:	2201      	movs	r2, #1
 800a070:	e7e1      	b.n	800a036 <_dtoa_r+0x93e>
 800a072:	f1ba 0f00 	cmp.w	sl, #0
 800a076:	db06      	blt.n	800a086 <_dtoa_r+0x98e>
 800a078:	9906      	ldr	r1, [sp, #24]
 800a07a:	ea41 0a0a 	orr.w	sl, r1, sl
 800a07e:	9907      	ldr	r1, [sp, #28]
 800a080:	ea5a 0a01 	orrs.w	sl, sl, r1
 800a084:	d120      	bne.n	800a0c8 <_dtoa_r+0x9d0>
 800a086:	2a00      	cmp	r2, #0
 800a088:	ddec      	ble.n	800a064 <_dtoa_r+0x96c>
 800a08a:	4629      	mov	r1, r5
 800a08c:	2201      	movs	r2, #1
 800a08e:	4630      	mov	r0, r6
 800a090:	9304      	str	r3, [sp, #16]
 800a092:	f000 fbad 	bl	800a7f0 <__lshift>
 800a096:	4621      	mov	r1, r4
 800a098:	4605      	mov	r5, r0
 800a09a:	f000 fc15 	bl	800a8c8 <__mcmp>
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	9b04      	ldr	r3, [sp, #16]
 800a0a2:	dc02      	bgt.n	800a0aa <_dtoa_r+0x9b2>
 800a0a4:	d1de      	bne.n	800a064 <_dtoa_r+0x96c>
 800a0a6:	07da      	lsls	r2, r3, #31
 800a0a8:	d5dc      	bpl.n	800a064 <_dtoa_r+0x96c>
 800a0aa:	2b39      	cmp	r3, #57	; 0x39
 800a0ac:	d1d8      	bne.n	800a060 <_dtoa_r+0x968>
 800a0ae:	9a02      	ldr	r2, [sp, #8]
 800a0b0:	2339      	movs	r3, #57	; 0x39
 800a0b2:	7013      	strb	r3, [r2, #0]
 800a0b4:	4643      	mov	r3, r8
 800a0b6:	4698      	mov	r8, r3
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a0be:	2a39      	cmp	r2, #57	; 0x39
 800a0c0:	d051      	beq.n	800a166 <_dtoa_r+0xa6e>
 800a0c2:	3201      	adds	r2, #1
 800a0c4:	701a      	strb	r2, [r3, #0]
 800a0c6:	e746      	b.n	8009f56 <_dtoa_r+0x85e>
 800a0c8:	2a00      	cmp	r2, #0
 800a0ca:	dd03      	ble.n	800a0d4 <_dtoa_r+0x9dc>
 800a0cc:	2b39      	cmp	r3, #57	; 0x39
 800a0ce:	d0ee      	beq.n	800a0ae <_dtoa_r+0x9b6>
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	e7c7      	b.n	800a064 <_dtoa_r+0x96c>
 800a0d4:	9a04      	ldr	r2, [sp, #16]
 800a0d6:	9908      	ldr	r1, [sp, #32]
 800a0d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a0dc:	428a      	cmp	r2, r1
 800a0de:	d02b      	beq.n	800a138 <_dtoa_r+0xa40>
 800a0e0:	4629      	mov	r1, r5
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	220a      	movs	r2, #10
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	f000 f9d4 	bl	800a494 <__multadd>
 800a0ec:	45b9      	cmp	r9, r7
 800a0ee:	4605      	mov	r5, r0
 800a0f0:	f04f 0300 	mov.w	r3, #0
 800a0f4:	f04f 020a 	mov.w	r2, #10
 800a0f8:	4649      	mov	r1, r9
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	d107      	bne.n	800a10e <_dtoa_r+0xa16>
 800a0fe:	f000 f9c9 	bl	800a494 <__multadd>
 800a102:	4681      	mov	r9, r0
 800a104:	4607      	mov	r7, r0
 800a106:	9b04      	ldr	r3, [sp, #16]
 800a108:	3301      	adds	r3, #1
 800a10a:	9304      	str	r3, [sp, #16]
 800a10c:	e774      	b.n	8009ff8 <_dtoa_r+0x900>
 800a10e:	f000 f9c1 	bl	800a494 <__multadd>
 800a112:	4639      	mov	r1, r7
 800a114:	4681      	mov	r9, r0
 800a116:	2300      	movs	r3, #0
 800a118:	220a      	movs	r2, #10
 800a11a:	4630      	mov	r0, r6
 800a11c:	f000 f9ba 	bl	800a494 <__multadd>
 800a120:	4607      	mov	r7, r0
 800a122:	e7f0      	b.n	800a106 <_dtoa_r+0xa0e>
 800a124:	f1ba 0f00 	cmp.w	sl, #0
 800a128:	9a01      	ldr	r2, [sp, #4]
 800a12a:	bfcc      	ite	gt
 800a12c:	46d0      	movgt	r8, sl
 800a12e:	f04f 0801 	movle.w	r8, #1
 800a132:	4490      	add	r8, r2
 800a134:	f04f 0900 	mov.w	r9, #0
 800a138:	4629      	mov	r1, r5
 800a13a:	2201      	movs	r2, #1
 800a13c:	4630      	mov	r0, r6
 800a13e:	9302      	str	r3, [sp, #8]
 800a140:	f000 fb56 	bl	800a7f0 <__lshift>
 800a144:	4621      	mov	r1, r4
 800a146:	4605      	mov	r5, r0
 800a148:	f000 fbbe 	bl	800a8c8 <__mcmp>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	dcb1      	bgt.n	800a0b4 <_dtoa_r+0x9bc>
 800a150:	d102      	bne.n	800a158 <_dtoa_r+0xa60>
 800a152:	9b02      	ldr	r3, [sp, #8]
 800a154:	07db      	lsls	r3, r3, #31
 800a156:	d4ad      	bmi.n	800a0b4 <_dtoa_r+0x9bc>
 800a158:	4643      	mov	r3, r8
 800a15a:	4698      	mov	r8, r3
 800a15c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a160:	2a30      	cmp	r2, #48	; 0x30
 800a162:	d0fa      	beq.n	800a15a <_dtoa_r+0xa62>
 800a164:	e6f7      	b.n	8009f56 <_dtoa_r+0x85e>
 800a166:	9a01      	ldr	r2, [sp, #4]
 800a168:	429a      	cmp	r2, r3
 800a16a:	d1a4      	bne.n	800a0b6 <_dtoa_r+0x9be>
 800a16c:	f10b 0b01 	add.w	fp, fp, #1
 800a170:	2331      	movs	r3, #49	; 0x31
 800a172:	e778      	b.n	800a066 <_dtoa_r+0x96e>
 800a174:	4b14      	ldr	r3, [pc, #80]	; (800a1c8 <_dtoa_r+0xad0>)
 800a176:	f7ff bb2a 	b.w	80097ce <_dtoa_r+0xd6>
 800a17a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f47f ab05 	bne.w	800978c <_dtoa_r+0x94>
 800a182:	4b12      	ldr	r3, [pc, #72]	; (800a1cc <_dtoa_r+0xad4>)
 800a184:	f7ff bb23 	b.w	80097ce <_dtoa_r+0xd6>
 800a188:	f1ba 0f00 	cmp.w	sl, #0
 800a18c:	dc03      	bgt.n	800a196 <_dtoa_r+0xa9e>
 800a18e:	9b06      	ldr	r3, [sp, #24]
 800a190:	2b02      	cmp	r3, #2
 800a192:	f73f aec8 	bgt.w	8009f26 <_dtoa_r+0x82e>
 800a196:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a19a:	4621      	mov	r1, r4
 800a19c:	4628      	mov	r0, r5
 800a19e:	f7ff fa22 	bl	80095e6 <quorem>
 800a1a2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a1a6:	f808 3b01 	strb.w	r3, [r8], #1
 800a1aa:	9a01      	ldr	r2, [sp, #4]
 800a1ac:	eba8 0202 	sub.w	r2, r8, r2
 800a1b0:	4592      	cmp	sl, r2
 800a1b2:	ddb7      	ble.n	800a124 <_dtoa_r+0xa2c>
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	220a      	movs	r2, #10
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	f000 f96a 	bl	800a494 <__multadd>
 800a1c0:	4605      	mov	r5, r0
 800a1c2:	e7ea      	b.n	800a19a <_dtoa_r+0xaa2>
 800a1c4:	08031d84 	.word	0x08031d84
 800a1c8:	08031ce4 	.word	0x08031ce4
 800a1cc:	08031d08 	.word	0x08031d08

0800a1d0 <_free_r>:
 800a1d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1d2:	2900      	cmp	r1, #0
 800a1d4:	d044      	beq.n	800a260 <_free_r+0x90>
 800a1d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1da:	9001      	str	r0, [sp, #4]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	f1a1 0404 	sub.w	r4, r1, #4
 800a1e2:	bfb8      	it	lt
 800a1e4:	18e4      	addlt	r4, r4, r3
 800a1e6:	f000 f8e7 	bl	800a3b8 <__malloc_lock>
 800a1ea:	4a1e      	ldr	r2, [pc, #120]	; (800a264 <_free_r+0x94>)
 800a1ec:	9801      	ldr	r0, [sp, #4]
 800a1ee:	6813      	ldr	r3, [r2, #0]
 800a1f0:	b933      	cbnz	r3, 800a200 <_free_r+0x30>
 800a1f2:	6063      	str	r3, [r4, #4]
 800a1f4:	6014      	str	r4, [r2, #0]
 800a1f6:	b003      	add	sp, #12
 800a1f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1fc:	f000 b8e2 	b.w	800a3c4 <__malloc_unlock>
 800a200:	42a3      	cmp	r3, r4
 800a202:	d908      	bls.n	800a216 <_free_r+0x46>
 800a204:	6825      	ldr	r5, [r4, #0]
 800a206:	1961      	adds	r1, r4, r5
 800a208:	428b      	cmp	r3, r1
 800a20a:	bf01      	itttt	eq
 800a20c:	6819      	ldreq	r1, [r3, #0]
 800a20e:	685b      	ldreq	r3, [r3, #4]
 800a210:	1949      	addeq	r1, r1, r5
 800a212:	6021      	streq	r1, [r4, #0]
 800a214:	e7ed      	b.n	800a1f2 <_free_r+0x22>
 800a216:	461a      	mov	r2, r3
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	b10b      	cbz	r3, 800a220 <_free_r+0x50>
 800a21c:	42a3      	cmp	r3, r4
 800a21e:	d9fa      	bls.n	800a216 <_free_r+0x46>
 800a220:	6811      	ldr	r1, [r2, #0]
 800a222:	1855      	adds	r5, r2, r1
 800a224:	42a5      	cmp	r5, r4
 800a226:	d10b      	bne.n	800a240 <_free_r+0x70>
 800a228:	6824      	ldr	r4, [r4, #0]
 800a22a:	4421      	add	r1, r4
 800a22c:	1854      	adds	r4, r2, r1
 800a22e:	42a3      	cmp	r3, r4
 800a230:	6011      	str	r1, [r2, #0]
 800a232:	d1e0      	bne.n	800a1f6 <_free_r+0x26>
 800a234:	681c      	ldr	r4, [r3, #0]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	6053      	str	r3, [r2, #4]
 800a23a:	440c      	add	r4, r1
 800a23c:	6014      	str	r4, [r2, #0]
 800a23e:	e7da      	b.n	800a1f6 <_free_r+0x26>
 800a240:	d902      	bls.n	800a248 <_free_r+0x78>
 800a242:	230c      	movs	r3, #12
 800a244:	6003      	str	r3, [r0, #0]
 800a246:	e7d6      	b.n	800a1f6 <_free_r+0x26>
 800a248:	6825      	ldr	r5, [r4, #0]
 800a24a:	1961      	adds	r1, r4, r5
 800a24c:	428b      	cmp	r3, r1
 800a24e:	bf04      	itt	eq
 800a250:	6819      	ldreq	r1, [r3, #0]
 800a252:	685b      	ldreq	r3, [r3, #4]
 800a254:	6063      	str	r3, [r4, #4]
 800a256:	bf04      	itt	eq
 800a258:	1949      	addeq	r1, r1, r5
 800a25a:	6021      	streq	r1, [r4, #0]
 800a25c:	6054      	str	r4, [r2, #4]
 800a25e:	e7ca      	b.n	800a1f6 <_free_r+0x26>
 800a260:	b003      	add	sp, #12
 800a262:	bd30      	pop	{r4, r5, pc}
 800a264:	20000f98 	.word	0x20000f98

0800a268 <malloc>:
 800a268:	4b02      	ldr	r3, [pc, #8]	; (800a274 <malloc+0xc>)
 800a26a:	4601      	mov	r1, r0
 800a26c:	6818      	ldr	r0, [r3, #0]
 800a26e:	f000 b823 	b.w	800a2b8 <_malloc_r>
 800a272:	bf00      	nop
 800a274:	20000068 	.word	0x20000068

0800a278 <sbrk_aligned>:
 800a278:	b570      	push	{r4, r5, r6, lr}
 800a27a:	4e0e      	ldr	r6, [pc, #56]	; (800a2b4 <sbrk_aligned+0x3c>)
 800a27c:	460c      	mov	r4, r1
 800a27e:	6831      	ldr	r1, [r6, #0]
 800a280:	4605      	mov	r5, r0
 800a282:	b911      	cbnz	r1, 800a28a <sbrk_aligned+0x12>
 800a284:	f000 fe40 	bl	800af08 <_sbrk_r>
 800a288:	6030      	str	r0, [r6, #0]
 800a28a:	4621      	mov	r1, r4
 800a28c:	4628      	mov	r0, r5
 800a28e:	f000 fe3b 	bl	800af08 <_sbrk_r>
 800a292:	1c43      	adds	r3, r0, #1
 800a294:	d00a      	beq.n	800a2ac <sbrk_aligned+0x34>
 800a296:	1cc4      	adds	r4, r0, #3
 800a298:	f024 0403 	bic.w	r4, r4, #3
 800a29c:	42a0      	cmp	r0, r4
 800a29e:	d007      	beq.n	800a2b0 <sbrk_aligned+0x38>
 800a2a0:	1a21      	subs	r1, r4, r0
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	f000 fe30 	bl	800af08 <_sbrk_r>
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	d101      	bne.n	800a2b0 <sbrk_aligned+0x38>
 800a2ac:	f04f 34ff 	mov.w	r4, #4294967295
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	bd70      	pop	{r4, r5, r6, pc}
 800a2b4:	20000f9c 	.word	0x20000f9c

0800a2b8 <_malloc_r>:
 800a2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2bc:	1ccd      	adds	r5, r1, #3
 800a2be:	f025 0503 	bic.w	r5, r5, #3
 800a2c2:	3508      	adds	r5, #8
 800a2c4:	2d0c      	cmp	r5, #12
 800a2c6:	bf38      	it	cc
 800a2c8:	250c      	movcc	r5, #12
 800a2ca:	2d00      	cmp	r5, #0
 800a2cc:	4607      	mov	r7, r0
 800a2ce:	db01      	blt.n	800a2d4 <_malloc_r+0x1c>
 800a2d0:	42a9      	cmp	r1, r5
 800a2d2:	d905      	bls.n	800a2e0 <_malloc_r+0x28>
 800a2d4:	230c      	movs	r3, #12
 800a2d6:	603b      	str	r3, [r7, #0]
 800a2d8:	2600      	movs	r6, #0
 800a2da:	4630      	mov	r0, r6
 800a2dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a3b4 <_malloc_r+0xfc>
 800a2e4:	f000 f868 	bl	800a3b8 <__malloc_lock>
 800a2e8:	f8d8 3000 	ldr.w	r3, [r8]
 800a2ec:	461c      	mov	r4, r3
 800a2ee:	bb5c      	cbnz	r4, 800a348 <_malloc_r+0x90>
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	4638      	mov	r0, r7
 800a2f4:	f7ff ffc0 	bl	800a278 <sbrk_aligned>
 800a2f8:	1c43      	adds	r3, r0, #1
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	d155      	bne.n	800a3aa <_malloc_r+0xf2>
 800a2fe:	f8d8 4000 	ldr.w	r4, [r8]
 800a302:	4626      	mov	r6, r4
 800a304:	2e00      	cmp	r6, #0
 800a306:	d145      	bne.n	800a394 <_malloc_r+0xdc>
 800a308:	2c00      	cmp	r4, #0
 800a30a:	d048      	beq.n	800a39e <_malloc_r+0xe6>
 800a30c:	6823      	ldr	r3, [r4, #0]
 800a30e:	4631      	mov	r1, r6
 800a310:	4638      	mov	r0, r7
 800a312:	eb04 0903 	add.w	r9, r4, r3
 800a316:	f000 fdf7 	bl	800af08 <_sbrk_r>
 800a31a:	4581      	cmp	r9, r0
 800a31c:	d13f      	bne.n	800a39e <_malloc_r+0xe6>
 800a31e:	6821      	ldr	r1, [r4, #0]
 800a320:	1a6d      	subs	r5, r5, r1
 800a322:	4629      	mov	r1, r5
 800a324:	4638      	mov	r0, r7
 800a326:	f7ff ffa7 	bl	800a278 <sbrk_aligned>
 800a32a:	3001      	adds	r0, #1
 800a32c:	d037      	beq.n	800a39e <_malloc_r+0xe6>
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	442b      	add	r3, r5
 800a332:	6023      	str	r3, [r4, #0]
 800a334:	f8d8 3000 	ldr.w	r3, [r8]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d038      	beq.n	800a3ae <_malloc_r+0xf6>
 800a33c:	685a      	ldr	r2, [r3, #4]
 800a33e:	42a2      	cmp	r2, r4
 800a340:	d12b      	bne.n	800a39a <_malloc_r+0xe2>
 800a342:	2200      	movs	r2, #0
 800a344:	605a      	str	r2, [r3, #4]
 800a346:	e00f      	b.n	800a368 <_malloc_r+0xb0>
 800a348:	6822      	ldr	r2, [r4, #0]
 800a34a:	1b52      	subs	r2, r2, r5
 800a34c:	d41f      	bmi.n	800a38e <_malloc_r+0xd6>
 800a34e:	2a0b      	cmp	r2, #11
 800a350:	d917      	bls.n	800a382 <_malloc_r+0xca>
 800a352:	1961      	adds	r1, r4, r5
 800a354:	42a3      	cmp	r3, r4
 800a356:	6025      	str	r5, [r4, #0]
 800a358:	bf18      	it	ne
 800a35a:	6059      	strne	r1, [r3, #4]
 800a35c:	6863      	ldr	r3, [r4, #4]
 800a35e:	bf08      	it	eq
 800a360:	f8c8 1000 	streq.w	r1, [r8]
 800a364:	5162      	str	r2, [r4, r5]
 800a366:	604b      	str	r3, [r1, #4]
 800a368:	4638      	mov	r0, r7
 800a36a:	f104 060b 	add.w	r6, r4, #11
 800a36e:	f000 f829 	bl	800a3c4 <__malloc_unlock>
 800a372:	f026 0607 	bic.w	r6, r6, #7
 800a376:	1d23      	adds	r3, r4, #4
 800a378:	1af2      	subs	r2, r6, r3
 800a37a:	d0ae      	beq.n	800a2da <_malloc_r+0x22>
 800a37c:	1b9b      	subs	r3, r3, r6
 800a37e:	50a3      	str	r3, [r4, r2]
 800a380:	e7ab      	b.n	800a2da <_malloc_r+0x22>
 800a382:	42a3      	cmp	r3, r4
 800a384:	6862      	ldr	r2, [r4, #4]
 800a386:	d1dd      	bne.n	800a344 <_malloc_r+0x8c>
 800a388:	f8c8 2000 	str.w	r2, [r8]
 800a38c:	e7ec      	b.n	800a368 <_malloc_r+0xb0>
 800a38e:	4623      	mov	r3, r4
 800a390:	6864      	ldr	r4, [r4, #4]
 800a392:	e7ac      	b.n	800a2ee <_malloc_r+0x36>
 800a394:	4634      	mov	r4, r6
 800a396:	6876      	ldr	r6, [r6, #4]
 800a398:	e7b4      	b.n	800a304 <_malloc_r+0x4c>
 800a39a:	4613      	mov	r3, r2
 800a39c:	e7cc      	b.n	800a338 <_malloc_r+0x80>
 800a39e:	230c      	movs	r3, #12
 800a3a0:	603b      	str	r3, [r7, #0]
 800a3a2:	4638      	mov	r0, r7
 800a3a4:	f000 f80e 	bl	800a3c4 <__malloc_unlock>
 800a3a8:	e797      	b.n	800a2da <_malloc_r+0x22>
 800a3aa:	6025      	str	r5, [r4, #0]
 800a3ac:	e7dc      	b.n	800a368 <_malloc_r+0xb0>
 800a3ae:	605b      	str	r3, [r3, #4]
 800a3b0:	deff      	udf	#255	; 0xff
 800a3b2:	bf00      	nop
 800a3b4:	20000f98 	.word	0x20000f98

0800a3b8 <__malloc_lock>:
 800a3b8:	4801      	ldr	r0, [pc, #4]	; (800a3c0 <__malloc_lock+0x8>)
 800a3ba:	f7ff b912 	b.w	80095e2 <__retarget_lock_acquire_recursive>
 800a3be:	bf00      	nop
 800a3c0:	20000f94 	.word	0x20000f94

0800a3c4 <__malloc_unlock>:
 800a3c4:	4801      	ldr	r0, [pc, #4]	; (800a3cc <__malloc_unlock+0x8>)
 800a3c6:	f7ff b90d 	b.w	80095e4 <__retarget_lock_release_recursive>
 800a3ca:	bf00      	nop
 800a3cc:	20000f94 	.word	0x20000f94

0800a3d0 <_Balloc>:
 800a3d0:	b570      	push	{r4, r5, r6, lr}
 800a3d2:	69c6      	ldr	r6, [r0, #28]
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	460d      	mov	r5, r1
 800a3d8:	b976      	cbnz	r6, 800a3f8 <_Balloc+0x28>
 800a3da:	2010      	movs	r0, #16
 800a3dc:	f7ff ff44 	bl	800a268 <malloc>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	61e0      	str	r0, [r4, #28]
 800a3e4:	b920      	cbnz	r0, 800a3f0 <_Balloc+0x20>
 800a3e6:	4b18      	ldr	r3, [pc, #96]	; (800a448 <_Balloc+0x78>)
 800a3e8:	4818      	ldr	r0, [pc, #96]	; (800a44c <_Balloc+0x7c>)
 800a3ea:	216b      	movs	r1, #107	; 0x6b
 800a3ec:	f000 fdaa 	bl	800af44 <__assert_func>
 800a3f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3f4:	6006      	str	r6, [r0, #0]
 800a3f6:	60c6      	str	r6, [r0, #12]
 800a3f8:	69e6      	ldr	r6, [r4, #28]
 800a3fa:	68f3      	ldr	r3, [r6, #12]
 800a3fc:	b183      	cbz	r3, 800a420 <_Balloc+0x50>
 800a3fe:	69e3      	ldr	r3, [r4, #28]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a406:	b9b8      	cbnz	r0, 800a438 <_Balloc+0x68>
 800a408:	2101      	movs	r1, #1
 800a40a:	fa01 f605 	lsl.w	r6, r1, r5
 800a40e:	1d72      	adds	r2, r6, #5
 800a410:	0092      	lsls	r2, r2, #2
 800a412:	4620      	mov	r0, r4
 800a414:	f000 fdb4 	bl	800af80 <_calloc_r>
 800a418:	b160      	cbz	r0, 800a434 <_Balloc+0x64>
 800a41a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a41e:	e00e      	b.n	800a43e <_Balloc+0x6e>
 800a420:	2221      	movs	r2, #33	; 0x21
 800a422:	2104      	movs	r1, #4
 800a424:	4620      	mov	r0, r4
 800a426:	f000 fdab 	bl	800af80 <_calloc_r>
 800a42a:	69e3      	ldr	r3, [r4, #28]
 800a42c:	60f0      	str	r0, [r6, #12]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1e4      	bne.n	800a3fe <_Balloc+0x2e>
 800a434:	2000      	movs	r0, #0
 800a436:	bd70      	pop	{r4, r5, r6, pc}
 800a438:	6802      	ldr	r2, [r0, #0]
 800a43a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a43e:	2300      	movs	r3, #0
 800a440:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a444:	e7f7      	b.n	800a436 <_Balloc+0x66>
 800a446:	bf00      	nop
 800a448:	08031d15 	.word	0x08031d15
 800a44c:	08031d95 	.word	0x08031d95

0800a450 <_Bfree>:
 800a450:	b570      	push	{r4, r5, r6, lr}
 800a452:	69c6      	ldr	r6, [r0, #28]
 800a454:	4605      	mov	r5, r0
 800a456:	460c      	mov	r4, r1
 800a458:	b976      	cbnz	r6, 800a478 <_Bfree+0x28>
 800a45a:	2010      	movs	r0, #16
 800a45c:	f7ff ff04 	bl	800a268 <malloc>
 800a460:	4602      	mov	r2, r0
 800a462:	61e8      	str	r0, [r5, #28]
 800a464:	b920      	cbnz	r0, 800a470 <_Bfree+0x20>
 800a466:	4b09      	ldr	r3, [pc, #36]	; (800a48c <_Bfree+0x3c>)
 800a468:	4809      	ldr	r0, [pc, #36]	; (800a490 <_Bfree+0x40>)
 800a46a:	218f      	movs	r1, #143	; 0x8f
 800a46c:	f000 fd6a 	bl	800af44 <__assert_func>
 800a470:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a474:	6006      	str	r6, [r0, #0]
 800a476:	60c6      	str	r6, [r0, #12]
 800a478:	b13c      	cbz	r4, 800a48a <_Bfree+0x3a>
 800a47a:	69eb      	ldr	r3, [r5, #28]
 800a47c:	6862      	ldr	r2, [r4, #4]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a484:	6021      	str	r1, [r4, #0]
 800a486:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a48a:	bd70      	pop	{r4, r5, r6, pc}
 800a48c:	08031d15 	.word	0x08031d15
 800a490:	08031d95 	.word	0x08031d95

0800a494 <__multadd>:
 800a494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a498:	690d      	ldr	r5, [r1, #16]
 800a49a:	4607      	mov	r7, r0
 800a49c:	460c      	mov	r4, r1
 800a49e:	461e      	mov	r6, r3
 800a4a0:	f101 0c14 	add.w	ip, r1, #20
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	f8dc 3000 	ldr.w	r3, [ip]
 800a4aa:	b299      	uxth	r1, r3
 800a4ac:	fb02 6101 	mla	r1, r2, r1, r6
 800a4b0:	0c1e      	lsrs	r6, r3, #16
 800a4b2:	0c0b      	lsrs	r3, r1, #16
 800a4b4:	fb02 3306 	mla	r3, r2, r6, r3
 800a4b8:	b289      	uxth	r1, r1
 800a4ba:	3001      	adds	r0, #1
 800a4bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4c0:	4285      	cmp	r5, r0
 800a4c2:	f84c 1b04 	str.w	r1, [ip], #4
 800a4c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4ca:	dcec      	bgt.n	800a4a6 <__multadd+0x12>
 800a4cc:	b30e      	cbz	r6, 800a512 <__multadd+0x7e>
 800a4ce:	68a3      	ldr	r3, [r4, #8]
 800a4d0:	42ab      	cmp	r3, r5
 800a4d2:	dc19      	bgt.n	800a508 <__multadd+0x74>
 800a4d4:	6861      	ldr	r1, [r4, #4]
 800a4d6:	4638      	mov	r0, r7
 800a4d8:	3101      	adds	r1, #1
 800a4da:	f7ff ff79 	bl	800a3d0 <_Balloc>
 800a4de:	4680      	mov	r8, r0
 800a4e0:	b928      	cbnz	r0, 800a4ee <__multadd+0x5a>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	4b0c      	ldr	r3, [pc, #48]	; (800a518 <__multadd+0x84>)
 800a4e6:	480d      	ldr	r0, [pc, #52]	; (800a51c <__multadd+0x88>)
 800a4e8:	21ba      	movs	r1, #186	; 0xba
 800a4ea:	f000 fd2b 	bl	800af44 <__assert_func>
 800a4ee:	6922      	ldr	r2, [r4, #16]
 800a4f0:	3202      	adds	r2, #2
 800a4f2:	f104 010c 	add.w	r1, r4, #12
 800a4f6:	0092      	lsls	r2, r2, #2
 800a4f8:	300c      	adds	r0, #12
 800a4fa:	f000 fd15 	bl	800af28 <memcpy>
 800a4fe:	4621      	mov	r1, r4
 800a500:	4638      	mov	r0, r7
 800a502:	f7ff ffa5 	bl	800a450 <_Bfree>
 800a506:	4644      	mov	r4, r8
 800a508:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a50c:	3501      	adds	r5, #1
 800a50e:	615e      	str	r6, [r3, #20]
 800a510:	6125      	str	r5, [r4, #16]
 800a512:	4620      	mov	r0, r4
 800a514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a518:	08031d84 	.word	0x08031d84
 800a51c:	08031d95 	.word	0x08031d95

0800a520 <__hi0bits>:
 800a520:	0c03      	lsrs	r3, r0, #16
 800a522:	041b      	lsls	r3, r3, #16
 800a524:	b9d3      	cbnz	r3, 800a55c <__hi0bits+0x3c>
 800a526:	0400      	lsls	r0, r0, #16
 800a528:	2310      	movs	r3, #16
 800a52a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a52e:	bf04      	itt	eq
 800a530:	0200      	lsleq	r0, r0, #8
 800a532:	3308      	addeq	r3, #8
 800a534:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a538:	bf04      	itt	eq
 800a53a:	0100      	lsleq	r0, r0, #4
 800a53c:	3304      	addeq	r3, #4
 800a53e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a542:	bf04      	itt	eq
 800a544:	0080      	lsleq	r0, r0, #2
 800a546:	3302      	addeq	r3, #2
 800a548:	2800      	cmp	r0, #0
 800a54a:	db05      	blt.n	800a558 <__hi0bits+0x38>
 800a54c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a550:	f103 0301 	add.w	r3, r3, #1
 800a554:	bf08      	it	eq
 800a556:	2320      	moveq	r3, #32
 800a558:	4618      	mov	r0, r3
 800a55a:	4770      	bx	lr
 800a55c:	2300      	movs	r3, #0
 800a55e:	e7e4      	b.n	800a52a <__hi0bits+0xa>

0800a560 <__lo0bits>:
 800a560:	6803      	ldr	r3, [r0, #0]
 800a562:	f013 0207 	ands.w	r2, r3, #7
 800a566:	d00c      	beq.n	800a582 <__lo0bits+0x22>
 800a568:	07d9      	lsls	r1, r3, #31
 800a56a:	d422      	bmi.n	800a5b2 <__lo0bits+0x52>
 800a56c:	079a      	lsls	r2, r3, #30
 800a56e:	bf49      	itett	mi
 800a570:	085b      	lsrmi	r3, r3, #1
 800a572:	089b      	lsrpl	r3, r3, #2
 800a574:	6003      	strmi	r3, [r0, #0]
 800a576:	2201      	movmi	r2, #1
 800a578:	bf5c      	itt	pl
 800a57a:	6003      	strpl	r3, [r0, #0]
 800a57c:	2202      	movpl	r2, #2
 800a57e:	4610      	mov	r0, r2
 800a580:	4770      	bx	lr
 800a582:	b299      	uxth	r1, r3
 800a584:	b909      	cbnz	r1, 800a58a <__lo0bits+0x2a>
 800a586:	0c1b      	lsrs	r3, r3, #16
 800a588:	2210      	movs	r2, #16
 800a58a:	b2d9      	uxtb	r1, r3
 800a58c:	b909      	cbnz	r1, 800a592 <__lo0bits+0x32>
 800a58e:	3208      	adds	r2, #8
 800a590:	0a1b      	lsrs	r3, r3, #8
 800a592:	0719      	lsls	r1, r3, #28
 800a594:	bf04      	itt	eq
 800a596:	091b      	lsreq	r3, r3, #4
 800a598:	3204      	addeq	r2, #4
 800a59a:	0799      	lsls	r1, r3, #30
 800a59c:	bf04      	itt	eq
 800a59e:	089b      	lsreq	r3, r3, #2
 800a5a0:	3202      	addeq	r2, #2
 800a5a2:	07d9      	lsls	r1, r3, #31
 800a5a4:	d403      	bmi.n	800a5ae <__lo0bits+0x4e>
 800a5a6:	085b      	lsrs	r3, r3, #1
 800a5a8:	f102 0201 	add.w	r2, r2, #1
 800a5ac:	d003      	beq.n	800a5b6 <__lo0bits+0x56>
 800a5ae:	6003      	str	r3, [r0, #0]
 800a5b0:	e7e5      	b.n	800a57e <__lo0bits+0x1e>
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	e7e3      	b.n	800a57e <__lo0bits+0x1e>
 800a5b6:	2220      	movs	r2, #32
 800a5b8:	e7e1      	b.n	800a57e <__lo0bits+0x1e>
	...

0800a5bc <__i2b>:
 800a5bc:	b510      	push	{r4, lr}
 800a5be:	460c      	mov	r4, r1
 800a5c0:	2101      	movs	r1, #1
 800a5c2:	f7ff ff05 	bl	800a3d0 <_Balloc>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	b928      	cbnz	r0, 800a5d6 <__i2b+0x1a>
 800a5ca:	4b05      	ldr	r3, [pc, #20]	; (800a5e0 <__i2b+0x24>)
 800a5cc:	4805      	ldr	r0, [pc, #20]	; (800a5e4 <__i2b+0x28>)
 800a5ce:	f240 1145 	movw	r1, #325	; 0x145
 800a5d2:	f000 fcb7 	bl	800af44 <__assert_func>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	6144      	str	r4, [r0, #20]
 800a5da:	6103      	str	r3, [r0, #16]
 800a5dc:	bd10      	pop	{r4, pc}
 800a5de:	bf00      	nop
 800a5e0:	08031d84 	.word	0x08031d84
 800a5e4:	08031d95 	.word	0x08031d95

0800a5e8 <__multiply>:
 800a5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ec:	4691      	mov	r9, r2
 800a5ee:	690a      	ldr	r2, [r1, #16]
 800a5f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	bfb8      	it	lt
 800a5f8:	460b      	movlt	r3, r1
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	bfbc      	itt	lt
 800a5fe:	464c      	movlt	r4, r9
 800a600:	4699      	movlt	r9, r3
 800a602:	6927      	ldr	r7, [r4, #16]
 800a604:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a608:	68a3      	ldr	r3, [r4, #8]
 800a60a:	6861      	ldr	r1, [r4, #4]
 800a60c:	eb07 060a 	add.w	r6, r7, sl
 800a610:	42b3      	cmp	r3, r6
 800a612:	b085      	sub	sp, #20
 800a614:	bfb8      	it	lt
 800a616:	3101      	addlt	r1, #1
 800a618:	f7ff feda 	bl	800a3d0 <_Balloc>
 800a61c:	b930      	cbnz	r0, 800a62c <__multiply+0x44>
 800a61e:	4602      	mov	r2, r0
 800a620:	4b44      	ldr	r3, [pc, #272]	; (800a734 <__multiply+0x14c>)
 800a622:	4845      	ldr	r0, [pc, #276]	; (800a738 <__multiply+0x150>)
 800a624:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a628:	f000 fc8c 	bl	800af44 <__assert_func>
 800a62c:	f100 0514 	add.w	r5, r0, #20
 800a630:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a634:	462b      	mov	r3, r5
 800a636:	2200      	movs	r2, #0
 800a638:	4543      	cmp	r3, r8
 800a63a:	d321      	bcc.n	800a680 <__multiply+0x98>
 800a63c:	f104 0314 	add.w	r3, r4, #20
 800a640:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a644:	f109 0314 	add.w	r3, r9, #20
 800a648:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a64c:	9202      	str	r2, [sp, #8]
 800a64e:	1b3a      	subs	r2, r7, r4
 800a650:	3a15      	subs	r2, #21
 800a652:	f022 0203 	bic.w	r2, r2, #3
 800a656:	3204      	adds	r2, #4
 800a658:	f104 0115 	add.w	r1, r4, #21
 800a65c:	428f      	cmp	r7, r1
 800a65e:	bf38      	it	cc
 800a660:	2204      	movcc	r2, #4
 800a662:	9201      	str	r2, [sp, #4]
 800a664:	9a02      	ldr	r2, [sp, #8]
 800a666:	9303      	str	r3, [sp, #12]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d80c      	bhi.n	800a686 <__multiply+0x9e>
 800a66c:	2e00      	cmp	r6, #0
 800a66e:	dd03      	ble.n	800a678 <__multiply+0x90>
 800a670:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a674:	2b00      	cmp	r3, #0
 800a676:	d05b      	beq.n	800a730 <__multiply+0x148>
 800a678:	6106      	str	r6, [r0, #16]
 800a67a:	b005      	add	sp, #20
 800a67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a680:	f843 2b04 	str.w	r2, [r3], #4
 800a684:	e7d8      	b.n	800a638 <__multiply+0x50>
 800a686:	f8b3 a000 	ldrh.w	sl, [r3]
 800a68a:	f1ba 0f00 	cmp.w	sl, #0
 800a68e:	d024      	beq.n	800a6da <__multiply+0xf2>
 800a690:	f104 0e14 	add.w	lr, r4, #20
 800a694:	46a9      	mov	r9, r5
 800a696:	f04f 0c00 	mov.w	ip, #0
 800a69a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a69e:	f8d9 1000 	ldr.w	r1, [r9]
 800a6a2:	fa1f fb82 	uxth.w	fp, r2
 800a6a6:	b289      	uxth	r1, r1
 800a6a8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a6ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a6b0:	f8d9 2000 	ldr.w	r2, [r9]
 800a6b4:	4461      	add	r1, ip
 800a6b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6ba:	fb0a c20b 	mla	r2, sl, fp, ip
 800a6be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a6c2:	b289      	uxth	r1, r1
 800a6c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6c8:	4577      	cmp	r7, lr
 800a6ca:	f849 1b04 	str.w	r1, [r9], #4
 800a6ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6d2:	d8e2      	bhi.n	800a69a <__multiply+0xb2>
 800a6d4:	9a01      	ldr	r2, [sp, #4]
 800a6d6:	f845 c002 	str.w	ip, [r5, r2]
 800a6da:	9a03      	ldr	r2, [sp, #12]
 800a6dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	f1b9 0f00 	cmp.w	r9, #0
 800a6e6:	d021      	beq.n	800a72c <__multiply+0x144>
 800a6e8:	6829      	ldr	r1, [r5, #0]
 800a6ea:	f104 0c14 	add.w	ip, r4, #20
 800a6ee:	46ae      	mov	lr, r5
 800a6f0:	f04f 0a00 	mov.w	sl, #0
 800a6f4:	f8bc b000 	ldrh.w	fp, [ip]
 800a6f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a6fc:	fb09 220b 	mla	r2, r9, fp, r2
 800a700:	4452      	add	r2, sl
 800a702:	b289      	uxth	r1, r1
 800a704:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a708:	f84e 1b04 	str.w	r1, [lr], #4
 800a70c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a710:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a714:	f8be 1000 	ldrh.w	r1, [lr]
 800a718:	fb09 110a 	mla	r1, r9, sl, r1
 800a71c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a720:	4567      	cmp	r7, ip
 800a722:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a726:	d8e5      	bhi.n	800a6f4 <__multiply+0x10c>
 800a728:	9a01      	ldr	r2, [sp, #4]
 800a72a:	50a9      	str	r1, [r5, r2]
 800a72c:	3504      	adds	r5, #4
 800a72e:	e799      	b.n	800a664 <__multiply+0x7c>
 800a730:	3e01      	subs	r6, #1
 800a732:	e79b      	b.n	800a66c <__multiply+0x84>
 800a734:	08031d84 	.word	0x08031d84
 800a738:	08031d95 	.word	0x08031d95

0800a73c <__pow5mult>:
 800a73c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a740:	4615      	mov	r5, r2
 800a742:	f012 0203 	ands.w	r2, r2, #3
 800a746:	4606      	mov	r6, r0
 800a748:	460f      	mov	r7, r1
 800a74a:	d007      	beq.n	800a75c <__pow5mult+0x20>
 800a74c:	4c25      	ldr	r4, [pc, #148]	; (800a7e4 <__pow5mult+0xa8>)
 800a74e:	3a01      	subs	r2, #1
 800a750:	2300      	movs	r3, #0
 800a752:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a756:	f7ff fe9d 	bl	800a494 <__multadd>
 800a75a:	4607      	mov	r7, r0
 800a75c:	10ad      	asrs	r5, r5, #2
 800a75e:	d03d      	beq.n	800a7dc <__pow5mult+0xa0>
 800a760:	69f4      	ldr	r4, [r6, #28]
 800a762:	b97c      	cbnz	r4, 800a784 <__pow5mult+0x48>
 800a764:	2010      	movs	r0, #16
 800a766:	f7ff fd7f 	bl	800a268 <malloc>
 800a76a:	4602      	mov	r2, r0
 800a76c:	61f0      	str	r0, [r6, #28]
 800a76e:	b928      	cbnz	r0, 800a77c <__pow5mult+0x40>
 800a770:	4b1d      	ldr	r3, [pc, #116]	; (800a7e8 <__pow5mult+0xac>)
 800a772:	481e      	ldr	r0, [pc, #120]	; (800a7ec <__pow5mult+0xb0>)
 800a774:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a778:	f000 fbe4 	bl	800af44 <__assert_func>
 800a77c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a780:	6004      	str	r4, [r0, #0]
 800a782:	60c4      	str	r4, [r0, #12]
 800a784:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a788:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a78c:	b94c      	cbnz	r4, 800a7a2 <__pow5mult+0x66>
 800a78e:	f240 2171 	movw	r1, #625	; 0x271
 800a792:	4630      	mov	r0, r6
 800a794:	f7ff ff12 	bl	800a5bc <__i2b>
 800a798:	2300      	movs	r3, #0
 800a79a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a79e:	4604      	mov	r4, r0
 800a7a0:	6003      	str	r3, [r0, #0]
 800a7a2:	f04f 0900 	mov.w	r9, #0
 800a7a6:	07eb      	lsls	r3, r5, #31
 800a7a8:	d50a      	bpl.n	800a7c0 <__pow5mult+0x84>
 800a7aa:	4639      	mov	r1, r7
 800a7ac:	4622      	mov	r2, r4
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	f7ff ff1a 	bl	800a5e8 <__multiply>
 800a7b4:	4639      	mov	r1, r7
 800a7b6:	4680      	mov	r8, r0
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	f7ff fe49 	bl	800a450 <_Bfree>
 800a7be:	4647      	mov	r7, r8
 800a7c0:	106d      	asrs	r5, r5, #1
 800a7c2:	d00b      	beq.n	800a7dc <__pow5mult+0xa0>
 800a7c4:	6820      	ldr	r0, [r4, #0]
 800a7c6:	b938      	cbnz	r0, 800a7d8 <__pow5mult+0x9c>
 800a7c8:	4622      	mov	r2, r4
 800a7ca:	4621      	mov	r1, r4
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	f7ff ff0b 	bl	800a5e8 <__multiply>
 800a7d2:	6020      	str	r0, [r4, #0]
 800a7d4:	f8c0 9000 	str.w	r9, [r0]
 800a7d8:	4604      	mov	r4, r0
 800a7da:	e7e4      	b.n	800a7a6 <__pow5mult+0x6a>
 800a7dc:	4638      	mov	r0, r7
 800a7de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7e2:	bf00      	nop
 800a7e4:	08031ee0 	.word	0x08031ee0
 800a7e8:	08031d15 	.word	0x08031d15
 800a7ec:	08031d95 	.word	0x08031d95

0800a7f0 <__lshift>:
 800a7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f4:	460c      	mov	r4, r1
 800a7f6:	6849      	ldr	r1, [r1, #4]
 800a7f8:	6923      	ldr	r3, [r4, #16]
 800a7fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7fe:	68a3      	ldr	r3, [r4, #8]
 800a800:	4607      	mov	r7, r0
 800a802:	4691      	mov	r9, r2
 800a804:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a808:	f108 0601 	add.w	r6, r8, #1
 800a80c:	42b3      	cmp	r3, r6
 800a80e:	db0b      	blt.n	800a828 <__lshift+0x38>
 800a810:	4638      	mov	r0, r7
 800a812:	f7ff fddd 	bl	800a3d0 <_Balloc>
 800a816:	4605      	mov	r5, r0
 800a818:	b948      	cbnz	r0, 800a82e <__lshift+0x3e>
 800a81a:	4602      	mov	r2, r0
 800a81c:	4b28      	ldr	r3, [pc, #160]	; (800a8c0 <__lshift+0xd0>)
 800a81e:	4829      	ldr	r0, [pc, #164]	; (800a8c4 <__lshift+0xd4>)
 800a820:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a824:	f000 fb8e 	bl	800af44 <__assert_func>
 800a828:	3101      	adds	r1, #1
 800a82a:	005b      	lsls	r3, r3, #1
 800a82c:	e7ee      	b.n	800a80c <__lshift+0x1c>
 800a82e:	2300      	movs	r3, #0
 800a830:	f100 0114 	add.w	r1, r0, #20
 800a834:	f100 0210 	add.w	r2, r0, #16
 800a838:	4618      	mov	r0, r3
 800a83a:	4553      	cmp	r3, sl
 800a83c:	db33      	blt.n	800a8a6 <__lshift+0xb6>
 800a83e:	6920      	ldr	r0, [r4, #16]
 800a840:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a844:	f104 0314 	add.w	r3, r4, #20
 800a848:	f019 091f 	ands.w	r9, r9, #31
 800a84c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a850:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a854:	d02b      	beq.n	800a8ae <__lshift+0xbe>
 800a856:	f1c9 0e20 	rsb	lr, r9, #32
 800a85a:	468a      	mov	sl, r1
 800a85c:	2200      	movs	r2, #0
 800a85e:	6818      	ldr	r0, [r3, #0]
 800a860:	fa00 f009 	lsl.w	r0, r0, r9
 800a864:	4310      	orrs	r0, r2
 800a866:	f84a 0b04 	str.w	r0, [sl], #4
 800a86a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a86e:	459c      	cmp	ip, r3
 800a870:	fa22 f20e 	lsr.w	r2, r2, lr
 800a874:	d8f3      	bhi.n	800a85e <__lshift+0x6e>
 800a876:	ebac 0304 	sub.w	r3, ip, r4
 800a87a:	3b15      	subs	r3, #21
 800a87c:	f023 0303 	bic.w	r3, r3, #3
 800a880:	3304      	adds	r3, #4
 800a882:	f104 0015 	add.w	r0, r4, #21
 800a886:	4584      	cmp	ip, r0
 800a888:	bf38      	it	cc
 800a88a:	2304      	movcc	r3, #4
 800a88c:	50ca      	str	r2, [r1, r3]
 800a88e:	b10a      	cbz	r2, 800a894 <__lshift+0xa4>
 800a890:	f108 0602 	add.w	r6, r8, #2
 800a894:	3e01      	subs	r6, #1
 800a896:	4638      	mov	r0, r7
 800a898:	612e      	str	r6, [r5, #16]
 800a89a:	4621      	mov	r1, r4
 800a89c:	f7ff fdd8 	bl	800a450 <_Bfree>
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	e7c5      	b.n	800a83a <__lshift+0x4a>
 800a8ae:	3904      	subs	r1, #4
 800a8b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8b8:	459c      	cmp	ip, r3
 800a8ba:	d8f9      	bhi.n	800a8b0 <__lshift+0xc0>
 800a8bc:	e7ea      	b.n	800a894 <__lshift+0xa4>
 800a8be:	bf00      	nop
 800a8c0:	08031d84 	.word	0x08031d84
 800a8c4:	08031d95 	.word	0x08031d95

0800a8c8 <__mcmp>:
 800a8c8:	b530      	push	{r4, r5, lr}
 800a8ca:	6902      	ldr	r2, [r0, #16]
 800a8cc:	690c      	ldr	r4, [r1, #16]
 800a8ce:	1b12      	subs	r2, r2, r4
 800a8d0:	d10e      	bne.n	800a8f0 <__mcmp+0x28>
 800a8d2:	f100 0314 	add.w	r3, r0, #20
 800a8d6:	3114      	adds	r1, #20
 800a8d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a8dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a8e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a8e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a8e8:	42a5      	cmp	r5, r4
 800a8ea:	d003      	beq.n	800a8f4 <__mcmp+0x2c>
 800a8ec:	d305      	bcc.n	800a8fa <__mcmp+0x32>
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	bd30      	pop	{r4, r5, pc}
 800a8f4:	4283      	cmp	r3, r0
 800a8f6:	d3f3      	bcc.n	800a8e0 <__mcmp+0x18>
 800a8f8:	e7fa      	b.n	800a8f0 <__mcmp+0x28>
 800a8fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a8fe:	e7f7      	b.n	800a8f0 <__mcmp+0x28>

0800a900 <__mdiff>:
 800a900:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a904:	460c      	mov	r4, r1
 800a906:	4606      	mov	r6, r0
 800a908:	4611      	mov	r1, r2
 800a90a:	4620      	mov	r0, r4
 800a90c:	4690      	mov	r8, r2
 800a90e:	f7ff ffdb 	bl	800a8c8 <__mcmp>
 800a912:	1e05      	subs	r5, r0, #0
 800a914:	d110      	bne.n	800a938 <__mdiff+0x38>
 800a916:	4629      	mov	r1, r5
 800a918:	4630      	mov	r0, r6
 800a91a:	f7ff fd59 	bl	800a3d0 <_Balloc>
 800a91e:	b930      	cbnz	r0, 800a92e <__mdiff+0x2e>
 800a920:	4b3a      	ldr	r3, [pc, #232]	; (800aa0c <__mdiff+0x10c>)
 800a922:	4602      	mov	r2, r0
 800a924:	f240 2137 	movw	r1, #567	; 0x237
 800a928:	4839      	ldr	r0, [pc, #228]	; (800aa10 <__mdiff+0x110>)
 800a92a:	f000 fb0b 	bl	800af44 <__assert_func>
 800a92e:	2301      	movs	r3, #1
 800a930:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a934:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a938:	bfa4      	itt	ge
 800a93a:	4643      	movge	r3, r8
 800a93c:	46a0      	movge	r8, r4
 800a93e:	4630      	mov	r0, r6
 800a940:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a944:	bfa6      	itte	ge
 800a946:	461c      	movge	r4, r3
 800a948:	2500      	movge	r5, #0
 800a94a:	2501      	movlt	r5, #1
 800a94c:	f7ff fd40 	bl	800a3d0 <_Balloc>
 800a950:	b920      	cbnz	r0, 800a95c <__mdiff+0x5c>
 800a952:	4b2e      	ldr	r3, [pc, #184]	; (800aa0c <__mdiff+0x10c>)
 800a954:	4602      	mov	r2, r0
 800a956:	f240 2145 	movw	r1, #581	; 0x245
 800a95a:	e7e5      	b.n	800a928 <__mdiff+0x28>
 800a95c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a960:	6926      	ldr	r6, [r4, #16]
 800a962:	60c5      	str	r5, [r0, #12]
 800a964:	f104 0914 	add.w	r9, r4, #20
 800a968:	f108 0514 	add.w	r5, r8, #20
 800a96c:	f100 0e14 	add.w	lr, r0, #20
 800a970:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a974:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a978:	f108 0210 	add.w	r2, r8, #16
 800a97c:	46f2      	mov	sl, lr
 800a97e:	2100      	movs	r1, #0
 800a980:	f859 3b04 	ldr.w	r3, [r9], #4
 800a984:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a988:	fa11 f88b 	uxtah	r8, r1, fp
 800a98c:	b299      	uxth	r1, r3
 800a98e:	0c1b      	lsrs	r3, r3, #16
 800a990:	eba8 0801 	sub.w	r8, r8, r1
 800a994:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a998:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a99c:	fa1f f888 	uxth.w	r8, r8
 800a9a0:	1419      	asrs	r1, r3, #16
 800a9a2:	454e      	cmp	r6, r9
 800a9a4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a9a8:	f84a 3b04 	str.w	r3, [sl], #4
 800a9ac:	d8e8      	bhi.n	800a980 <__mdiff+0x80>
 800a9ae:	1b33      	subs	r3, r6, r4
 800a9b0:	3b15      	subs	r3, #21
 800a9b2:	f023 0303 	bic.w	r3, r3, #3
 800a9b6:	3304      	adds	r3, #4
 800a9b8:	3415      	adds	r4, #21
 800a9ba:	42a6      	cmp	r6, r4
 800a9bc:	bf38      	it	cc
 800a9be:	2304      	movcc	r3, #4
 800a9c0:	441d      	add	r5, r3
 800a9c2:	4473      	add	r3, lr
 800a9c4:	469e      	mov	lr, r3
 800a9c6:	462e      	mov	r6, r5
 800a9c8:	4566      	cmp	r6, ip
 800a9ca:	d30e      	bcc.n	800a9ea <__mdiff+0xea>
 800a9cc:	f10c 0203 	add.w	r2, ip, #3
 800a9d0:	1b52      	subs	r2, r2, r5
 800a9d2:	f022 0203 	bic.w	r2, r2, #3
 800a9d6:	3d03      	subs	r5, #3
 800a9d8:	45ac      	cmp	ip, r5
 800a9da:	bf38      	it	cc
 800a9dc:	2200      	movcc	r2, #0
 800a9de:	4413      	add	r3, r2
 800a9e0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a9e4:	b17a      	cbz	r2, 800aa06 <__mdiff+0x106>
 800a9e6:	6107      	str	r7, [r0, #16]
 800a9e8:	e7a4      	b.n	800a934 <__mdiff+0x34>
 800a9ea:	f856 8b04 	ldr.w	r8, [r6], #4
 800a9ee:	fa11 f288 	uxtah	r2, r1, r8
 800a9f2:	1414      	asrs	r4, r2, #16
 800a9f4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a9f8:	b292      	uxth	r2, r2
 800a9fa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a9fe:	f84e 2b04 	str.w	r2, [lr], #4
 800aa02:	1421      	asrs	r1, r4, #16
 800aa04:	e7e0      	b.n	800a9c8 <__mdiff+0xc8>
 800aa06:	3f01      	subs	r7, #1
 800aa08:	e7ea      	b.n	800a9e0 <__mdiff+0xe0>
 800aa0a:	bf00      	nop
 800aa0c:	08031d84 	.word	0x08031d84
 800aa10:	08031d95 	.word	0x08031d95

0800aa14 <__d2b>:
 800aa14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa18:	460f      	mov	r7, r1
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	ec59 8b10 	vmov	r8, r9, d0
 800aa20:	4616      	mov	r6, r2
 800aa22:	f7ff fcd5 	bl	800a3d0 <_Balloc>
 800aa26:	4604      	mov	r4, r0
 800aa28:	b930      	cbnz	r0, 800aa38 <__d2b+0x24>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	4b24      	ldr	r3, [pc, #144]	; (800aac0 <__d2b+0xac>)
 800aa2e:	4825      	ldr	r0, [pc, #148]	; (800aac4 <__d2b+0xb0>)
 800aa30:	f240 310f 	movw	r1, #783	; 0x30f
 800aa34:	f000 fa86 	bl	800af44 <__assert_func>
 800aa38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa40:	bb2d      	cbnz	r5, 800aa8e <__d2b+0x7a>
 800aa42:	9301      	str	r3, [sp, #4]
 800aa44:	f1b8 0300 	subs.w	r3, r8, #0
 800aa48:	d026      	beq.n	800aa98 <__d2b+0x84>
 800aa4a:	4668      	mov	r0, sp
 800aa4c:	9300      	str	r3, [sp, #0]
 800aa4e:	f7ff fd87 	bl	800a560 <__lo0bits>
 800aa52:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa56:	b1e8      	cbz	r0, 800aa94 <__d2b+0x80>
 800aa58:	f1c0 0320 	rsb	r3, r0, #32
 800aa5c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa60:	430b      	orrs	r3, r1
 800aa62:	40c2      	lsrs	r2, r0
 800aa64:	6163      	str	r3, [r4, #20]
 800aa66:	9201      	str	r2, [sp, #4]
 800aa68:	9b01      	ldr	r3, [sp, #4]
 800aa6a:	61a3      	str	r3, [r4, #24]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	bf14      	ite	ne
 800aa70:	2202      	movne	r2, #2
 800aa72:	2201      	moveq	r2, #1
 800aa74:	6122      	str	r2, [r4, #16]
 800aa76:	b1bd      	cbz	r5, 800aaa8 <__d2b+0x94>
 800aa78:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa7c:	4405      	add	r5, r0
 800aa7e:	603d      	str	r5, [r7, #0]
 800aa80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa84:	6030      	str	r0, [r6, #0]
 800aa86:	4620      	mov	r0, r4
 800aa88:	b003      	add	sp, #12
 800aa8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa92:	e7d6      	b.n	800aa42 <__d2b+0x2e>
 800aa94:	6161      	str	r1, [r4, #20]
 800aa96:	e7e7      	b.n	800aa68 <__d2b+0x54>
 800aa98:	a801      	add	r0, sp, #4
 800aa9a:	f7ff fd61 	bl	800a560 <__lo0bits>
 800aa9e:	9b01      	ldr	r3, [sp, #4]
 800aaa0:	6163      	str	r3, [r4, #20]
 800aaa2:	3020      	adds	r0, #32
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	e7e5      	b.n	800aa74 <__d2b+0x60>
 800aaa8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aaac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aab0:	6038      	str	r0, [r7, #0]
 800aab2:	6918      	ldr	r0, [r3, #16]
 800aab4:	f7ff fd34 	bl	800a520 <__hi0bits>
 800aab8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aabc:	e7e2      	b.n	800aa84 <__d2b+0x70>
 800aabe:	bf00      	nop
 800aac0:	08031d84 	.word	0x08031d84
 800aac4:	08031d95 	.word	0x08031d95

0800aac8 <__ssputs_r>:
 800aac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aacc:	688e      	ldr	r6, [r1, #8]
 800aace:	461f      	mov	r7, r3
 800aad0:	42be      	cmp	r6, r7
 800aad2:	680b      	ldr	r3, [r1, #0]
 800aad4:	4682      	mov	sl, r0
 800aad6:	460c      	mov	r4, r1
 800aad8:	4690      	mov	r8, r2
 800aada:	d82c      	bhi.n	800ab36 <__ssputs_r+0x6e>
 800aadc:	898a      	ldrh	r2, [r1, #12]
 800aade:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aae2:	d026      	beq.n	800ab32 <__ssputs_r+0x6a>
 800aae4:	6965      	ldr	r5, [r4, #20]
 800aae6:	6909      	ldr	r1, [r1, #16]
 800aae8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aaec:	eba3 0901 	sub.w	r9, r3, r1
 800aaf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aaf4:	1c7b      	adds	r3, r7, #1
 800aaf6:	444b      	add	r3, r9
 800aaf8:	106d      	asrs	r5, r5, #1
 800aafa:	429d      	cmp	r5, r3
 800aafc:	bf38      	it	cc
 800aafe:	461d      	movcc	r5, r3
 800ab00:	0553      	lsls	r3, r2, #21
 800ab02:	d527      	bpl.n	800ab54 <__ssputs_r+0x8c>
 800ab04:	4629      	mov	r1, r5
 800ab06:	f7ff fbd7 	bl	800a2b8 <_malloc_r>
 800ab0a:	4606      	mov	r6, r0
 800ab0c:	b360      	cbz	r0, 800ab68 <__ssputs_r+0xa0>
 800ab0e:	6921      	ldr	r1, [r4, #16]
 800ab10:	464a      	mov	r2, r9
 800ab12:	f000 fa09 	bl	800af28 <memcpy>
 800ab16:	89a3      	ldrh	r3, [r4, #12]
 800ab18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab20:	81a3      	strh	r3, [r4, #12]
 800ab22:	6126      	str	r6, [r4, #16]
 800ab24:	6165      	str	r5, [r4, #20]
 800ab26:	444e      	add	r6, r9
 800ab28:	eba5 0509 	sub.w	r5, r5, r9
 800ab2c:	6026      	str	r6, [r4, #0]
 800ab2e:	60a5      	str	r5, [r4, #8]
 800ab30:	463e      	mov	r6, r7
 800ab32:	42be      	cmp	r6, r7
 800ab34:	d900      	bls.n	800ab38 <__ssputs_r+0x70>
 800ab36:	463e      	mov	r6, r7
 800ab38:	6820      	ldr	r0, [r4, #0]
 800ab3a:	4632      	mov	r2, r6
 800ab3c:	4641      	mov	r1, r8
 800ab3e:	f000 f9c9 	bl	800aed4 <memmove>
 800ab42:	68a3      	ldr	r3, [r4, #8]
 800ab44:	1b9b      	subs	r3, r3, r6
 800ab46:	60a3      	str	r3, [r4, #8]
 800ab48:	6823      	ldr	r3, [r4, #0]
 800ab4a:	4433      	add	r3, r6
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	2000      	movs	r0, #0
 800ab50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab54:	462a      	mov	r2, r5
 800ab56:	f000 fa3b 	bl	800afd0 <_realloc_r>
 800ab5a:	4606      	mov	r6, r0
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d1e0      	bne.n	800ab22 <__ssputs_r+0x5a>
 800ab60:	6921      	ldr	r1, [r4, #16]
 800ab62:	4650      	mov	r0, sl
 800ab64:	f7ff fb34 	bl	800a1d0 <_free_r>
 800ab68:	230c      	movs	r3, #12
 800ab6a:	f8ca 3000 	str.w	r3, [sl]
 800ab6e:	89a3      	ldrh	r3, [r4, #12]
 800ab70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab74:	81a3      	strh	r3, [r4, #12]
 800ab76:	f04f 30ff 	mov.w	r0, #4294967295
 800ab7a:	e7e9      	b.n	800ab50 <__ssputs_r+0x88>

0800ab7c <_svfiprintf_r>:
 800ab7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab80:	4698      	mov	r8, r3
 800ab82:	898b      	ldrh	r3, [r1, #12]
 800ab84:	061b      	lsls	r3, r3, #24
 800ab86:	b09d      	sub	sp, #116	; 0x74
 800ab88:	4607      	mov	r7, r0
 800ab8a:	460d      	mov	r5, r1
 800ab8c:	4614      	mov	r4, r2
 800ab8e:	d50e      	bpl.n	800abae <_svfiprintf_r+0x32>
 800ab90:	690b      	ldr	r3, [r1, #16]
 800ab92:	b963      	cbnz	r3, 800abae <_svfiprintf_r+0x32>
 800ab94:	2140      	movs	r1, #64	; 0x40
 800ab96:	f7ff fb8f 	bl	800a2b8 <_malloc_r>
 800ab9a:	6028      	str	r0, [r5, #0]
 800ab9c:	6128      	str	r0, [r5, #16]
 800ab9e:	b920      	cbnz	r0, 800abaa <_svfiprintf_r+0x2e>
 800aba0:	230c      	movs	r3, #12
 800aba2:	603b      	str	r3, [r7, #0]
 800aba4:	f04f 30ff 	mov.w	r0, #4294967295
 800aba8:	e0d0      	b.n	800ad4c <_svfiprintf_r+0x1d0>
 800abaa:	2340      	movs	r3, #64	; 0x40
 800abac:	616b      	str	r3, [r5, #20]
 800abae:	2300      	movs	r3, #0
 800abb0:	9309      	str	r3, [sp, #36]	; 0x24
 800abb2:	2320      	movs	r3, #32
 800abb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abb8:	f8cd 800c 	str.w	r8, [sp, #12]
 800abbc:	2330      	movs	r3, #48	; 0x30
 800abbe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ad64 <_svfiprintf_r+0x1e8>
 800abc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abc6:	f04f 0901 	mov.w	r9, #1
 800abca:	4623      	mov	r3, r4
 800abcc:	469a      	mov	sl, r3
 800abce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abd2:	b10a      	cbz	r2, 800abd8 <_svfiprintf_r+0x5c>
 800abd4:	2a25      	cmp	r2, #37	; 0x25
 800abd6:	d1f9      	bne.n	800abcc <_svfiprintf_r+0x50>
 800abd8:	ebba 0b04 	subs.w	fp, sl, r4
 800abdc:	d00b      	beq.n	800abf6 <_svfiprintf_r+0x7a>
 800abde:	465b      	mov	r3, fp
 800abe0:	4622      	mov	r2, r4
 800abe2:	4629      	mov	r1, r5
 800abe4:	4638      	mov	r0, r7
 800abe6:	f7ff ff6f 	bl	800aac8 <__ssputs_r>
 800abea:	3001      	adds	r0, #1
 800abec:	f000 80a9 	beq.w	800ad42 <_svfiprintf_r+0x1c6>
 800abf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abf2:	445a      	add	r2, fp
 800abf4:	9209      	str	r2, [sp, #36]	; 0x24
 800abf6:	f89a 3000 	ldrb.w	r3, [sl]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f000 80a1 	beq.w	800ad42 <_svfiprintf_r+0x1c6>
 800ac00:	2300      	movs	r3, #0
 800ac02:	f04f 32ff 	mov.w	r2, #4294967295
 800ac06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac0a:	f10a 0a01 	add.w	sl, sl, #1
 800ac0e:	9304      	str	r3, [sp, #16]
 800ac10:	9307      	str	r3, [sp, #28]
 800ac12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac16:	931a      	str	r3, [sp, #104]	; 0x68
 800ac18:	4654      	mov	r4, sl
 800ac1a:	2205      	movs	r2, #5
 800ac1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac20:	4850      	ldr	r0, [pc, #320]	; (800ad64 <_svfiprintf_r+0x1e8>)
 800ac22:	f7f5 fb0d 	bl	8000240 <memchr>
 800ac26:	9a04      	ldr	r2, [sp, #16]
 800ac28:	b9d8      	cbnz	r0, 800ac62 <_svfiprintf_r+0xe6>
 800ac2a:	06d0      	lsls	r0, r2, #27
 800ac2c:	bf44      	itt	mi
 800ac2e:	2320      	movmi	r3, #32
 800ac30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac34:	0711      	lsls	r1, r2, #28
 800ac36:	bf44      	itt	mi
 800ac38:	232b      	movmi	r3, #43	; 0x2b
 800ac3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac3e:	f89a 3000 	ldrb.w	r3, [sl]
 800ac42:	2b2a      	cmp	r3, #42	; 0x2a
 800ac44:	d015      	beq.n	800ac72 <_svfiprintf_r+0xf6>
 800ac46:	9a07      	ldr	r2, [sp, #28]
 800ac48:	4654      	mov	r4, sl
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	f04f 0c0a 	mov.w	ip, #10
 800ac50:	4621      	mov	r1, r4
 800ac52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac56:	3b30      	subs	r3, #48	; 0x30
 800ac58:	2b09      	cmp	r3, #9
 800ac5a:	d94d      	bls.n	800acf8 <_svfiprintf_r+0x17c>
 800ac5c:	b1b0      	cbz	r0, 800ac8c <_svfiprintf_r+0x110>
 800ac5e:	9207      	str	r2, [sp, #28]
 800ac60:	e014      	b.n	800ac8c <_svfiprintf_r+0x110>
 800ac62:	eba0 0308 	sub.w	r3, r0, r8
 800ac66:	fa09 f303 	lsl.w	r3, r9, r3
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	9304      	str	r3, [sp, #16]
 800ac6e:	46a2      	mov	sl, r4
 800ac70:	e7d2      	b.n	800ac18 <_svfiprintf_r+0x9c>
 800ac72:	9b03      	ldr	r3, [sp, #12]
 800ac74:	1d19      	adds	r1, r3, #4
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	9103      	str	r1, [sp, #12]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	bfbb      	ittet	lt
 800ac7e:	425b      	neglt	r3, r3
 800ac80:	f042 0202 	orrlt.w	r2, r2, #2
 800ac84:	9307      	strge	r3, [sp, #28]
 800ac86:	9307      	strlt	r3, [sp, #28]
 800ac88:	bfb8      	it	lt
 800ac8a:	9204      	strlt	r2, [sp, #16]
 800ac8c:	7823      	ldrb	r3, [r4, #0]
 800ac8e:	2b2e      	cmp	r3, #46	; 0x2e
 800ac90:	d10c      	bne.n	800acac <_svfiprintf_r+0x130>
 800ac92:	7863      	ldrb	r3, [r4, #1]
 800ac94:	2b2a      	cmp	r3, #42	; 0x2a
 800ac96:	d134      	bne.n	800ad02 <_svfiprintf_r+0x186>
 800ac98:	9b03      	ldr	r3, [sp, #12]
 800ac9a:	1d1a      	adds	r2, r3, #4
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	9203      	str	r2, [sp, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	bfb8      	it	lt
 800aca4:	f04f 33ff 	movlt.w	r3, #4294967295
 800aca8:	3402      	adds	r4, #2
 800acaa:	9305      	str	r3, [sp, #20]
 800acac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ad74 <_svfiprintf_r+0x1f8>
 800acb0:	7821      	ldrb	r1, [r4, #0]
 800acb2:	2203      	movs	r2, #3
 800acb4:	4650      	mov	r0, sl
 800acb6:	f7f5 fac3 	bl	8000240 <memchr>
 800acba:	b138      	cbz	r0, 800accc <_svfiprintf_r+0x150>
 800acbc:	9b04      	ldr	r3, [sp, #16]
 800acbe:	eba0 000a 	sub.w	r0, r0, sl
 800acc2:	2240      	movs	r2, #64	; 0x40
 800acc4:	4082      	lsls	r2, r0
 800acc6:	4313      	orrs	r3, r2
 800acc8:	3401      	adds	r4, #1
 800acca:	9304      	str	r3, [sp, #16]
 800accc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acd0:	4825      	ldr	r0, [pc, #148]	; (800ad68 <_svfiprintf_r+0x1ec>)
 800acd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acd6:	2206      	movs	r2, #6
 800acd8:	f7f5 fab2 	bl	8000240 <memchr>
 800acdc:	2800      	cmp	r0, #0
 800acde:	d038      	beq.n	800ad52 <_svfiprintf_r+0x1d6>
 800ace0:	4b22      	ldr	r3, [pc, #136]	; (800ad6c <_svfiprintf_r+0x1f0>)
 800ace2:	bb1b      	cbnz	r3, 800ad2c <_svfiprintf_r+0x1b0>
 800ace4:	9b03      	ldr	r3, [sp, #12]
 800ace6:	3307      	adds	r3, #7
 800ace8:	f023 0307 	bic.w	r3, r3, #7
 800acec:	3308      	adds	r3, #8
 800acee:	9303      	str	r3, [sp, #12]
 800acf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf2:	4433      	add	r3, r6
 800acf4:	9309      	str	r3, [sp, #36]	; 0x24
 800acf6:	e768      	b.n	800abca <_svfiprintf_r+0x4e>
 800acf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800acfc:	460c      	mov	r4, r1
 800acfe:	2001      	movs	r0, #1
 800ad00:	e7a6      	b.n	800ac50 <_svfiprintf_r+0xd4>
 800ad02:	2300      	movs	r3, #0
 800ad04:	3401      	adds	r4, #1
 800ad06:	9305      	str	r3, [sp, #20]
 800ad08:	4619      	mov	r1, r3
 800ad0a:	f04f 0c0a 	mov.w	ip, #10
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad14:	3a30      	subs	r2, #48	; 0x30
 800ad16:	2a09      	cmp	r2, #9
 800ad18:	d903      	bls.n	800ad22 <_svfiprintf_r+0x1a6>
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d0c6      	beq.n	800acac <_svfiprintf_r+0x130>
 800ad1e:	9105      	str	r1, [sp, #20]
 800ad20:	e7c4      	b.n	800acac <_svfiprintf_r+0x130>
 800ad22:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad26:	4604      	mov	r4, r0
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e7f0      	b.n	800ad0e <_svfiprintf_r+0x192>
 800ad2c:	ab03      	add	r3, sp, #12
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	462a      	mov	r2, r5
 800ad32:	4b0f      	ldr	r3, [pc, #60]	; (800ad70 <_svfiprintf_r+0x1f4>)
 800ad34:	a904      	add	r1, sp, #16
 800ad36:	4638      	mov	r0, r7
 800ad38:	f7fd ff06 	bl	8008b48 <_printf_float>
 800ad3c:	1c42      	adds	r2, r0, #1
 800ad3e:	4606      	mov	r6, r0
 800ad40:	d1d6      	bne.n	800acf0 <_svfiprintf_r+0x174>
 800ad42:	89ab      	ldrh	r3, [r5, #12]
 800ad44:	065b      	lsls	r3, r3, #25
 800ad46:	f53f af2d 	bmi.w	800aba4 <_svfiprintf_r+0x28>
 800ad4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad4c:	b01d      	add	sp, #116	; 0x74
 800ad4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad52:	ab03      	add	r3, sp, #12
 800ad54:	9300      	str	r3, [sp, #0]
 800ad56:	462a      	mov	r2, r5
 800ad58:	4b05      	ldr	r3, [pc, #20]	; (800ad70 <_svfiprintf_r+0x1f4>)
 800ad5a:	a904      	add	r1, sp, #16
 800ad5c:	4638      	mov	r0, r7
 800ad5e:	f7fe f97b 	bl	8009058 <_printf_i>
 800ad62:	e7eb      	b.n	800ad3c <_svfiprintf_r+0x1c0>
 800ad64:	08031eec 	.word	0x08031eec
 800ad68:	08031ef6 	.word	0x08031ef6
 800ad6c:	08008b49 	.word	0x08008b49
 800ad70:	0800aac9 	.word	0x0800aac9
 800ad74:	08031ef2 	.word	0x08031ef2

0800ad78 <__sflush_r>:
 800ad78:	898a      	ldrh	r2, [r1, #12]
 800ad7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad7e:	4605      	mov	r5, r0
 800ad80:	0710      	lsls	r0, r2, #28
 800ad82:	460c      	mov	r4, r1
 800ad84:	d458      	bmi.n	800ae38 <__sflush_r+0xc0>
 800ad86:	684b      	ldr	r3, [r1, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	dc05      	bgt.n	800ad98 <__sflush_r+0x20>
 800ad8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	dc02      	bgt.n	800ad98 <__sflush_r+0x20>
 800ad92:	2000      	movs	r0, #0
 800ad94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad9a:	2e00      	cmp	r6, #0
 800ad9c:	d0f9      	beq.n	800ad92 <__sflush_r+0x1a>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ada4:	682f      	ldr	r7, [r5, #0]
 800ada6:	6a21      	ldr	r1, [r4, #32]
 800ada8:	602b      	str	r3, [r5, #0]
 800adaa:	d032      	beq.n	800ae12 <__sflush_r+0x9a>
 800adac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800adae:	89a3      	ldrh	r3, [r4, #12]
 800adb0:	075a      	lsls	r2, r3, #29
 800adb2:	d505      	bpl.n	800adc0 <__sflush_r+0x48>
 800adb4:	6863      	ldr	r3, [r4, #4]
 800adb6:	1ac0      	subs	r0, r0, r3
 800adb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adba:	b10b      	cbz	r3, 800adc0 <__sflush_r+0x48>
 800adbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adbe:	1ac0      	subs	r0, r0, r3
 800adc0:	2300      	movs	r3, #0
 800adc2:	4602      	mov	r2, r0
 800adc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adc6:	6a21      	ldr	r1, [r4, #32]
 800adc8:	4628      	mov	r0, r5
 800adca:	47b0      	blx	r6
 800adcc:	1c43      	adds	r3, r0, #1
 800adce:	89a3      	ldrh	r3, [r4, #12]
 800add0:	d106      	bne.n	800ade0 <__sflush_r+0x68>
 800add2:	6829      	ldr	r1, [r5, #0]
 800add4:	291d      	cmp	r1, #29
 800add6:	d82b      	bhi.n	800ae30 <__sflush_r+0xb8>
 800add8:	4a29      	ldr	r2, [pc, #164]	; (800ae80 <__sflush_r+0x108>)
 800adda:	410a      	asrs	r2, r1
 800addc:	07d6      	lsls	r6, r2, #31
 800adde:	d427      	bmi.n	800ae30 <__sflush_r+0xb8>
 800ade0:	2200      	movs	r2, #0
 800ade2:	6062      	str	r2, [r4, #4]
 800ade4:	04d9      	lsls	r1, r3, #19
 800ade6:	6922      	ldr	r2, [r4, #16]
 800ade8:	6022      	str	r2, [r4, #0]
 800adea:	d504      	bpl.n	800adf6 <__sflush_r+0x7e>
 800adec:	1c42      	adds	r2, r0, #1
 800adee:	d101      	bne.n	800adf4 <__sflush_r+0x7c>
 800adf0:	682b      	ldr	r3, [r5, #0]
 800adf2:	b903      	cbnz	r3, 800adf6 <__sflush_r+0x7e>
 800adf4:	6560      	str	r0, [r4, #84]	; 0x54
 800adf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adf8:	602f      	str	r7, [r5, #0]
 800adfa:	2900      	cmp	r1, #0
 800adfc:	d0c9      	beq.n	800ad92 <__sflush_r+0x1a>
 800adfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae02:	4299      	cmp	r1, r3
 800ae04:	d002      	beq.n	800ae0c <__sflush_r+0x94>
 800ae06:	4628      	mov	r0, r5
 800ae08:	f7ff f9e2 	bl	800a1d0 <_free_r>
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	6360      	str	r0, [r4, #52]	; 0x34
 800ae10:	e7c0      	b.n	800ad94 <__sflush_r+0x1c>
 800ae12:	2301      	movs	r3, #1
 800ae14:	4628      	mov	r0, r5
 800ae16:	47b0      	blx	r6
 800ae18:	1c41      	adds	r1, r0, #1
 800ae1a:	d1c8      	bne.n	800adae <__sflush_r+0x36>
 800ae1c:	682b      	ldr	r3, [r5, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d0c5      	beq.n	800adae <__sflush_r+0x36>
 800ae22:	2b1d      	cmp	r3, #29
 800ae24:	d001      	beq.n	800ae2a <__sflush_r+0xb2>
 800ae26:	2b16      	cmp	r3, #22
 800ae28:	d101      	bne.n	800ae2e <__sflush_r+0xb6>
 800ae2a:	602f      	str	r7, [r5, #0]
 800ae2c:	e7b1      	b.n	800ad92 <__sflush_r+0x1a>
 800ae2e:	89a3      	ldrh	r3, [r4, #12]
 800ae30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae34:	81a3      	strh	r3, [r4, #12]
 800ae36:	e7ad      	b.n	800ad94 <__sflush_r+0x1c>
 800ae38:	690f      	ldr	r7, [r1, #16]
 800ae3a:	2f00      	cmp	r7, #0
 800ae3c:	d0a9      	beq.n	800ad92 <__sflush_r+0x1a>
 800ae3e:	0793      	lsls	r3, r2, #30
 800ae40:	680e      	ldr	r6, [r1, #0]
 800ae42:	bf08      	it	eq
 800ae44:	694b      	ldreq	r3, [r1, #20]
 800ae46:	600f      	str	r7, [r1, #0]
 800ae48:	bf18      	it	ne
 800ae4a:	2300      	movne	r3, #0
 800ae4c:	eba6 0807 	sub.w	r8, r6, r7
 800ae50:	608b      	str	r3, [r1, #8]
 800ae52:	f1b8 0f00 	cmp.w	r8, #0
 800ae56:	dd9c      	ble.n	800ad92 <__sflush_r+0x1a>
 800ae58:	6a21      	ldr	r1, [r4, #32]
 800ae5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae5c:	4643      	mov	r3, r8
 800ae5e:	463a      	mov	r2, r7
 800ae60:	4628      	mov	r0, r5
 800ae62:	47b0      	blx	r6
 800ae64:	2800      	cmp	r0, #0
 800ae66:	dc06      	bgt.n	800ae76 <__sflush_r+0xfe>
 800ae68:	89a3      	ldrh	r3, [r4, #12]
 800ae6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae6e:	81a3      	strh	r3, [r4, #12]
 800ae70:	f04f 30ff 	mov.w	r0, #4294967295
 800ae74:	e78e      	b.n	800ad94 <__sflush_r+0x1c>
 800ae76:	4407      	add	r7, r0
 800ae78:	eba8 0800 	sub.w	r8, r8, r0
 800ae7c:	e7e9      	b.n	800ae52 <__sflush_r+0xda>
 800ae7e:	bf00      	nop
 800ae80:	dfbffffe 	.word	0xdfbffffe

0800ae84 <_fflush_r>:
 800ae84:	b538      	push	{r3, r4, r5, lr}
 800ae86:	690b      	ldr	r3, [r1, #16]
 800ae88:	4605      	mov	r5, r0
 800ae8a:	460c      	mov	r4, r1
 800ae8c:	b913      	cbnz	r3, 800ae94 <_fflush_r+0x10>
 800ae8e:	2500      	movs	r5, #0
 800ae90:	4628      	mov	r0, r5
 800ae92:	bd38      	pop	{r3, r4, r5, pc}
 800ae94:	b118      	cbz	r0, 800ae9e <_fflush_r+0x1a>
 800ae96:	6a03      	ldr	r3, [r0, #32]
 800ae98:	b90b      	cbnz	r3, 800ae9e <_fflush_r+0x1a>
 800ae9a:	f7fe fa8b 	bl	80093b4 <__sinit>
 800ae9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d0f3      	beq.n	800ae8e <_fflush_r+0xa>
 800aea6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aea8:	07d0      	lsls	r0, r2, #31
 800aeaa:	d404      	bmi.n	800aeb6 <_fflush_r+0x32>
 800aeac:	0599      	lsls	r1, r3, #22
 800aeae:	d402      	bmi.n	800aeb6 <_fflush_r+0x32>
 800aeb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeb2:	f7fe fb96 	bl	80095e2 <__retarget_lock_acquire_recursive>
 800aeb6:	4628      	mov	r0, r5
 800aeb8:	4621      	mov	r1, r4
 800aeba:	f7ff ff5d 	bl	800ad78 <__sflush_r>
 800aebe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aec0:	07da      	lsls	r2, r3, #31
 800aec2:	4605      	mov	r5, r0
 800aec4:	d4e4      	bmi.n	800ae90 <_fflush_r+0xc>
 800aec6:	89a3      	ldrh	r3, [r4, #12]
 800aec8:	059b      	lsls	r3, r3, #22
 800aeca:	d4e1      	bmi.n	800ae90 <_fflush_r+0xc>
 800aecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aece:	f7fe fb89 	bl	80095e4 <__retarget_lock_release_recursive>
 800aed2:	e7dd      	b.n	800ae90 <_fflush_r+0xc>

0800aed4 <memmove>:
 800aed4:	4288      	cmp	r0, r1
 800aed6:	b510      	push	{r4, lr}
 800aed8:	eb01 0402 	add.w	r4, r1, r2
 800aedc:	d902      	bls.n	800aee4 <memmove+0x10>
 800aede:	4284      	cmp	r4, r0
 800aee0:	4623      	mov	r3, r4
 800aee2:	d807      	bhi.n	800aef4 <memmove+0x20>
 800aee4:	1e43      	subs	r3, r0, #1
 800aee6:	42a1      	cmp	r1, r4
 800aee8:	d008      	beq.n	800aefc <memmove+0x28>
 800aeea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aeee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aef2:	e7f8      	b.n	800aee6 <memmove+0x12>
 800aef4:	4402      	add	r2, r0
 800aef6:	4601      	mov	r1, r0
 800aef8:	428a      	cmp	r2, r1
 800aefa:	d100      	bne.n	800aefe <memmove+0x2a>
 800aefc:	bd10      	pop	{r4, pc}
 800aefe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af06:	e7f7      	b.n	800aef8 <memmove+0x24>

0800af08 <_sbrk_r>:
 800af08:	b538      	push	{r3, r4, r5, lr}
 800af0a:	4d06      	ldr	r5, [pc, #24]	; (800af24 <_sbrk_r+0x1c>)
 800af0c:	2300      	movs	r3, #0
 800af0e:	4604      	mov	r4, r0
 800af10:	4608      	mov	r0, r1
 800af12:	602b      	str	r3, [r5, #0]
 800af14:	f7f6 feae 	bl	8001c74 <_sbrk>
 800af18:	1c43      	adds	r3, r0, #1
 800af1a:	d102      	bne.n	800af22 <_sbrk_r+0x1a>
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	b103      	cbz	r3, 800af22 <_sbrk_r+0x1a>
 800af20:	6023      	str	r3, [r4, #0]
 800af22:	bd38      	pop	{r3, r4, r5, pc}
 800af24:	20000f90 	.word	0x20000f90

0800af28 <memcpy>:
 800af28:	440a      	add	r2, r1
 800af2a:	4291      	cmp	r1, r2
 800af2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800af30:	d100      	bne.n	800af34 <memcpy+0xc>
 800af32:	4770      	bx	lr
 800af34:	b510      	push	{r4, lr}
 800af36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af3e:	4291      	cmp	r1, r2
 800af40:	d1f9      	bne.n	800af36 <memcpy+0xe>
 800af42:	bd10      	pop	{r4, pc}

0800af44 <__assert_func>:
 800af44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af46:	4614      	mov	r4, r2
 800af48:	461a      	mov	r2, r3
 800af4a:	4b09      	ldr	r3, [pc, #36]	; (800af70 <__assert_func+0x2c>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4605      	mov	r5, r0
 800af50:	68d8      	ldr	r0, [r3, #12]
 800af52:	b14c      	cbz	r4, 800af68 <__assert_func+0x24>
 800af54:	4b07      	ldr	r3, [pc, #28]	; (800af74 <__assert_func+0x30>)
 800af56:	9100      	str	r1, [sp, #0]
 800af58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af5c:	4906      	ldr	r1, [pc, #24]	; (800af78 <__assert_func+0x34>)
 800af5e:	462b      	mov	r3, r5
 800af60:	f000 f872 	bl	800b048 <fiprintf>
 800af64:	f000 f882 	bl	800b06c <abort>
 800af68:	4b04      	ldr	r3, [pc, #16]	; (800af7c <__assert_func+0x38>)
 800af6a:	461c      	mov	r4, r3
 800af6c:	e7f3      	b.n	800af56 <__assert_func+0x12>
 800af6e:	bf00      	nop
 800af70:	20000068 	.word	0x20000068
 800af74:	08031f07 	.word	0x08031f07
 800af78:	08031f14 	.word	0x08031f14
 800af7c:	08031f42 	.word	0x08031f42

0800af80 <_calloc_r>:
 800af80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af82:	fba1 2402 	umull	r2, r4, r1, r2
 800af86:	b94c      	cbnz	r4, 800af9c <_calloc_r+0x1c>
 800af88:	4611      	mov	r1, r2
 800af8a:	9201      	str	r2, [sp, #4]
 800af8c:	f7ff f994 	bl	800a2b8 <_malloc_r>
 800af90:	9a01      	ldr	r2, [sp, #4]
 800af92:	4605      	mov	r5, r0
 800af94:	b930      	cbnz	r0, 800afa4 <_calloc_r+0x24>
 800af96:	4628      	mov	r0, r5
 800af98:	b003      	add	sp, #12
 800af9a:	bd30      	pop	{r4, r5, pc}
 800af9c:	220c      	movs	r2, #12
 800af9e:	6002      	str	r2, [r0, #0]
 800afa0:	2500      	movs	r5, #0
 800afa2:	e7f8      	b.n	800af96 <_calloc_r+0x16>
 800afa4:	4621      	mov	r1, r4
 800afa6:	f7fe fa9e 	bl	80094e6 <memset>
 800afaa:	e7f4      	b.n	800af96 <_calloc_r+0x16>

0800afac <__ascii_mbtowc>:
 800afac:	b082      	sub	sp, #8
 800afae:	b901      	cbnz	r1, 800afb2 <__ascii_mbtowc+0x6>
 800afb0:	a901      	add	r1, sp, #4
 800afb2:	b142      	cbz	r2, 800afc6 <__ascii_mbtowc+0x1a>
 800afb4:	b14b      	cbz	r3, 800afca <__ascii_mbtowc+0x1e>
 800afb6:	7813      	ldrb	r3, [r2, #0]
 800afb8:	600b      	str	r3, [r1, #0]
 800afba:	7812      	ldrb	r2, [r2, #0]
 800afbc:	1e10      	subs	r0, r2, #0
 800afbe:	bf18      	it	ne
 800afc0:	2001      	movne	r0, #1
 800afc2:	b002      	add	sp, #8
 800afc4:	4770      	bx	lr
 800afc6:	4610      	mov	r0, r2
 800afc8:	e7fb      	b.n	800afc2 <__ascii_mbtowc+0x16>
 800afca:	f06f 0001 	mvn.w	r0, #1
 800afce:	e7f8      	b.n	800afc2 <__ascii_mbtowc+0x16>

0800afd0 <_realloc_r>:
 800afd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afd4:	4680      	mov	r8, r0
 800afd6:	4614      	mov	r4, r2
 800afd8:	460e      	mov	r6, r1
 800afda:	b921      	cbnz	r1, 800afe6 <_realloc_r+0x16>
 800afdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afe0:	4611      	mov	r1, r2
 800afe2:	f7ff b969 	b.w	800a2b8 <_malloc_r>
 800afe6:	b92a      	cbnz	r2, 800aff4 <_realloc_r+0x24>
 800afe8:	f7ff f8f2 	bl	800a1d0 <_free_r>
 800afec:	4625      	mov	r5, r4
 800afee:	4628      	mov	r0, r5
 800aff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aff4:	f000 f841 	bl	800b07a <_malloc_usable_size_r>
 800aff8:	4284      	cmp	r4, r0
 800affa:	4607      	mov	r7, r0
 800affc:	d802      	bhi.n	800b004 <_realloc_r+0x34>
 800affe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b002:	d812      	bhi.n	800b02a <_realloc_r+0x5a>
 800b004:	4621      	mov	r1, r4
 800b006:	4640      	mov	r0, r8
 800b008:	f7ff f956 	bl	800a2b8 <_malloc_r>
 800b00c:	4605      	mov	r5, r0
 800b00e:	2800      	cmp	r0, #0
 800b010:	d0ed      	beq.n	800afee <_realloc_r+0x1e>
 800b012:	42bc      	cmp	r4, r7
 800b014:	4622      	mov	r2, r4
 800b016:	4631      	mov	r1, r6
 800b018:	bf28      	it	cs
 800b01a:	463a      	movcs	r2, r7
 800b01c:	f7ff ff84 	bl	800af28 <memcpy>
 800b020:	4631      	mov	r1, r6
 800b022:	4640      	mov	r0, r8
 800b024:	f7ff f8d4 	bl	800a1d0 <_free_r>
 800b028:	e7e1      	b.n	800afee <_realloc_r+0x1e>
 800b02a:	4635      	mov	r5, r6
 800b02c:	e7df      	b.n	800afee <_realloc_r+0x1e>

0800b02e <__ascii_wctomb>:
 800b02e:	b149      	cbz	r1, 800b044 <__ascii_wctomb+0x16>
 800b030:	2aff      	cmp	r2, #255	; 0xff
 800b032:	bf85      	ittet	hi
 800b034:	238a      	movhi	r3, #138	; 0x8a
 800b036:	6003      	strhi	r3, [r0, #0]
 800b038:	700a      	strbls	r2, [r1, #0]
 800b03a:	f04f 30ff 	movhi.w	r0, #4294967295
 800b03e:	bf98      	it	ls
 800b040:	2001      	movls	r0, #1
 800b042:	4770      	bx	lr
 800b044:	4608      	mov	r0, r1
 800b046:	4770      	bx	lr

0800b048 <fiprintf>:
 800b048:	b40e      	push	{r1, r2, r3}
 800b04a:	b503      	push	{r0, r1, lr}
 800b04c:	4601      	mov	r1, r0
 800b04e:	ab03      	add	r3, sp, #12
 800b050:	4805      	ldr	r0, [pc, #20]	; (800b068 <fiprintf+0x20>)
 800b052:	f853 2b04 	ldr.w	r2, [r3], #4
 800b056:	6800      	ldr	r0, [r0, #0]
 800b058:	9301      	str	r3, [sp, #4]
 800b05a:	f000 f83f 	bl	800b0dc <_vfiprintf_r>
 800b05e:	b002      	add	sp, #8
 800b060:	f85d eb04 	ldr.w	lr, [sp], #4
 800b064:	b003      	add	sp, #12
 800b066:	4770      	bx	lr
 800b068:	20000068 	.word	0x20000068

0800b06c <abort>:
 800b06c:	b508      	push	{r3, lr}
 800b06e:	2006      	movs	r0, #6
 800b070:	f000 fa0c 	bl	800b48c <raise>
 800b074:	2001      	movs	r0, #1
 800b076:	f7f6 fd85 	bl	8001b84 <_exit>

0800b07a <_malloc_usable_size_r>:
 800b07a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b07e:	1f18      	subs	r0, r3, #4
 800b080:	2b00      	cmp	r3, #0
 800b082:	bfbc      	itt	lt
 800b084:	580b      	ldrlt	r3, [r1, r0]
 800b086:	18c0      	addlt	r0, r0, r3
 800b088:	4770      	bx	lr

0800b08a <__sfputc_r>:
 800b08a:	6893      	ldr	r3, [r2, #8]
 800b08c:	3b01      	subs	r3, #1
 800b08e:	2b00      	cmp	r3, #0
 800b090:	b410      	push	{r4}
 800b092:	6093      	str	r3, [r2, #8]
 800b094:	da08      	bge.n	800b0a8 <__sfputc_r+0x1e>
 800b096:	6994      	ldr	r4, [r2, #24]
 800b098:	42a3      	cmp	r3, r4
 800b09a:	db01      	blt.n	800b0a0 <__sfputc_r+0x16>
 800b09c:	290a      	cmp	r1, #10
 800b09e:	d103      	bne.n	800b0a8 <__sfputc_r+0x1e>
 800b0a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0a4:	f000 b934 	b.w	800b310 <__swbuf_r>
 800b0a8:	6813      	ldr	r3, [r2, #0]
 800b0aa:	1c58      	adds	r0, r3, #1
 800b0ac:	6010      	str	r0, [r2, #0]
 800b0ae:	7019      	strb	r1, [r3, #0]
 800b0b0:	4608      	mov	r0, r1
 800b0b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <__sfputs_r>:
 800b0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ba:	4606      	mov	r6, r0
 800b0bc:	460f      	mov	r7, r1
 800b0be:	4614      	mov	r4, r2
 800b0c0:	18d5      	adds	r5, r2, r3
 800b0c2:	42ac      	cmp	r4, r5
 800b0c4:	d101      	bne.n	800b0ca <__sfputs_r+0x12>
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	e007      	b.n	800b0da <__sfputs_r+0x22>
 800b0ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ce:	463a      	mov	r2, r7
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	f7ff ffda 	bl	800b08a <__sfputc_r>
 800b0d6:	1c43      	adds	r3, r0, #1
 800b0d8:	d1f3      	bne.n	800b0c2 <__sfputs_r+0xa>
 800b0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b0dc <_vfiprintf_r>:
 800b0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e0:	460d      	mov	r5, r1
 800b0e2:	b09d      	sub	sp, #116	; 0x74
 800b0e4:	4614      	mov	r4, r2
 800b0e6:	4698      	mov	r8, r3
 800b0e8:	4606      	mov	r6, r0
 800b0ea:	b118      	cbz	r0, 800b0f4 <_vfiprintf_r+0x18>
 800b0ec:	6a03      	ldr	r3, [r0, #32]
 800b0ee:	b90b      	cbnz	r3, 800b0f4 <_vfiprintf_r+0x18>
 800b0f0:	f7fe f960 	bl	80093b4 <__sinit>
 800b0f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0f6:	07d9      	lsls	r1, r3, #31
 800b0f8:	d405      	bmi.n	800b106 <_vfiprintf_r+0x2a>
 800b0fa:	89ab      	ldrh	r3, [r5, #12]
 800b0fc:	059a      	lsls	r2, r3, #22
 800b0fe:	d402      	bmi.n	800b106 <_vfiprintf_r+0x2a>
 800b100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b102:	f7fe fa6e 	bl	80095e2 <__retarget_lock_acquire_recursive>
 800b106:	89ab      	ldrh	r3, [r5, #12]
 800b108:	071b      	lsls	r3, r3, #28
 800b10a:	d501      	bpl.n	800b110 <_vfiprintf_r+0x34>
 800b10c:	692b      	ldr	r3, [r5, #16]
 800b10e:	b99b      	cbnz	r3, 800b138 <_vfiprintf_r+0x5c>
 800b110:	4629      	mov	r1, r5
 800b112:	4630      	mov	r0, r6
 800b114:	f000 f93a 	bl	800b38c <__swsetup_r>
 800b118:	b170      	cbz	r0, 800b138 <_vfiprintf_r+0x5c>
 800b11a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b11c:	07dc      	lsls	r4, r3, #31
 800b11e:	d504      	bpl.n	800b12a <_vfiprintf_r+0x4e>
 800b120:	f04f 30ff 	mov.w	r0, #4294967295
 800b124:	b01d      	add	sp, #116	; 0x74
 800b126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b12a:	89ab      	ldrh	r3, [r5, #12]
 800b12c:	0598      	lsls	r0, r3, #22
 800b12e:	d4f7      	bmi.n	800b120 <_vfiprintf_r+0x44>
 800b130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b132:	f7fe fa57 	bl	80095e4 <__retarget_lock_release_recursive>
 800b136:	e7f3      	b.n	800b120 <_vfiprintf_r+0x44>
 800b138:	2300      	movs	r3, #0
 800b13a:	9309      	str	r3, [sp, #36]	; 0x24
 800b13c:	2320      	movs	r3, #32
 800b13e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b142:	f8cd 800c 	str.w	r8, [sp, #12]
 800b146:	2330      	movs	r3, #48	; 0x30
 800b148:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b2fc <_vfiprintf_r+0x220>
 800b14c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b150:	f04f 0901 	mov.w	r9, #1
 800b154:	4623      	mov	r3, r4
 800b156:	469a      	mov	sl, r3
 800b158:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b15c:	b10a      	cbz	r2, 800b162 <_vfiprintf_r+0x86>
 800b15e:	2a25      	cmp	r2, #37	; 0x25
 800b160:	d1f9      	bne.n	800b156 <_vfiprintf_r+0x7a>
 800b162:	ebba 0b04 	subs.w	fp, sl, r4
 800b166:	d00b      	beq.n	800b180 <_vfiprintf_r+0xa4>
 800b168:	465b      	mov	r3, fp
 800b16a:	4622      	mov	r2, r4
 800b16c:	4629      	mov	r1, r5
 800b16e:	4630      	mov	r0, r6
 800b170:	f7ff ffa2 	bl	800b0b8 <__sfputs_r>
 800b174:	3001      	adds	r0, #1
 800b176:	f000 80a9 	beq.w	800b2cc <_vfiprintf_r+0x1f0>
 800b17a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b17c:	445a      	add	r2, fp
 800b17e:	9209      	str	r2, [sp, #36]	; 0x24
 800b180:	f89a 3000 	ldrb.w	r3, [sl]
 800b184:	2b00      	cmp	r3, #0
 800b186:	f000 80a1 	beq.w	800b2cc <_vfiprintf_r+0x1f0>
 800b18a:	2300      	movs	r3, #0
 800b18c:	f04f 32ff 	mov.w	r2, #4294967295
 800b190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b194:	f10a 0a01 	add.w	sl, sl, #1
 800b198:	9304      	str	r3, [sp, #16]
 800b19a:	9307      	str	r3, [sp, #28]
 800b19c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1a0:	931a      	str	r3, [sp, #104]	; 0x68
 800b1a2:	4654      	mov	r4, sl
 800b1a4:	2205      	movs	r2, #5
 800b1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1aa:	4854      	ldr	r0, [pc, #336]	; (800b2fc <_vfiprintf_r+0x220>)
 800b1ac:	f7f5 f848 	bl	8000240 <memchr>
 800b1b0:	9a04      	ldr	r2, [sp, #16]
 800b1b2:	b9d8      	cbnz	r0, 800b1ec <_vfiprintf_r+0x110>
 800b1b4:	06d1      	lsls	r1, r2, #27
 800b1b6:	bf44      	itt	mi
 800b1b8:	2320      	movmi	r3, #32
 800b1ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1be:	0713      	lsls	r3, r2, #28
 800b1c0:	bf44      	itt	mi
 800b1c2:	232b      	movmi	r3, #43	; 0x2b
 800b1c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1cc:	2b2a      	cmp	r3, #42	; 0x2a
 800b1ce:	d015      	beq.n	800b1fc <_vfiprintf_r+0x120>
 800b1d0:	9a07      	ldr	r2, [sp, #28]
 800b1d2:	4654      	mov	r4, sl
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	f04f 0c0a 	mov.w	ip, #10
 800b1da:	4621      	mov	r1, r4
 800b1dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1e0:	3b30      	subs	r3, #48	; 0x30
 800b1e2:	2b09      	cmp	r3, #9
 800b1e4:	d94d      	bls.n	800b282 <_vfiprintf_r+0x1a6>
 800b1e6:	b1b0      	cbz	r0, 800b216 <_vfiprintf_r+0x13a>
 800b1e8:	9207      	str	r2, [sp, #28]
 800b1ea:	e014      	b.n	800b216 <_vfiprintf_r+0x13a>
 800b1ec:	eba0 0308 	sub.w	r3, r0, r8
 800b1f0:	fa09 f303 	lsl.w	r3, r9, r3
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	9304      	str	r3, [sp, #16]
 800b1f8:	46a2      	mov	sl, r4
 800b1fa:	e7d2      	b.n	800b1a2 <_vfiprintf_r+0xc6>
 800b1fc:	9b03      	ldr	r3, [sp, #12]
 800b1fe:	1d19      	adds	r1, r3, #4
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	9103      	str	r1, [sp, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	bfbb      	ittet	lt
 800b208:	425b      	neglt	r3, r3
 800b20a:	f042 0202 	orrlt.w	r2, r2, #2
 800b20e:	9307      	strge	r3, [sp, #28]
 800b210:	9307      	strlt	r3, [sp, #28]
 800b212:	bfb8      	it	lt
 800b214:	9204      	strlt	r2, [sp, #16]
 800b216:	7823      	ldrb	r3, [r4, #0]
 800b218:	2b2e      	cmp	r3, #46	; 0x2e
 800b21a:	d10c      	bne.n	800b236 <_vfiprintf_r+0x15a>
 800b21c:	7863      	ldrb	r3, [r4, #1]
 800b21e:	2b2a      	cmp	r3, #42	; 0x2a
 800b220:	d134      	bne.n	800b28c <_vfiprintf_r+0x1b0>
 800b222:	9b03      	ldr	r3, [sp, #12]
 800b224:	1d1a      	adds	r2, r3, #4
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	9203      	str	r2, [sp, #12]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	bfb8      	it	lt
 800b22e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b232:	3402      	adds	r4, #2
 800b234:	9305      	str	r3, [sp, #20]
 800b236:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b30c <_vfiprintf_r+0x230>
 800b23a:	7821      	ldrb	r1, [r4, #0]
 800b23c:	2203      	movs	r2, #3
 800b23e:	4650      	mov	r0, sl
 800b240:	f7f4 fffe 	bl	8000240 <memchr>
 800b244:	b138      	cbz	r0, 800b256 <_vfiprintf_r+0x17a>
 800b246:	9b04      	ldr	r3, [sp, #16]
 800b248:	eba0 000a 	sub.w	r0, r0, sl
 800b24c:	2240      	movs	r2, #64	; 0x40
 800b24e:	4082      	lsls	r2, r0
 800b250:	4313      	orrs	r3, r2
 800b252:	3401      	adds	r4, #1
 800b254:	9304      	str	r3, [sp, #16]
 800b256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b25a:	4829      	ldr	r0, [pc, #164]	; (800b300 <_vfiprintf_r+0x224>)
 800b25c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b260:	2206      	movs	r2, #6
 800b262:	f7f4 ffed 	bl	8000240 <memchr>
 800b266:	2800      	cmp	r0, #0
 800b268:	d03f      	beq.n	800b2ea <_vfiprintf_r+0x20e>
 800b26a:	4b26      	ldr	r3, [pc, #152]	; (800b304 <_vfiprintf_r+0x228>)
 800b26c:	bb1b      	cbnz	r3, 800b2b6 <_vfiprintf_r+0x1da>
 800b26e:	9b03      	ldr	r3, [sp, #12]
 800b270:	3307      	adds	r3, #7
 800b272:	f023 0307 	bic.w	r3, r3, #7
 800b276:	3308      	adds	r3, #8
 800b278:	9303      	str	r3, [sp, #12]
 800b27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b27c:	443b      	add	r3, r7
 800b27e:	9309      	str	r3, [sp, #36]	; 0x24
 800b280:	e768      	b.n	800b154 <_vfiprintf_r+0x78>
 800b282:	fb0c 3202 	mla	r2, ip, r2, r3
 800b286:	460c      	mov	r4, r1
 800b288:	2001      	movs	r0, #1
 800b28a:	e7a6      	b.n	800b1da <_vfiprintf_r+0xfe>
 800b28c:	2300      	movs	r3, #0
 800b28e:	3401      	adds	r4, #1
 800b290:	9305      	str	r3, [sp, #20]
 800b292:	4619      	mov	r1, r3
 800b294:	f04f 0c0a 	mov.w	ip, #10
 800b298:	4620      	mov	r0, r4
 800b29a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b29e:	3a30      	subs	r2, #48	; 0x30
 800b2a0:	2a09      	cmp	r2, #9
 800b2a2:	d903      	bls.n	800b2ac <_vfiprintf_r+0x1d0>
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d0c6      	beq.n	800b236 <_vfiprintf_r+0x15a>
 800b2a8:	9105      	str	r1, [sp, #20]
 800b2aa:	e7c4      	b.n	800b236 <_vfiprintf_r+0x15a>
 800b2ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2b0:	4604      	mov	r4, r0
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e7f0      	b.n	800b298 <_vfiprintf_r+0x1bc>
 800b2b6:	ab03      	add	r3, sp, #12
 800b2b8:	9300      	str	r3, [sp, #0]
 800b2ba:	462a      	mov	r2, r5
 800b2bc:	4b12      	ldr	r3, [pc, #72]	; (800b308 <_vfiprintf_r+0x22c>)
 800b2be:	a904      	add	r1, sp, #16
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	f7fd fc41 	bl	8008b48 <_printf_float>
 800b2c6:	4607      	mov	r7, r0
 800b2c8:	1c78      	adds	r0, r7, #1
 800b2ca:	d1d6      	bne.n	800b27a <_vfiprintf_r+0x19e>
 800b2cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2ce:	07d9      	lsls	r1, r3, #31
 800b2d0:	d405      	bmi.n	800b2de <_vfiprintf_r+0x202>
 800b2d2:	89ab      	ldrh	r3, [r5, #12]
 800b2d4:	059a      	lsls	r2, r3, #22
 800b2d6:	d402      	bmi.n	800b2de <_vfiprintf_r+0x202>
 800b2d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2da:	f7fe f983 	bl	80095e4 <__retarget_lock_release_recursive>
 800b2de:	89ab      	ldrh	r3, [r5, #12]
 800b2e0:	065b      	lsls	r3, r3, #25
 800b2e2:	f53f af1d 	bmi.w	800b120 <_vfiprintf_r+0x44>
 800b2e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2e8:	e71c      	b.n	800b124 <_vfiprintf_r+0x48>
 800b2ea:	ab03      	add	r3, sp, #12
 800b2ec:	9300      	str	r3, [sp, #0]
 800b2ee:	462a      	mov	r2, r5
 800b2f0:	4b05      	ldr	r3, [pc, #20]	; (800b308 <_vfiprintf_r+0x22c>)
 800b2f2:	a904      	add	r1, sp, #16
 800b2f4:	4630      	mov	r0, r6
 800b2f6:	f7fd feaf 	bl	8009058 <_printf_i>
 800b2fa:	e7e4      	b.n	800b2c6 <_vfiprintf_r+0x1ea>
 800b2fc:	08031eec 	.word	0x08031eec
 800b300:	08031ef6 	.word	0x08031ef6
 800b304:	08008b49 	.word	0x08008b49
 800b308:	0800b0b9 	.word	0x0800b0b9
 800b30c:	08031ef2 	.word	0x08031ef2

0800b310 <__swbuf_r>:
 800b310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b312:	460e      	mov	r6, r1
 800b314:	4614      	mov	r4, r2
 800b316:	4605      	mov	r5, r0
 800b318:	b118      	cbz	r0, 800b322 <__swbuf_r+0x12>
 800b31a:	6a03      	ldr	r3, [r0, #32]
 800b31c:	b90b      	cbnz	r3, 800b322 <__swbuf_r+0x12>
 800b31e:	f7fe f849 	bl	80093b4 <__sinit>
 800b322:	69a3      	ldr	r3, [r4, #24]
 800b324:	60a3      	str	r3, [r4, #8]
 800b326:	89a3      	ldrh	r3, [r4, #12]
 800b328:	071a      	lsls	r2, r3, #28
 800b32a:	d525      	bpl.n	800b378 <__swbuf_r+0x68>
 800b32c:	6923      	ldr	r3, [r4, #16]
 800b32e:	b31b      	cbz	r3, 800b378 <__swbuf_r+0x68>
 800b330:	6823      	ldr	r3, [r4, #0]
 800b332:	6922      	ldr	r2, [r4, #16]
 800b334:	1a98      	subs	r0, r3, r2
 800b336:	6963      	ldr	r3, [r4, #20]
 800b338:	b2f6      	uxtb	r6, r6
 800b33a:	4283      	cmp	r3, r0
 800b33c:	4637      	mov	r7, r6
 800b33e:	dc04      	bgt.n	800b34a <__swbuf_r+0x3a>
 800b340:	4621      	mov	r1, r4
 800b342:	4628      	mov	r0, r5
 800b344:	f7ff fd9e 	bl	800ae84 <_fflush_r>
 800b348:	b9e0      	cbnz	r0, 800b384 <__swbuf_r+0x74>
 800b34a:	68a3      	ldr	r3, [r4, #8]
 800b34c:	3b01      	subs	r3, #1
 800b34e:	60a3      	str	r3, [r4, #8]
 800b350:	6823      	ldr	r3, [r4, #0]
 800b352:	1c5a      	adds	r2, r3, #1
 800b354:	6022      	str	r2, [r4, #0]
 800b356:	701e      	strb	r6, [r3, #0]
 800b358:	6962      	ldr	r2, [r4, #20]
 800b35a:	1c43      	adds	r3, r0, #1
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d004      	beq.n	800b36a <__swbuf_r+0x5a>
 800b360:	89a3      	ldrh	r3, [r4, #12]
 800b362:	07db      	lsls	r3, r3, #31
 800b364:	d506      	bpl.n	800b374 <__swbuf_r+0x64>
 800b366:	2e0a      	cmp	r6, #10
 800b368:	d104      	bne.n	800b374 <__swbuf_r+0x64>
 800b36a:	4621      	mov	r1, r4
 800b36c:	4628      	mov	r0, r5
 800b36e:	f7ff fd89 	bl	800ae84 <_fflush_r>
 800b372:	b938      	cbnz	r0, 800b384 <__swbuf_r+0x74>
 800b374:	4638      	mov	r0, r7
 800b376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b378:	4621      	mov	r1, r4
 800b37a:	4628      	mov	r0, r5
 800b37c:	f000 f806 	bl	800b38c <__swsetup_r>
 800b380:	2800      	cmp	r0, #0
 800b382:	d0d5      	beq.n	800b330 <__swbuf_r+0x20>
 800b384:	f04f 37ff 	mov.w	r7, #4294967295
 800b388:	e7f4      	b.n	800b374 <__swbuf_r+0x64>
	...

0800b38c <__swsetup_r>:
 800b38c:	b538      	push	{r3, r4, r5, lr}
 800b38e:	4b2a      	ldr	r3, [pc, #168]	; (800b438 <__swsetup_r+0xac>)
 800b390:	4605      	mov	r5, r0
 800b392:	6818      	ldr	r0, [r3, #0]
 800b394:	460c      	mov	r4, r1
 800b396:	b118      	cbz	r0, 800b3a0 <__swsetup_r+0x14>
 800b398:	6a03      	ldr	r3, [r0, #32]
 800b39a:	b90b      	cbnz	r3, 800b3a0 <__swsetup_r+0x14>
 800b39c:	f7fe f80a 	bl	80093b4 <__sinit>
 800b3a0:	89a3      	ldrh	r3, [r4, #12]
 800b3a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3a6:	0718      	lsls	r0, r3, #28
 800b3a8:	d422      	bmi.n	800b3f0 <__swsetup_r+0x64>
 800b3aa:	06d9      	lsls	r1, r3, #27
 800b3ac:	d407      	bmi.n	800b3be <__swsetup_r+0x32>
 800b3ae:	2309      	movs	r3, #9
 800b3b0:	602b      	str	r3, [r5, #0]
 800b3b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b3b6:	81a3      	strh	r3, [r4, #12]
 800b3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3bc:	e034      	b.n	800b428 <__swsetup_r+0x9c>
 800b3be:	0758      	lsls	r0, r3, #29
 800b3c0:	d512      	bpl.n	800b3e8 <__swsetup_r+0x5c>
 800b3c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3c4:	b141      	cbz	r1, 800b3d8 <__swsetup_r+0x4c>
 800b3c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3ca:	4299      	cmp	r1, r3
 800b3cc:	d002      	beq.n	800b3d4 <__swsetup_r+0x48>
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	f7fe fefe 	bl	800a1d0 <_free_r>
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	6363      	str	r3, [r4, #52]	; 0x34
 800b3d8:	89a3      	ldrh	r3, [r4, #12]
 800b3da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3de:	81a3      	strh	r3, [r4, #12]
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	6063      	str	r3, [r4, #4]
 800b3e4:	6923      	ldr	r3, [r4, #16]
 800b3e6:	6023      	str	r3, [r4, #0]
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	f043 0308 	orr.w	r3, r3, #8
 800b3ee:	81a3      	strh	r3, [r4, #12]
 800b3f0:	6923      	ldr	r3, [r4, #16]
 800b3f2:	b94b      	cbnz	r3, 800b408 <__swsetup_r+0x7c>
 800b3f4:	89a3      	ldrh	r3, [r4, #12]
 800b3f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3fe:	d003      	beq.n	800b408 <__swsetup_r+0x7c>
 800b400:	4621      	mov	r1, r4
 800b402:	4628      	mov	r0, r5
 800b404:	f000 f884 	bl	800b510 <__smakebuf_r>
 800b408:	89a0      	ldrh	r0, [r4, #12]
 800b40a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b40e:	f010 0301 	ands.w	r3, r0, #1
 800b412:	d00a      	beq.n	800b42a <__swsetup_r+0x9e>
 800b414:	2300      	movs	r3, #0
 800b416:	60a3      	str	r3, [r4, #8]
 800b418:	6963      	ldr	r3, [r4, #20]
 800b41a:	425b      	negs	r3, r3
 800b41c:	61a3      	str	r3, [r4, #24]
 800b41e:	6923      	ldr	r3, [r4, #16]
 800b420:	b943      	cbnz	r3, 800b434 <__swsetup_r+0xa8>
 800b422:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b426:	d1c4      	bne.n	800b3b2 <__swsetup_r+0x26>
 800b428:	bd38      	pop	{r3, r4, r5, pc}
 800b42a:	0781      	lsls	r1, r0, #30
 800b42c:	bf58      	it	pl
 800b42e:	6963      	ldrpl	r3, [r4, #20]
 800b430:	60a3      	str	r3, [r4, #8]
 800b432:	e7f4      	b.n	800b41e <__swsetup_r+0x92>
 800b434:	2000      	movs	r0, #0
 800b436:	e7f7      	b.n	800b428 <__swsetup_r+0x9c>
 800b438:	20000068 	.word	0x20000068

0800b43c <_raise_r>:
 800b43c:	291f      	cmp	r1, #31
 800b43e:	b538      	push	{r3, r4, r5, lr}
 800b440:	4604      	mov	r4, r0
 800b442:	460d      	mov	r5, r1
 800b444:	d904      	bls.n	800b450 <_raise_r+0x14>
 800b446:	2316      	movs	r3, #22
 800b448:	6003      	str	r3, [r0, #0]
 800b44a:	f04f 30ff 	mov.w	r0, #4294967295
 800b44e:	bd38      	pop	{r3, r4, r5, pc}
 800b450:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b452:	b112      	cbz	r2, 800b45a <_raise_r+0x1e>
 800b454:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b458:	b94b      	cbnz	r3, 800b46e <_raise_r+0x32>
 800b45a:	4620      	mov	r0, r4
 800b45c:	f000 f830 	bl	800b4c0 <_getpid_r>
 800b460:	462a      	mov	r2, r5
 800b462:	4601      	mov	r1, r0
 800b464:	4620      	mov	r0, r4
 800b466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b46a:	f000 b817 	b.w	800b49c <_kill_r>
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d00a      	beq.n	800b488 <_raise_r+0x4c>
 800b472:	1c59      	adds	r1, r3, #1
 800b474:	d103      	bne.n	800b47e <_raise_r+0x42>
 800b476:	2316      	movs	r3, #22
 800b478:	6003      	str	r3, [r0, #0]
 800b47a:	2001      	movs	r0, #1
 800b47c:	e7e7      	b.n	800b44e <_raise_r+0x12>
 800b47e:	2400      	movs	r4, #0
 800b480:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b484:	4628      	mov	r0, r5
 800b486:	4798      	blx	r3
 800b488:	2000      	movs	r0, #0
 800b48a:	e7e0      	b.n	800b44e <_raise_r+0x12>

0800b48c <raise>:
 800b48c:	4b02      	ldr	r3, [pc, #8]	; (800b498 <raise+0xc>)
 800b48e:	4601      	mov	r1, r0
 800b490:	6818      	ldr	r0, [r3, #0]
 800b492:	f7ff bfd3 	b.w	800b43c <_raise_r>
 800b496:	bf00      	nop
 800b498:	20000068 	.word	0x20000068

0800b49c <_kill_r>:
 800b49c:	b538      	push	{r3, r4, r5, lr}
 800b49e:	4d07      	ldr	r5, [pc, #28]	; (800b4bc <_kill_r+0x20>)
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	4608      	mov	r0, r1
 800b4a6:	4611      	mov	r1, r2
 800b4a8:	602b      	str	r3, [r5, #0]
 800b4aa:	f7f6 fb5b 	bl	8001b64 <_kill>
 800b4ae:	1c43      	adds	r3, r0, #1
 800b4b0:	d102      	bne.n	800b4b8 <_kill_r+0x1c>
 800b4b2:	682b      	ldr	r3, [r5, #0]
 800b4b4:	b103      	cbz	r3, 800b4b8 <_kill_r+0x1c>
 800b4b6:	6023      	str	r3, [r4, #0]
 800b4b8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ba:	bf00      	nop
 800b4bc:	20000f90 	.word	0x20000f90

0800b4c0 <_getpid_r>:
 800b4c0:	f7f6 bb48 	b.w	8001b54 <_getpid>

0800b4c4 <__swhatbuf_r>:
 800b4c4:	b570      	push	{r4, r5, r6, lr}
 800b4c6:	460c      	mov	r4, r1
 800b4c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4cc:	2900      	cmp	r1, #0
 800b4ce:	b096      	sub	sp, #88	; 0x58
 800b4d0:	4615      	mov	r5, r2
 800b4d2:	461e      	mov	r6, r3
 800b4d4:	da0d      	bge.n	800b4f2 <__swhatbuf_r+0x2e>
 800b4d6:	89a3      	ldrh	r3, [r4, #12]
 800b4d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b4dc:	f04f 0100 	mov.w	r1, #0
 800b4e0:	bf0c      	ite	eq
 800b4e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b4e6:	2340      	movne	r3, #64	; 0x40
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	6031      	str	r1, [r6, #0]
 800b4ec:	602b      	str	r3, [r5, #0]
 800b4ee:	b016      	add	sp, #88	; 0x58
 800b4f0:	bd70      	pop	{r4, r5, r6, pc}
 800b4f2:	466a      	mov	r2, sp
 800b4f4:	f000 f848 	bl	800b588 <_fstat_r>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	dbec      	blt.n	800b4d6 <__swhatbuf_r+0x12>
 800b4fc:	9901      	ldr	r1, [sp, #4]
 800b4fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b502:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b506:	4259      	negs	r1, r3
 800b508:	4159      	adcs	r1, r3
 800b50a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b50e:	e7eb      	b.n	800b4e8 <__swhatbuf_r+0x24>

0800b510 <__smakebuf_r>:
 800b510:	898b      	ldrh	r3, [r1, #12]
 800b512:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b514:	079d      	lsls	r5, r3, #30
 800b516:	4606      	mov	r6, r0
 800b518:	460c      	mov	r4, r1
 800b51a:	d507      	bpl.n	800b52c <__smakebuf_r+0x1c>
 800b51c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b520:	6023      	str	r3, [r4, #0]
 800b522:	6123      	str	r3, [r4, #16]
 800b524:	2301      	movs	r3, #1
 800b526:	6163      	str	r3, [r4, #20]
 800b528:	b002      	add	sp, #8
 800b52a:	bd70      	pop	{r4, r5, r6, pc}
 800b52c:	ab01      	add	r3, sp, #4
 800b52e:	466a      	mov	r2, sp
 800b530:	f7ff ffc8 	bl	800b4c4 <__swhatbuf_r>
 800b534:	9900      	ldr	r1, [sp, #0]
 800b536:	4605      	mov	r5, r0
 800b538:	4630      	mov	r0, r6
 800b53a:	f7fe febd 	bl	800a2b8 <_malloc_r>
 800b53e:	b948      	cbnz	r0, 800b554 <__smakebuf_r+0x44>
 800b540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b544:	059a      	lsls	r2, r3, #22
 800b546:	d4ef      	bmi.n	800b528 <__smakebuf_r+0x18>
 800b548:	f023 0303 	bic.w	r3, r3, #3
 800b54c:	f043 0302 	orr.w	r3, r3, #2
 800b550:	81a3      	strh	r3, [r4, #12]
 800b552:	e7e3      	b.n	800b51c <__smakebuf_r+0xc>
 800b554:	89a3      	ldrh	r3, [r4, #12]
 800b556:	6020      	str	r0, [r4, #0]
 800b558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b55c:	81a3      	strh	r3, [r4, #12]
 800b55e:	9b00      	ldr	r3, [sp, #0]
 800b560:	6163      	str	r3, [r4, #20]
 800b562:	9b01      	ldr	r3, [sp, #4]
 800b564:	6120      	str	r0, [r4, #16]
 800b566:	b15b      	cbz	r3, 800b580 <__smakebuf_r+0x70>
 800b568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b56c:	4630      	mov	r0, r6
 800b56e:	f000 f81d 	bl	800b5ac <_isatty_r>
 800b572:	b128      	cbz	r0, 800b580 <__smakebuf_r+0x70>
 800b574:	89a3      	ldrh	r3, [r4, #12]
 800b576:	f023 0303 	bic.w	r3, r3, #3
 800b57a:	f043 0301 	orr.w	r3, r3, #1
 800b57e:	81a3      	strh	r3, [r4, #12]
 800b580:	89a3      	ldrh	r3, [r4, #12]
 800b582:	431d      	orrs	r5, r3
 800b584:	81a5      	strh	r5, [r4, #12]
 800b586:	e7cf      	b.n	800b528 <__smakebuf_r+0x18>

0800b588 <_fstat_r>:
 800b588:	b538      	push	{r3, r4, r5, lr}
 800b58a:	4d07      	ldr	r5, [pc, #28]	; (800b5a8 <_fstat_r+0x20>)
 800b58c:	2300      	movs	r3, #0
 800b58e:	4604      	mov	r4, r0
 800b590:	4608      	mov	r0, r1
 800b592:	4611      	mov	r1, r2
 800b594:	602b      	str	r3, [r5, #0]
 800b596:	f7f6 fb44 	bl	8001c22 <_fstat>
 800b59a:	1c43      	adds	r3, r0, #1
 800b59c:	d102      	bne.n	800b5a4 <_fstat_r+0x1c>
 800b59e:	682b      	ldr	r3, [r5, #0]
 800b5a0:	b103      	cbz	r3, 800b5a4 <_fstat_r+0x1c>
 800b5a2:	6023      	str	r3, [r4, #0]
 800b5a4:	bd38      	pop	{r3, r4, r5, pc}
 800b5a6:	bf00      	nop
 800b5a8:	20000f90 	.word	0x20000f90

0800b5ac <_isatty_r>:
 800b5ac:	b538      	push	{r3, r4, r5, lr}
 800b5ae:	4d06      	ldr	r5, [pc, #24]	; (800b5c8 <_isatty_r+0x1c>)
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	4608      	mov	r0, r1
 800b5b6:	602b      	str	r3, [r5, #0]
 800b5b8:	f7f6 fb43 	bl	8001c42 <_isatty>
 800b5bc:	1c43      	adds	r3, r0, #1
 800b5be:	d102      	bne.n	800b5c6 <_isatty_r+0x1a>
 800b5c0:	682b      	ldr	r3, [r5, #0]
 800b5c2:	b103      	cbz	r3, 800b5c6 <_isatty_r+0x1a>
 800b5c4:	6023      	str	r3, [r4, #0]
 800b5c6:	bd38      	pop	{r3, r4, r5, pc}
 800b5c8:	20000f90 	.word	0x20000f90
 800b5cc:	00000000 	.word	0x00000000

0800b5d0 <tan>:
 800b5d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5d2:	eeb0 7b40 	vmov.f64	d7, d0
 800b5d6:	ee17 3a90 	vmov	r3, s15
 800b5da:	4a15      	ldr	r2, [pc, #84]	; (800b630 <tan+0x60>)
 800b5dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	dc07      	bgt.n	800b5f4 <tan+0x24>
 800b5e4:	ed9f 1b10 	vldr	d1, [pc, #64]	; 800b628 <tan+0x58>
 800b5e8:	2001      	movs	r0, #1
 800b5ea:	b005      	add	sp, #20
 800b5ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5f0:	f000 b822 	b.w	800b638 <__kernel_tan>
 800b5f4:	4a0f      	ldr	r2, [pc, #60]	; (800b634 <tan+0x64>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	dd04      	ble.n	800b604 <tan+0x34>
 800b5fa:	ee30 0b40 	vsub.f64	d0, d0, d0
 800b5fe:	b005      	add	sp, #20
 800b600:	f85d fb04 	ldr.w	pc, [sp], #4
 800b604:	4668      	mov	r0, sp
 800b606:	f000 f933 	bl	800b870 <__ieee754_rem_pio2>
 800b60a:	0040      	lsls	r0, r0, #1
 800b60c:	f000 0002 	and.w	r0, r0, #2
 800b610:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b614:	ed9d 0b00 	vldr	d0, [sp]
 800b618:	f1c0 0001 	rsb	r0, r0, #1
 800b61c:	f000 f80c 	bl	800b638 <__kernel_tan>
 800b620:	e7ed      	b.n	800b5fe <tan+0x2e>
 800b622:	bf00      	nop
 800b624:	f3af 8000 	nop.w
	...
 800b630:	3fe921fb 	.word	0x3fe921fb
 800b634:	7fefffff 	.word	0x7fefffff

0800b638 <__kernel_tan>:
 800b638:	eeb0 7b40 	vmov.f64	d7, d0
 800b63c:	ee17 3a90 	vmov	r3, s15
 800b640:	4989      	ldr	r1, [pc, #548]	; (800b868 <__kernel_tan+0x230>)
 800b642:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b646:	428a      	cmp	r2, r1
 800b648:	b510      	push	{r4, lr}
 800b64a:	dc33      	bgt.n	800b6b4 <__kernel_tan+0x7c>
 800b64c:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800b650:	ee16 1a90 	vmov	r1, s13
 800b654:	2900      	cmp	r1, #0
 800b656:	d143      	bne.n	800b6e0 <__kernel_tan+0xa8>
 800b658:	ee10 4a10 	vmov	r4, s0
 800b65c:	1c43      	adds	r3, r0, #1
 800b65e:	4323      	orrs	r3, r4
 800b660:	4313      	orrs	r3, r2
 800b662:	d108      	bne.n	800b676 <__kernel_tan+0x3e>
 800b664:	f000 fa48 	bl	800baf8 <fabs>
 800b668:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b66c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800b670:	eeb0 0b47 	vmov.f64	d0, d7
 800b674:	bd10      	pop	{r4, pc}
 800b676:	2801      	cmp	r0, #1
 800b678:	d0fa      	beq.n	800b670 <__kernel_tan+0x38>
 800b67a:	ee30 6b01 	vadd.f64	d6, d0, d1
 800b67e:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800b682:	ec53 2b16 	vmov	r2, r3, d6
 800b686:	ee87 3b06 	vdiv.f64	d3, d7, d6
 800b68a:	460a      	mov	r2, r1
 800b68c:	ec43 2b15 	vmov	d5, r2, r3
 800b690:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b694:	ec53 2b13 	vmov	r2, r3, d3
 800b698:	ee35 4b40 	vsub.f64	d4, d5, d0
 800b69c:	460a      	mov	r2, r1
 800b69e:	ec43 2b17 	vmov	d7, r2, r3
 800b6a2:	ee31 4b44 	vsub.f64	d4, d1, d4
 800b6a6:	eea5 6b07 	vfma.f64	d6, d5, d7
 800b6aa:	eea4 6b07 	vfma.f64	d6, d4, d7
 800b6ae:	eea6 7b03 	vfma.f64	d7, d6, d3
 800b6b2:	e7dd      	b.n	800b670 <__kernel_tan+0x38>
 800b6b4:	496d      	ldr	r1, [pc, #436]	; (800b86c <__kernel_tan+0x234>)
 800b6b6:	428a      	cmp	r2, r1
 800b6b8:	dd12      	ble.n	800b6e0 <__kernel_tan+0xa8>
 800b6ba:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 800b7e8 <__kernel_tan+0x1b0>
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	bfb8      	it	lt
 800b6c2:	eeb1 7b40 	vneglt.f64	d7, d0
 800b6c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b6ca:	ed9f 7b49 	vldr	d7, [pc, #292]	; 800b7f0 <__kernel_tan+0x1b8>
 800b6ce:	bfb8      	it	lt
 800b6d0:	eeb1 1b41 	vneglt.f64	d1, d1
 800b6d4:	ee37 7b41 	vsub.f64	d7, d7, d1
 800b6d8:	ed9f 1b47 	vldr	d1, [pc, #284]	; 800b7f8 <__kernel_tan+0x1c0>
 800b6dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b6e0:	ee27 5b07 	vmul.f64	d5, d7, d7
 800b6e4:	ed9f 3b46 	vldr	d3, [pc, #280]	; 800b800 <__kernel_tan+0x1c8>
 800b6e8:	ee25 6b05 	vmul.f64	d6, d5, d5
 800b6ec:	ed9f 4b46 	vldr	d4, [pc, #280]	; 800b808 <__kernel_tan+0x1d0>
 800b6f0:	eea6 4b03 	vfma.f64	d4, d6, d3
 800b6f4:	ed9f 3b46 	vldr	d3, [pc, #280]	; 800b810 <__kernel_tan+0x1d8>
 800b6f8:	eea4 3b06 	vfma.f64	d3, d4, d6
 800b6fc:	ed9f 4b46 	vldr	d4, [pc, #280]	; 800b818 <__kernel_tan+0x1e0>
 800b700:	eea3 4b06 	vfma.f64	d4, d3, d6
 800b704:	ed9f 3b46 	vldr	d3, [pc, #280]	; 800b820 <__kernel_tan+0x1e8>
 800b708:	eea4 3b06 	vfma.f64	d3, d4, d6
 800b70c:	ed9f 4b46 	vldr	d4, [pc, #280]	; 800b828 <__kernel_tan+0x1f0>
 800b710:	ed9f 2b47 	vldr	d2, [pc, #284]	; 800b830 <__kernel_tan+0x1f8>
 800b714:	eea3 4b06 	vfma.f64	d4, d3, d6
 800b718:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800b838 <__kernel_tan+0x200>
 800b71c:	eea6 3b02 	vfma.f64	d3, d6, d2
 800b720:	ed9f 2b47 	vldr	d2, [pc, #284]	; 800b840 <__kernel_tan+0x208>
 800b724:	eea3 2b06 	vfma.f64	d2, d3, d6
 800b728:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800b848 <__kernel_tan+0x210>
 800b72c:	eea2 3b06 	vfma.f64	d3, d2, d6
 800b730:	ed9f 2b47 	vldr	d2, [pc, #284]	; 800b850 <__kernel_tan+0x218>
 800b734:	eea3 2b06 	vfma.f64	d2, d3, d6
 800b738:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800b858 <__kernel_tan+0x220>
 800b73c:	494b      	ldr	r1, [pc, #300]	; (800b86c <__kernel_tan+0x234>)
 800b73e:	eea2 3b06 	vfma.f64	d3, d2, d6
 800b742:	ee27 2b05 	vmul.f64	d2, d7, d5
 800b746:	eeb0 6b44 	vmov.f64	d6, d4
 800b74a:	eeb0 4b41 	vmov.f64	d4, d1
 800b74e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800b752:	eea6 4b02 	vfma.f64	d4, d6, d2
 800b756:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800b860 <__kernel_tan+0x228>
 800b75a:	eea4 1b05 	vfma.f64	d1, d4, d5
 800b75e:	428a      	cmp	r2, r1
 800b760:	eea2 1b06 	vfma.f64	d1, d2, d6
 800b764:	ee37 5b01 	vadd.f64	d5, d7, d1
 800b768:	dd1d      	ble.n	800b7a6 <__kernel_tan+0x16e>
 800b76a:	ee25 3b05 	vmul.f64	d3, d5, d5
 800b76e:	179b      	asrs	r3, r3, #30
 800b770:	ee06 0a90 	vmov	s13, r0
 800b774:	f003 0302 	and.w	r3, r3, #2
 800b778:	f1c3 0301 	rsb	r3, r3, #1
 800b77c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b780:	ee35 5b06 	vadd.f64	d5, d5, d6
 800b784:	ee83 4b05 	vdiv.f64	d4, d3, d5
 800b788:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b78c:	ee34 4b41 	vsub.f64	d4, d4, d1
 800b790:	ee37 7b44 	vsub.f64	d7, d7, d4
 800b794:	eea7 6b45 	vfms.f64	d6, d7, d5
 800b798:	ee07 3a90 	vmov	s15, r3
 800b79c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b7a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b7a4:	e764      	b.n	800b670 <__kernel_tan+0x38>
 800b7a6:	2801      	cmp	r0, #1
 800b7a8:	d01a      	beq.n	800b7e0 <__kernel_tan+0x1a8>
 800b7aa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b7ae:	ec51 0b15 	vmov	r0, r1, d5
 800b7b2:	2000      	movs	r0, #0
 800b7b4:	ec41 0b13 	vmov	d3, r0, r1
 800b7b8:	ee33 7b47 	vsub.f64	d7, d3, d7
 800b7bc:	ee31 1b47 	vsub.f64	d1, d1, d7
 800b7c0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800b7c4:	ee87 4b05 	vdiv.f64	d4, d7, d5
 800b7c8:	ec53 2b14 	vmov	r2, r3, d4
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	ec43 2b17 	vmov	d7, r2, r3
 800b7d2:	eea3 6b07 	vfma.f64	d6, d3, d7
 800b7d6:	eea1 6b07 	vfma.f64	d6, d1, d7
 800b7da:	eea6 7b04 	vfma.f64	d7, d6, d4
 800b7de:	e747      	b.n	800b670 <__kernel_tan+0x38>
 800b7e0:	eeb0 7b45 	vmov.f64	d7, d5
 800b7e4:	e744      	b.n	800b670 <__kernel_tan+0x38>
 800b7e6:	bf00      	nop
 800b7e8:	54442d18 	.word	0x54442d18
 800b7ec:	3fe921fb 	.word	0x3fe921fb
 800b7f0:	33145c07 	.word	0x33145c07
 800b7f4:	3c81a626 	.word	0x3c81a626
	...
 800b800:	db605373 	.word	0xdb605373
 800b804:	bef375cb 	.word	0xbef375cb
 800b808:	a03792a6 	.word	0xa03792a6
 800b80c:	3f147e88 	.word	0x3f147e88
 800b810:	f2f26501 	.word	0xf2f26501
 800b814:	3f4344d8 	.word	0x3f4344d8
 800b818:	c9560328 	.word	0xc9560328
 800b81c:	3f6d6d22 	.word	0x3f6d6d22
 800b820:	8406d637 	.word	0x8406d637
 800b824:	3f9664f4 	.word	0x3f9664f4
 800b828:	1110fe7a 	.word	0x1110fe7a
 800b82c:	3fc11111 	.word	0x3fc11111
 800b830:	74bf7ad4 	.word	0x74bf7ad4
 800b834:	3efb2a70 	.word	0x3efb2a70
 800b838:	32f0a7e9 	.word	0x32f0a7e9
 800b83c:	3f12b80f 	.word	0x3f12b80f
 800b840:	1a8d1068 	.word	0x1a8d1068
 800b844:	3f3026f7 	.word	0x3f3026f7
 800b848:	fee08315 	.word	0xfee08315
 800b84c:	3f57dbc8 	.word	0x3f57dbc8
 800b850:	e96e8493 	.word	0xe96e8493
 800b854:	3f8226e3 	.word	0x3f8226e3
 800b858:	1bb341fe 	.word	0x1bb341fe
 800b85c:	3faba1ba 	.word	0x3faba1ba
 800b860:	55555563 	.word	0x55555563
 800b864:	3fd55555 	.word	0x3fd55555
 800b868:	3e2fffff 	.word	0x3e2fffff
 800b86c:	3fe59427 	.word	0x3fe59427

0800b870 <__ieee754_rem_pio2>:
 800b870:	b570      	push	{r4, r5, r6, lr}
 800b872:	eeb0 7b40 	vmov.f64	d7, d0
 800b876:	ee17 5a90 	vmov	r5, s15
 800b87a:	4b99      	ldr	r3, [pc, #612]	; (800bae0 <__ieee754_rem_pio2+0x270>)
 800b87c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b880:	429e      	cmp	r6, r3
 800b882:	b088      	sub	sp, #32
 800b884:	4604      	mov	r4, r0
 800b886:	dc07      	bgt.n	800b898 <__ieee754_rem_pio2+0x28>
 800b888:	2200      	movs	r2, #0
 800b88a:	2300      	movs	r3, #0
 800b88c:	ed84 0b00 	vstr	d0, [r4]
 800b890:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b894:	2000      	movs	r0, #0
 800b896:	e01b      	b.n	800b8d0 <__ieee754_rem_pio2+0x60>
 800b898:	4b92      	ldr	r3, [pc, #584]	; (800bae4 <__ieee754_rem_pio2+0x274>)
 800b89a:	429e      	cmp	r6, r3
 800b89c:	dc3b      	bgt.n	800b916 <__ieee754_rem_pio2+0xa6>
 800b89e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800b8a2:	2d00      	cmp	r5, #0
 800b8a4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800baa0 <__ieee754_rem_pio2+0x230>
 800b8a8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800b8ac:	dd19      	ble.n	800b8e2 <__ieee754_rem_pio2+0x72>
 800b8ae:	ee30 7b46 	vsub.f64	d7, d0, d6
 800b8b2:	429e      	cmp	r6, r3
 800b8b4:	d00e      	beq.n	800b8d4 <__ieee754_rem_pio2+0x64>
 800b8b6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800baa8 <__ieee754_rem_pio2+0x238>
 800b8ba:	ee37 5b46 	vsub.f64	d5, d7, d6
 800b8be:	ee37 7b45 	vsub.f64	d7, d7, d5
 800b8c2:	ed84 5b00 	vstr	d5, [r4]
 800b8c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b8ca:	ed84 7b02 	vstr	d7, [r4, #8]
 800b8ce:	2001      	movs	r0, #1
 800b8d0:	b008      	add	sp, #32
 800b8d2:	bd70      	pop	{r4, r5, r6, pc}
 800b8d4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800bab0 <__ieee754_rem_pio2+0x240>
 800b8d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b8dc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800bab8 <__ieee754_rem_pio2+0x248>
 800b8e0:	e7eb      	b.n	800b8ba <__ieee754_rem_pio2+0x4a>
 800b8e2:	429e      	cmp	r6, r3
 800b8e4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800b8e8:	d00e      	beq.n	800b908 <__ieee754_rem_pio2+0x98>
 800b8ea:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800baa8 <__ieee754_rem_pio2+0x238>
 800b8ee:	ee37 5b06 	vadd.f64	d5, d7, d6
 800b8f2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800b8f6:	ed84 5b00 	vstr	d5, [r4]
 800b8fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b8fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b902:	ed84 7b02 	vstr	d7, [r4, #8]
 800b906:	e7e3      	b.n	800b8d0 <__ieee754_rem_pio2+0x60>
 800b908:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800bab0 <__ieee754_rem_pio2+0x240>
 800b90c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b910:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800bab8 <__ieee754_rem_pio2+0x248>
 800b914:	e7eb      	b.n	800b8ee <__ieee754_rem_pio2+0x7e>
 800b916:	4b74      	ldr	r3, [pc, #464]	; (800bae8 <__ieee754_rem_pio2+0x278>)
 800b918:	429e      	cmp	r6, r3
 800b91a:	dc70      	bgt.n	800b9fe <__ieee754_rem_pio2+0x18e>
 800b91c:	f000 f8ec 	bl	800baf8 <fabs>
 800b920:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b924:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800bac0 <__ieee754_rem_pio2+0x250>
 800b928:	eea0 7b06 	vfma.f64	d7, d0, d6
 800b92c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b930:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800b934:	ee17 0a90 	vmov	r0, s15
 800b938:	eeb1 4b45 	vneg.f64	d4, d5
 800b93c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800baa0 <__ieee754_rem_pio2+0x230>
 800b940:	eea5 0b47 	vfms.f64	d0, d5, d7
 800b944:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800baa8 <__ieee754_rem_pio2+0x238>
 800b948:	281f      	cmp	r0, #31
 800b94a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b94e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800b952:	dc08      	bgt.n	800b966 <__ieee754_rem_pio2+0xf6>
 800b954:	4b65      	ldr	r3, [pc, #404]	; (800baec <__ieee754_rem_pio2+0x27c>)
 800b956:	1e42      	subs	r2, r0, #1
 800b958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b95c:	42b3      	cmp	r3, r6
 800b95e:	d002      	beq.n	800b966 <__ieee754_rem_pio2+0xf6>
 800b960:	ed84 6b00 	vstr	d6, [r4]
 800b964:	e024      	b.n	800b9b0 <__ieee754_rem_pio2+0x140>
 800b966:	ee16 3a90 	vmov	r3, s13
 800b96a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800b96e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800b972:	2b10      	cmp	r3, #16
 800b974:	ea4f 5226 	mov.w	r2, r6, asr #20
 800b978:	ddf2      	ble.n	800b960 <__ieee754_rem_pio2+0xf0>
 800b97a:	eeb0 6b40 	vmov.f64	d6, d0
 800b97e:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 800bab0 <__ieee754_rem_pio2+0x240>
 800b982:	eea4 6b03 	vfma.f64	d6, d4, d3
 800b986:	ee30 7b46 	vsub.f64	d7, d0, d6
 800b98a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800b98e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800bab8 <__ieee754_rem_pio2+0x248>
 800b992:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800b996:	ee36 3b47 	vsub.f64	d3, d6, d7
 800b99a:	ee13 3a90 	vmov	r3, s7
 800b99e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800b9a2:	1ad3      	subs	r3, r2, r3
 800b9a4:	2b31      	cmp	r3, #49	; 0x31
 800b9a6:	dc17      	bgt.n	800b9d8 <__ieee754_rem_pio2+0x168>
 800b9a8:	eeb0 0b46 	vmov.f64	d0, d6
 800b9ac:	ed84 3b00 	vstr	d3, [r4]
 800b9b0:	ed94 6b00 	vldr	d6, [r4]
 800b9b4:	2d00      	cmp	r5, #0
 800b9b6:	ee30 0b46 	vsub.f64	d0, d0, d6
 800b9ba:	ee30 0b47 	vsub.f64	d0, d0, d7
 800b9be:	ed84 0b02 	vstr	d0, [r4, #8]
 800b9c2:	da85      	bge.n	800b8d0 <__ieee754_rem_pio2+0x60>
 800b9c4:	eeb1 6b46 	vneg.f64	d6, d6
 800b9c8:	eeb1 0b40 	vneg.f64	d0, d0
 800b9cc:	ed84 6b00 	vstr	d6, [r4]
 800b9d0:	ed84 0b02 	vstr	d0, [r4, #8]
 800b9d4:	4240      	negs	r0, r0
 800b9d6:	e77b      	b.n	800b8d0 <__ieee754_rem_pio2+0x60>
 800b9d8:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800bac8 <__ieee754_rem_pio2+0x258>
 800b9dc:	eeb0 0b46 	vmov.f64	d0, d6
 800b9e0:	eea4 0b07 	vfma.f64	d0, d4, d7
 800b9e4:	ee36 6b40 	vsub.f64	d6, d6, d0
 800b9e8:	eea4 6b07 	vfma.f64	d6, d4, d7
 800b9ec:	ed9f 4b38 	vldr	d4, [pc, #224]	; 800bad0 <__ieee754_rem_pio2+0x260>
 800b9f0:	eeb0 7b46 	vmov.f64	d7, d6
 800b9f4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800b9f8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800b9fc:	e7b0      	b.n	800b960 <__ieee754_rem_pio2+0xf0>
 800b9fe:	4b3c      	ldr	r3, [pc, #240]	; (800baf0 <__ieee754_rem_pio2+0x280>)
 800ba00:	429e      	cmp	r6, r3
 800ba02:	dd06      	ble.n	800ba12 <__ieee754_rem_pio2+0x1a2>
 800ba04:	ee30 7b40 	vsub.f64	d7, d0, d0
 800ba08:	ed80 7b02 	vstr	d7, [r0, #8]
 800ba0c:	ed80 7b00 	vstr	d7, [r0]
 800ba10:	e740      	b.n	800b894 <__ieee754_rem_pio2+0x24>
 800ba12:	1532      	asrs	r2, r6, #20
 800ba14:	ee10 0a10 	vmov	r0, s0
 800ba18:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800ba1c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800ba20:	ec41 0b17 	vmov	d7, r0, r1
 800ba24:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ba28:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800bad8 <__ieee754_rem_pio2+0x268>
 800ba2c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ba30:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ba34:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ba38:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ba3c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ba40:	a808      	add	r0, sp, #32
 800ba42:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ba46:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ba4a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ba4e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ba52:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ba56:	2103      	movs	r1, #3
 800ba58:	ed30 7b02 	vldmdb	r0!, {d7}
 800ba5c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ba60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba64:	460b      	mov	r3, r1
 800ba66:	f101 31ff 	add.w	r1, r1, #4294967295
 800ba6a:	d0f5      	beq.n	800ba58 <__ieee754_rem_pio2+0x1e8>
 800ba6c:	4921      	ldr	r1, [pc, #132]	; (800baf4 <__ieee754_rem_pio2+0x284>)
 800ba6e:	9101      	str	r1, [sp, #4]
 800ba70:	2102      	movs	r1, #2
 800ba72:	9100      	str	r1, [sp, #0]
 800ba74:	a802      	add	r0, sp, #8
 800ba76:	4621      	mov	r1, r4
 800ba78:	f000 f84a 	bl	800bb10 <__kernel_rem_pio2>
 800ba7c:	2d00      	cmp	r5, #0
 800ba7e:	f6bf af27 	bge.w	800b8d0 <__ieee754_rem_pio2+0x60>
 800ba82:	ed94 7b00 	vldr	d7, [r4]
 800ba86:	eeb1 7b47 	vneg.f64	d7, d7
 800ba8a:	ed84 7b00 	vstr	d7, [r4]
 800ba8e:	ed94 7b02 	vldr	d7, [r4, #8]
 800ba92:	eeb1 7b47 	vneg.f64	d7, d7
 800ba96:	ed84 7b02 	vstr	d7, [r4, #8]
 800ba9a:	e79b      	b.n	800b9d4 <__ieee754_rem_pio2+0x164>
 800ba9c:	f3af 8000 	nop.w
 800baa0:	54400000 	.word	0x54400000
 800baa4:	3ff921fb 	.word	0x3ff921fb
 800baa8:	1a626331 	.word	0x1a626331
 800baac:	3dd0b461 	.word	0x3dd0b461
 800bab0:	1a600000 	.word	0x1a600000
 800bab4:	3dd0b461 	.word	0x3dd0b461
 800bab8:	2e037073 	.word	0x2e037073
 800babc:	3ba3198a 	.word	0x3ba3198a
 800bac0:	6dc9c883 	.word	0x6dc9c883
 800bac4:	3fe45f30 	.word	0x3fe45f30
 800bac8:	2e000000 	.word	0x2e000000
 800bacc:	3ba3198a 	.word	0x3ba3198a
 800bad0:	252049c1 	.word	0x252049c1
 800bad4:	397b839a 	.word	0x397b839a
 800bad8:	00000000 	.word	0x00000000
 800badc:	41700000 	.word	0x41700000
 800bae0:	3fe921fb 	.word	0x3fe921fb
 800bae4:	4002d97b 	.word	0x4002d97b
 800bae8:	413921fb 	.word	0x413921fb
 800baec:	08032044 	.word	0x08032044
 800baf0:	7fefffff 	.word	0x7fefffff
 800baf4:	080320c4 	.word	0x080320c4

0800baf8 <fabs>:
 800baf8:	ec51 0b10 	vmov	r0, r1, d0
 800bafc:	ee10 2a10 	vmov	r2, s0
 800bb00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb04:	ec43 2b10 	vmov	d0, r2, r3
 800bb08:	4770      	bx	lr
 800bb0a:	0000      	movs	r0, r0
 800bb0c:	0000      	movs	r0, r0
	...

0800bb10 <__kernel_rem_pio2>:
 800bb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb14:	ed2d 8b06 	vpush	{d8-d10}
 800bb18:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800bb1c:	460f      	mov	r7, r1
 800bb1e:	9002      	str	r0, [sp, #8]
 800bb20:	49c3      	ldr	r1, [pc, #780]	; (800be30 <__kernel_rem_pio2+0x320>)
 800bb22:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800bb24:	9301      	str	r3, [sp, #4]
 800bb26:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800bb2a:	9901      	ldr	r1, [sp, #4]
 800bb2c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bb2e:	f112 0f14 	cmn.w	r2, #20
 800bb32:	bfa8      	it	ge
 800bb34:	1ed0      	subge	r0, r2, #3
 800bb36:	f101 3aff 	add.w	sl, r1, #4294967295
 800bb3a:	bfaa      	itet	ge
 800bb3c:	2418      	movge	r4, #24
 800bb3e:	2000      	movlt	r0, #0
 800bb40:	fb90 f0f4 	sdivge	r0, r0, r4
 800bb44:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 800be18 <__kernel_rem_pio2+0x308>
 800bb48:	f06f 0417 	mvn.w	r4, #23
 800bb4c:	fb00 4404 	mla	r4, r0, r4, r4
 800bb50:	eba0 060a 	sub.w	r6, r0, sl
 800bb54:	4414      	add	r4, r2
 800bb56:	eb09 0c0a 	add.w	ip, r9, sl
 800bb5a:	ad1a      	add	r5, sp, #104	; 0x68
 800bb5c:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 800bb60:	2200      	movs	r2, #0
 800bb62:	4562      	cmp	r2, ip
 800bb64:	dd10      	ble.n	800bb88 <__kernel_rem_pio2+0x78>
 800bb66:	9a01      	ldr	r2, [sp, #4]
 800bb68:	a91a      	add	r1, sp, #104	; 0x68
 800bb6a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800bb6e:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 800bb72:	f04f 0c00 	mov.w	ip, #0
 800bb76:	45cc      	cmp	ip, r9
 800bb78:	dc26      	bgt.n	800bbc8 <__kernel_rem_pio2+0xb8>
 800bb7a:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 800be18 <__kernel_rem_pio2+0x308>
 800bb7e:	f8dd e008 	ldr.w	lr, [sp, #8]
 800bb82:	4616      	mov	r6, r2
 800bb84:	2500      	movs	r5, #0
 800bb86:	e015      	b.n	800bbb4 <__kernel_rem_pio2+0xa4>
 800bb88:	42d6      	cmn	r6, r2
 800bb8a:	d409      	bmi.n	800bba0 <__kernel_rem_pio2+0x90>
 800bb8c:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 800bb90:	ee07 1a90 	vmov	s15, r1
 800bb94:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bb98:	eca5 7b02 	vstmia	r5!, {d7}
 800bb9c:	3201      	adds	r2, #1
 800bb9e:	e7e0      	b.n	800bb62 <__kernel_rem_pio2+0x52>
 800bba0:	eeb0 7b46 	vmov.f64	d7, d6
 800bba4:	e7f8      	b.n	800bb98 <__kernel_rem_pio2+0x88>
 800bba6:	ecbe 5b02 	vldmia	lr!, {d5}
 800bbaa:	ed96 6b00 	vldr	d6, [r6]
 800bbae:	3501      	adds	r5, #1
 800bbb0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bbb4:	4555      	cmp	r5, sl
 800bbb6:	f1a6 0608 	sub.w	r6, r6, #8
 800bbba:	ddf4      	ble.n	800bba6 <__kernel_rem_pio2+0x96>
 800bbbc:	eca8 7b02 	vstmia	r8!, {d7}
 800bbc0:	f10c 0c01 	add.w	ip, ip, #1
 800bbc4:	3208      	adds	r2, #8
 800bbc6:	e7d6      	b.n	800bb76 <__kernel_rem_pio2+0x66>
 800bbc8:	aa06      	add	r2, sp, #24
 800bbca:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800be20 <__kernel_rem_pio2+0x310>
 800bbce:	ed9f ab96 	vldr	d10, [pc, #600]	; 800be28 <__kernel_rem_pio2+0x318>
 800bbd2:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800bbd6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800bbda:	9204      	str	r2, [sp, #16]
 800bbdc:	9303      	str	r3, [sp, #12]
 800bbde:	464d      	mov	r5, r9
 800bbe0:	00eb      	lsls	r3, r5, #3
 800bbe2:	9305      	str	r3, [sp, #20]
 800bbe4:	ab92      	add	r3, sp, #584	; 0x248
 800bbe6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800bbea:	f10d 0b18 	add.w	fp, sp, #24
 800bbee:	ab6a      	add	r3, sp, #424	; 0x1a8
 800bbf0:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800bbf4:	465e      	mov	r6, fp
 800bbf6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	f1a2 0208 	sub.w	r2, r2, #8
 800bc02:	dc48      	bgt.n	800bc96 <__kernel_rem_pio2+0x186>
 800bc04:	4620      	mov	r0, r4
 800bc06:	f000 fa17 	bl	800c038 <scalbn>
 800bc0a:	eeb0 8b40 	vmov.f64	d8, d0
 800bc0e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800bc12:	ee28 0b00 	vmul.f64	d0, d8, d0
 800bc16:	f000 fa8f 	bl	800c138 <floor>
 800bc1a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800bc1e:	eea0 8b47 	vfms.f64	d8, d0, d7
 800bc22:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800bc26:	2c00      	cmp	r4, #0
 800bc28:	ee17 8a90 	vmov	r8, s15
 800bc2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bc30:	ee38 8b47 	vsub.f64	d8, d8, d7
 800bc34:	dd41      	ble.n	800bcba <__kernel_rem_pio2+0x1aa>
 800bc36:	1e68      	subs	r0, r5, #1
 800bc38:	ab06      	add	r3, sp, #24
 800bc3a:	f1c4 0c18 	rsb	ip, r4, #24
 800bc3e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800bc42:	fa46 f20c 	asr.w	r2, r6, ip
 800bc46:	4490      	add	r8, r2
 800bc48:	fa02 f20c 	lsl.w	r2, r2, ip
 800bc4c:	1ab6      	subs	r6, r6, r2
 800bc4e:	f1c4 0217 	rsb	r2, r4, #23
 800bc52:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800bc56:	4116      	asrs	r6, r2
 800bc58:	2e00      	cmp	r6, #0
 800bc5a:	dd3d      	ble.n	800bcd8 <__kernel_rem_pio2+0x1c8>
 800bc5c:	f04f 0c00 	mov.w	ip, #0
 800bc60:	f108 0801 	add.w	r8, r8, #1
 800bc64:	4660      	mov	r0, ip
 800bc66:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800bc6a:	4565      	cmp	r5, ip
 800bc6c:	dc6a      	bgt.n	800bd44 <__kernel_rem_pio2+0x234>
 800bc6e:	2c00      	cmp	r4, #0
 800bc70:	dd04      	ble.n	800bc7c <__kernel_rem_pio2+0x16c>
 800bc72:	2c01      	cmp	r4, #1
 800bc74:	d07b      	beq.n	800bd6e <__kernel_rem_pio2+0x25e>
 800bc76:	2c02      	cmp	r4, #2
 800bc78:	f000 8083 	beq.w	800bd82 <__kernel_rem_pio2+0x272>
 800bc7c:	2e02      	cmp	r6, #2
 800bc7e:	d12b      	bne.n	800bcd8 <__kernel_rem_pio2+0x1c8>
 800bc80:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800bc84:	ee30 8b48 	vsub.f64	d8, d0, d8
 800bc88:	b330      	cbz	r0, 800bcd8 <__kernel_rem_pio2+0x1c8>
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f000 f9d4 	bl	800c038 <scalbn>
 800bc90:	ee38 8b40 	vsub.f64	d8, d8, d0
 800bc94:	e020      	b.n	800bcd8 <__kernel_rem_pio2+0x1c8>
 800bc96:	ee20 7b09 	vmul.f64	d7, d0, d9
 800bc9a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800bc9e:	3801      	subs	r0, #1
 800bca0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800bca4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800bca8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800bcac:	eca6 0a01 	vstmia	r6!, {s0}
 800bcb0:	ed92 0b00 	vldr	d0, [r2]
 800bcb4:	ee37 0b00 	vadd.f64	d0, d7, d0
 800bcb8:	e7a0      	b.n	800bbfc <__kernel_rem_pio2+0xec>
 800bcba:	d105      	bne.n	800bcc8 <__kernel_rem_pio2+0x1b8>
 800bcbc:	1e6a      	subs	r2, r5, #1
 800bcbe:	ab06      	add	r3, sp, #24
 800bcc0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800bcc4:	15f6      	asrs	r6, r6, #23
 800bcc6:	e7c7      	b.n	800bc58 <__kernel_rem_pio2+0x148>
 800bcc8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800bccc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bcd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcd4:	da34      	bge.n	800bd40 <__kernel_rem_pio2+0x230>
 800bcd6:	2600      	movs	r6, #0
 800bcd8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bcdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bce0:	f040 80aa 	bne.w	800be38 <__kernel_rem_pio2+0x328>
 800bce4:	f105 3bff 	add.w	fp, r5, #4294967295
 800bce8:	4658      	mov	r0, fp
 800bcea:	2200      	movs	r2, #0
 800bcec:	4548      	cmp	r0, r9
 800bcee:	da50      	bge.n	800bd92 <__kernel_rem_pio2+0x282>
 800bcf0:	2a00      	cmp	r2, #0
 800bcf2:	d06b      	beq.n	800bdcc <__kernel_rem_pio2+0x2bc>
 800bcf4:	ab06      	add	r3, sp, #24
 800bcf6:	3c18      	subs	r4, #24
 800bcf8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f000 8087 	beq.w	800be10 <__kernel_rem_pio2+0x300>
 800bd02:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800bd06:	4620      	mov	r0, r4
 800bd08:	f000 f996 	bl	800c038 <scalbn>
 800bd0c:	ed9f 6b44 	vldr	d6, [pc, #272]	; 800be20 <__kernel_rem_pio2+0x310>
 800bd10:	f10b 0201 	add.w	r2, fp, #1
 800bd14:	a96a      	add	r1, sp, #424	; 0x1a8
 800bd16:	00d3      	lsls	r3, r2, #3
 800bd18:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800bd1c:	465a      	mov	r2, fp
 800bd1e:	2a00      	cmp	r2, #0
 800bd20:	f280 80b8 	bge.w	800be94 <__kernel_rem_pio2+0x384>
 800bd24:	465a      	mov	r2, fp
 800bd26:	2a00      	cmp	r2, #0
 800bd28:	f2c0 80d6 	blt.w	800bed8 <__kernel_rem_pio2+0x3c8>
 800bd2c:	a96a      	add	r1, sp, #424	; 0x1a8
 800bd2e:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 800bd32:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800be18 <__kernel_rem_pio2+0x308>
 800bd36:	4d3f      	ldr	r5, [pc, #252]	; (800be34 <__kernel_rem_pio2+0x324>)
 800bd38:	2000      	movs	r0, #0
 800bd3a:	ebab 0102 	sub.w	r1, fp, r2
 800bd3e:	e0c0      	b.n	800bec2 <__kernel_rem_pio2+0x3b2>
 800bd40:	2602      	movs	r6, #2
 800bd42:	e78b      	b.n	800bc5c <__kernel_rem_pio2+0x14c>
 800bd44:	f8db 2000 	ldr.w	r2, [fp]
 800bd48:	b958      	cbnz	r0, 800bd62 <__kernel_rem_pio2+0x252>
 800bd4a:	b122      	cbz	r2, 800bd56 <__kernel_rem_pio2+0x246>
 800bd4c:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800bd50:	f8cb 2000 	str.w	r2, [fp]
 800bd54:	2201      	movs	r2, #1
 800bd56:	f10c 0c01 	add.w	ip, ip, #1
 800bd5a:	f10b 0b04 	add.w	fp, fp, #4
 800bd5e:	4610      	mov	r0, r2
 800bd60:	e783      	b.n	800bc6a <__kernel_rem_pio2+0x15a>
 800bd62:	ebae 0202 	sub.w	r2, lr, r2
 800bd66:	f8cb 2000 	str.w	r2, [fp]
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	e7f3      	b.n	800bd56 <__kernel_rem_pio2+0x246>
 800bd6e:	f105 3cff 	add.w	ip, r5, #4294967295
 800bd72:	ab06      	add	r3, sp, #24
 800bd74:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800bd78:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800bd7c:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800bd80:	e77c      	b.n	800bc7c <__kernel_rem_pio2+0x16c>
 800bd82:	f105 3cff 	add.w	ip, r5, #4294967295
 800bd86:	ab06      	add	r3, sp, #24
 800bd88:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800bd8c:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800bd90:	e7f4      	b.n	800bd7c <__kernel_rem_pio2+0x26c>
 800bd92:	ab06      	add	r3, sp, #24
 800bd94:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800bd98:	3801      	subs	r0, #1
 800bd9a:	431a      	orrs	r2, r3
 800bd9c:	e7a6      	b.n	800bcec <__kernel_rem_pio2+0x1dc>
 800bd9e:	3201      	adds	r2, #1
 800bda0:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800bda4:	2e00      	cmp	r6, #0
 800bda6:	d0fa      	beq.n	800bd9e <__kernel_rem_pio2+0x28e>
 800bda8:	9b05      	ldr	r3, [sp, #20]
 800bdaa:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800bdae:	eb0d 0003 	add.w	r0, sp, r3
 800bdb2:	9b01      	ldr	r3, [sp, #4]
 800bdb4:	18ee      	adds	r6, r5, r3
 800bdb6:	ab1a      	add	r3, sp, #104	; 0x68
 800bdb8:	f105 0c01 	add.w	ip, r5, #1
 800bdbc:	3898      	subs	r0, #152	; 0x98
 800bdbe:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800bdc2:	442a      	add	r2, r5
 800bdc4:	4562      	cmp	r2, ip
 800bdc6:	da04      	bge.n	800bdd2 <__kernel_rem_pio2+0x2c2>
 800bdc8:	4615      	mov	r5, r2
 800bdca:	e709      	b.n	800bbe0 <__kernel_rem_pio2+0xd0>
 800bdcc:	9804      	ldr	r0, [sp, #16]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	e7e6      	b.n	800bda0 <__kernel_rem_pio2+0x290>
 800bdd2:	9b03      	ldr	r3, [sp, #12]
 800bdd4:	f8dd e008 	ldr.w	lr, [sp, #8]
 800bdd8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800bddc:	9305      	str	r3, [sp, #20]
 800bdde:	ee07 3a90 	vmov	s15, r3
 800bde2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bde6:	2500      	movs	r5, #0
 800bde8:	eca6 7b02 	vstmia	r6!, {d7}
 800bdec:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 800be18 <__kernel_rem_pio2+0x308>
 800bdf0:	46b0      	mov	r8, r6
 800bdf2:	4555      	cmp	r5, sl
 800bdf4:	dd04      	ble.n	800be00 <__kernel_rem_pio2+0x2f0>
 800bdf6:	eca0 7b02 	vstmia	r0!, {d7}
 800bdfa:	f10c 0c01 	add.w	ip, ip, #1
 800bdfe:	e7e1      	b.n	800bdc4 <__kernel_rem_pio2+0x2b4>
 800be00:	ecbe 5b02 	vldmia	lr!, {d5}
 800be04:	ed38 6b02 	vldmdb	r8!, {d6}
 800be08:	3501      	adds	r5, #1
 800be0a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800be0e:	e7f0      	b.n	800bdf2 <__kernel_rem_pio2+0x2e2>
 800be10:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be14:	e76e      	b.n	800bcf4 <__kernel_rem_pio2+0x1e4>
 800be16:	bf00      	nop
	...
 800be24:	3e700000 	.word	0x3e700000
 800be28:	00000000 	.word	0x00000000
 800be2c:	41700000 	.word	0x41700000
 800be30:	08032210 	.word	0x08032210
 800be34:	080321d0 	.word	0x080321d0
 800be38:	4260      	negs	r0, r4
 800be3a:	eeb0 0b48 	vmov.f64	d0, d8
 800be3e:	f000 f8fb 	bl	800c038 <scalbn>
 800be42:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800c020 <__kernel_rem_pio2+0x510>
 800be46:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800be4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be4e:	db18      	blt.n	800be82 <__kernel_rem_pio2+0x372>
 800be50:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800c028 <__kernel_rem_pio2+0x518>
 800be54:	ee20 7b07 	vmul.f64	d7, d0, d7
 800be58:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800be5c:	aa06      	add	r2, sp, #24
 800be5e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800be62:	eea5 0b46 	vfms.f64	d0, d5, d6
 800be66:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800be6a:	f105 0b01 	add.w	fp, r5, #1
 800be6e:	ee10 3a10 	vmov	r3, s0
 800be72:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800be76:	ee17 3a10 	vmov	r3, s14
 800be7a:	3418      	adds	r4, #24
 800be7c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800be80:	e73f      	b.n	800bd02 <__kernel_rem_pio2+0x1f2>
 800be82:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800be86:	aa06      	add	r2, sp, #24
 800be88:	ee10 3a10 	vmov	r3, s0
 800be8c:	46ab      	mov	fp, r5
 800be8e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800be92:	e736      	b.n	800bd02 <__kernel_rem_pio2+0x1f2>
 800be94:	a806      	add	r0, sp, #24
 800be96:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800be9a:	9001      	str	r0, [sp, #4]
 800be9c:	ee07 0a90 	vmov	s15, r0
 800bea0:	3a01      	subs	r2, #1
 800bea2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bea6:	ee27 7b00 	vmul.f64	d7, d7, d0
 800beaa:	ee20 0b06 	vmul.f64	d0, d0, d6
 800beae:	ed21 7b02 	vstmdb	r1!, {d7}
 800beb2:	e734      	b.n	800bd1e <__kernel_rem_pio2+0x20e>
 800beb4:	ecb5 5b02 	vldmia	r5!, {d5}
 800beb8:	ecb4 6b02 	vldmia	r4!, {d6}
 800bebc:	3001      	adds	r0, #1
 800bebe:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bec2:	4548      	cmp	r0, r9
 800bec4:	dc01      	bgt.n	800beca <__kernel_rem_pio2+0x3ba>
 800bec6:	4288      	cmp	r0, r1
 800bec8:	ddf4      	ble.n	800beb4 <__kernel_rem_pio2+0x3a4>
 800beca:	a842      	add	r0, sp, #264	; 0x108
 800becc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800bed0:	ed81 7b00 	vstr	d7, [r1]
 800bed4:	3a01      	subs	r2, #1
 800bed6:	e726      	b.n	800bd26 <__kernel_rem_pio2+0x216>
 800bed8:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800beda:	2a02      	cmp	r2, #2
 800bedc:	dc0a      	bgt.n	800bef4 <__kernel_rem_pio2+0x3e4>
 800bede:	2a00      	cmp	r2, #0
 800bee0:	dc2e      	bgt.n	800bf40 <__kernel_rem_pio2+0x430>
 800bee2:	d047      	beq.n	800bf74 <__kernel_rem_pio2+0x464>
 800bee4:	f008 0007 	and.w	r0, r8, #7
 800bee8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800beec:	ecbd 8b06 	vpop	{d8-d10}
 800bef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef4:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800bef6:	2a03      	cmp	r2, #3
 800bef8:	d1f4      	bne.n	800bee4 <__kernel_rem_pio2+0x3d4>
 800befa:	a942      	add	r1, sp, #264	; 0x108
 800befc:	f1a3 0208 	sub.w	r2, r3, #8
 800bf00:	440a      	add	r2, r1
 800bf02:	4611      	mov	r1, r2
 800bf04:	4658      	mov	r0, fp
 800bf06:	2800      	cmp	r0, #0
 800bf08:	f1a1 0108 	sub.w	r1, r1, #8
 800bf0c:	dc55      	bgt.n	800bfba <__kernel_rem_pio2+0x4aa>
 800bf0e:	4659      	mov	r1, fp
 800bf10:	2901      	cmp	r1, #1
 800bf12:	f1a2 0208 	sub.w	r2, r2, #8
 800bf16:	dc60      	bgt.n	800bfda <__kernel_rem_pio2+0x4ca>
 800bf18:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800c030 <__kernel_rem_pio2+0x520>
 800bf1c:	aa42      	add	r2, sp, #264	; 0x108
 800bf1e:	4413      	add	r3, r2
 800bf20:	f1bb 0f01 	cmp.w	fp, #1
 800bf24:	dc69      	bgt.n	800bffa <__kernel_rem_pio2+0x4ea>
 800bf26:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800bf2a:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800bf2e:	2e00      	cmp	r6, #0
 800bf30:	d16a      	bne.n	800c008 <__kernel_rem_pio2+0x4f8>
 800bf32:	ed87 5b00 	vstr	d5, [r7]
 800bf36:	ed87 6b02 	vstr	d6, [r7, #8]
 800bf3a:	ed87 7b04 	vstr	d7, [r7, #16]
 800bf3e:	e7d1      	b.n	800bee4 <__kernel_rem_pio2+0x3d4>
 800bf40:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800c030 <__kernel_rem_pio2+0x520>
 800bf44:	aa42      	add	r2, sp, #264	; 0x108
 800bf46:	4413      	add	r3, r2
 800bf48:	465a      	mov	r2, fp
 800bf4a:	2a00      	cmp	r2, #0
 800bf4c:	da26      	bge.n	800bf9c <__kernel_rem_pio2+0x48c>
 800bf4e:	b35e      	cbz	r6, 800bfa8 <__kernel_rem_pio2+0x498>
 800bf50:	eeb1 7b46 	vneg.f64	d7, d6
 800bf54:	ed87 7b00 	vstr	d7, [r7]
 800bf58:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800bf5c:	aa44      	add	r2, sp, #272	; 0x110
 800bf5e:	2301      	movs	r3, #1
 800bf60:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bf64:	459b      	cmp	fp, r3
 800bf66:	da22      	bge.n	800bfae <__kernel_rem_pio2+0x49e>
 800bf68:	b10e      	cbz	r6, 800bf6e <__kernel_rem_pio2+0x45e>
 800bf6a:	eeb1 7b47 	vneg.f64	d7, d7
 800bf6e:	ed87 7b02 	vstr	d7, [r7, #8]
 800bf72:	e7b7      	b.n	800bee4 <__kernel_rem_pio2+0x3d4>
 800bf74:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800c030 <__kernel_rem_pio2+0x520>
 800bf78:	aa42      	add	r2, sp, #264	; 0x108
 800bf7a:	4413      	add	r3, r2
 800bf7c:	f1bb 0f00 	cmp.w	fp, #0
 800bf80:	da05      	bge.n	800bf8e <__kernel_rem_pio2+0x47e>
 800bf82:	b10e      	cbz	r6, 800bf88 <__kernel_rem_pio2+0x478>
 800bf84:	eeb1 7b47 	vneg.f64	d7, d7
 800bf88:	ed87 7b00 	vstr	d7, [r7]
 800bf8c:	e7aa      	b.n	800bee4 <__kernel_rem_pio2+0x3d4>
 800bf8e:	ed33 6b02 	vldmdb	r3!, {d6}
 800bf92:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bf96:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bf9a:	e7ef      	b.n	800bf7c <__kernel_rem_pio2+0x46c>
 800bf9c:	ed33 7b02 	vldmdb	r3!, {d7}
 800bfa0:	3a01      	subs	r2, #1
 800bfa2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bfa6:	e7d0      	b.n	800bf4a <__kernel_rem_pio2+0x43a>
 800bfa8:	eeb0 7b46 	vmov.f64	d7, d6
 800bfac:	e7d2      	b.n	800bf54 <__kernel_rem_pio2+0x444>
 800bfae:	ecb2 6b02 	vldmia	r2!, {d6}
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bfb8:	e7d4      	b.n	800bf64 <__kernel_rem_pio2+0x454>
 800bfba:	ed91 7b00 	vldr	d7, [r1]
 800bfbe:	ed91 5b02 	vldr	d5, [r1, #8]
 800bfc2:	3801      	subs	r0, #1
 800bfc4:	ee37 6b05 	vadd.f64	d6, d7, d5
 800bfc8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bfcc:	ed81 6b00 	vstr	d6, [r1]
 800bfd0:	ee37 7b05 	vadd.f64	d7, d7, d5
 800bfd4:	ed81 7b02 	vstr	d7, [r1, #8]
 800bfd8:	e795      	b.n	800bf06 <__kernel_rem_pio2+0x3f6>
 800bfda:	ed92 7b00 	vldr	d7, [r2]
 800bfde:	ed92 5b02 	vldr	d5, [r2, #8]
 800bfe2:	3901      	subs	r1, #1
 800bfe4:	ee37 6b05 	vadd.f64	d6, d7, d5
 800bfe8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bfec:	ed82 6b00 	vstr	d6, [r2]
 800bff0:	ee37 7b05 	vadd.f64	d7, d7, d5
 800bff4:	ed82 7b02 	vstr	d7, [r2, #8]
 800bff8:	e78a      	b.n	800bf10 <__kernel_rem_pio2+0x400>
 800bffa:	ed33 6b02 	vldmdb	r3!, {d6}
 800bffe:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c002:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c006:	e78b      	b.n	800bf20 <__kernel_rem_pio2+0x410>
 800c008:	eeb1 5b45 	vneg.f64	d5, d5
 800c00c:	eeb1 6b46 	vneg.f64	d6, d6
 800c010:	ed87 5b00 	vstr	d5, [r7]
 800c014:	eeb1 7b47 	vneg.f64	d7, d7
 800c018:	ed87 6b02 	vstr	d6, [r7, #8]
 800c01c:	e78d      	b.n	800bf3a <__kernel_rem_pio2+0x42a>
 800c01e:	bf00      	nop
 800c020:	00000000 	.word	0x00000000
 800c024:	41700000 	.word	0x41700000
 800c028:	00000000 	.word	0x00000000
 800c02c:	3e700000 	.word	0x3e700000
	...

0800c038 <scalbn>:
 800c038:	ee10 1a90 	vmov	r1, s1
 800c03c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c040:	b98b      	cbnz	r3, 800c066 <scalbn+0x2e>
 800c042:	ee10 3a10 	vmov	r3, s0
 800c046:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c04a:	4319      	orrs	r1, r3
 800c04c:	d00a      	beq.n	800c064 <scalbn+0x2c>
 800c04e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800c100 <scalbn+0xc8>
 800c052:	4b37      	ldr	r3, [pc, #220]	; (800c130 <scalbn+0xf8>)
 800c054:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c058:	4298      	cmp	r0, r3
 800c05a:	da0b      	bge.n	800c074 <scalbn+0x3c>
 800c05c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 800c108 <scalbn+0xd0>
 800c060:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c064:	4770      	bx	lr
 800c066:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d107      	bne.n	800c07e <scalbn+0x46>
 800c06e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800c072:	4770      	bx	lr
 800c074:	ee10 1a90 	vmov	r1, s1
 800c078:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c07c:	3b36      	subs	r3, #54	; 0x36
 800c07e:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c082:	4290      	cmp	r0, r2
 800c084:	dd0d      	ble.n	800c0a2 <scalbn+0x6a>
 800c086:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800c110 <scalbn+0xd8>
 800c08a:	ee10 3a90 	vmov	r3, s1
 800c08e:	eeb0 6b47 	vmov.f64	d6, d7
 800c092:	ed9f 5b21 	vldr	d5, [pc, #132]	; 800c118 <scalbn+0xe0>
 800c096:	2b00      	cmp	r3, #0
 800c098:	fe27 7b05 	vselge.f64	d7, d7, d5
 800c09c:	ee27 0b06 	vmul.f64	d0, d7, d6
 800c0a0:	4770      	bx	lr
 800c0a2:	4418      	add	r0, r3
 800c0a4:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800c0a8:	4298      	cmp	r0, r3
 800c0aa:	dcec      	bgt.n	800c086 <scalbn+0x4e>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	dd0a      	ble.n	800c0c6 <scalbn+0x8e>
 800c0b0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800c0b4:	ec53 2b10 	vmov	r2, r3, d0
 800c0b8:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800c0bc:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800c0c0:	ec43 2b10 	vmov	d0, r2, r3
 800c0c4:	4770      	bx	lr
 800c0c6:	f110 0f35 	cmn.w	r0, #53	; 0x35
 800c0ca:	da09      	bge.n	800c0e0 <scalbn+0xa8>
 800c0cc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800c108 <scalbn+0xd0>
 800c0d0:	ee10 3a90 	vmov	r3, s1
 800c0d4:	eeb0 6b47 	vmov.f64	d6, d7
 800c0d8:	ed9f 5b11 	vldr	d5, [pc, #68]	; 800c120 <scalbn+0xe8>
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	e7db      	b.n	800c098 <scalbn+0x60>
 800c0e0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800c0e4:	ec53 2b10 	vmov	r2, r3, d0
 800c0e8:	3036      	adds	r0, #54	; 0x36
 800c0ea:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800c0ee:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800c0f2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800c128 <scalbn+0xf0>
 800c0f6:	ec43 2b10 	vmov	d0, r2, r3
 800c0fa:	e7b1      	b.n	800c060 <scalbn+0x28>
 800c0fc:	f3af 8000 	nop.w
 800c100:	00000000 	.word	0x00000000
 800c104:	43500000 	.word	0x43500000
 800c108:	c2f8f359 	.word	0xc2f8f359
 800c10c:	01a56e1f 	.word	0x01a56e1f
 800c110:	8800759c 	.word	0x8800759c
 800c114:	7e37e43c 	.word	0x7e37e43c
 800c118:	8800759c 	.word	0x8800759c
 800c11c:	fe37e43c 	.word	0xfe37e43c
 800c120:	c2f8f359 	.word	0xc2f8f359
 800c124:	81a56e1f 	.word	0x81a56e1f
 800c128:	00000000 	.word	0x00000000
 800c12c:	3c900000 	.word	0x3c900000
 800c130:	ffff3cb0 	.word	0xffff3cb0
 800c134:	00000000 	.word	0x00000000

0800c138 <floor>:
 800c138:	ee10 1a90 	vmov	r1, s1
 800c13c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c140:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800c144:	2b13      	cmp	r3, #19
 800c146:	b530      	push	{r4, r5, lr}
 800c148:	ee10 0a10 	vmov	r0, s0
 800c14c:	ee10 5a10 	vmov	r5, s0
 800c150:	dc31      	bgt.n	800c1b6 <floor+0x7e>
 800c152:	2b00      	cmp	r3, #0
 800c154:	da15      	bge.n	800c182 <floor+0x4a>
 800c156:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800c218 <floor+0xe0>
 800c15a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c15e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c166:	dd07      	ble.n	800c178 <floor+0x40>
 800c168:	2900      	cmp	r1, #0
 800c16a:	da4e      	bge.n	800c20a <floor+0xd2>
 800c16c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c170:	4308      	orrs	r0, r1
 800c172:	d04d      	beq.n	800c210 <floor+0xd8>
 800c174:	492a      	ldr	r1, [pc, #168]	; (800c220 <floor+0xe8>)
 800c176:	2000      	movs	r0, #0
 800c178:	460b      	mov	r3, r1
 800c17a:	4602      	mov	r2, r0
 800c17c:	ec43 2b10 	vmov	d0, r2, r3
 800c180:	e020      	b.n	800c1c4 <floor+0x8c>
 800c182:	4a28      	ldr	r2, [pc, #160]	; (800c224 <floor+0xec>)
 800c184:	411a      	asrs	r2, r3
 800c186:	ea01 0402 	and.w	r4, r1, r2
 800c18a:	4304      	orrs	r4, r0
 800c18c:	d01a      	beq.n	800c1c4 <floor+0x8c>
 800c18e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800c218 <floor+0xe0>
 800c192:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c196:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c19e:	ddeb      	ble.n	800c178 <floor+0x40>
 800c1a0:	2900      	cmp	r1, #0
 800c1a2:	bfbe      	ittt	lt
 800c1a4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800c1a8:	fa40 f303 	asrlt.w	r3, r0, r3
 800c1ac:	18c9      	addlt	r1, r1, r3
 800c1ae:	ea21 0102 	bic.w	r1, r1, r2
 800c1b2:	2000      	movs	r0, #0
 800c1b4:	e7e0      	b.n	800c178 <floor+0x40>
 800c1b6:	2b33      	cmp	r3, #51	; 0x33
 800c1b8:	dd05      	ble.n	800c1c6 <floor+0x8e>
 800c1ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1be:	d101      	bne.n	800c1c4 <floor+0x8c>
 800c1c0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800c1c4:	bd30      	pop	{r4, r5, pc}
 800c1c6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800c1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ce:	40e2      	lsrs	r2, r4
 800c1d0:	4210      	tst	r0, r2
 800c1d2:	d0f7      	beq.n	800c1c4 <floor+0x8c>
 800c1d4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800c218 <floor+0xe0>
 800c1d8:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c1dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e4:	ddc8      	ble.n	800c178 <floor+0x40>
 800c1e6:	2900      	cmp	r1, #0
 800c1e8:	da02      	bge.n	800c1f0 <floor+0xb8>
 800c1ea:	2b14      	cmp	r3, #20
 800c1ec:	d103      	bne.n	800c1f6 <floor+0xbe>
 800c1ee:	3101      	adds	r1, #1
 800c1f0:	ea20 0002 	bic.w	r0, r0, r2
 800c1f4:	e7c0      	b.n	800c178 <floor+0x40>
 800c1f6:	2401      	movs	r4, #1
 800c1f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c1fc:	fa04 f303 	lsl.w	r3, r4, r3
 800c200:	4418      	add	r0, r3
 800c202:	4285      	cmp	r5, r0
 800c204:	bf88      	it	hi
 800c206:	1909      	addhi	r1, r1, r4
 800c208:	e7f2      	b.n	800c1f0 <floor+0xb8>
 800c20a:	2000      	movs	r0, #0
 800c20c:	4601      	mov	r1, r0
 800c20e:	e7b3      	b.n	800c178 <floor+0x40>
 800c210:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c214:	e7b0      	b.n	800c178 <floor+0x40>
 800c216:	bf00      	nop
 800c218:	8800759c 	.word	0x8800759c
 800c21c:	7e37e43c 	.word	0x7e37e43c
 800c220:	bff00000 	.word	0xbff00000
 800c224:	000fffff 	.word	0x000fffff

0800c228 <_init>:
 800c228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22a:	bf00      	nop
 800c22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c22e:	bc08      	pop	{r3}
 800c230:	469e      	mov	lr, r3
 800c232:	4770      	bx	lr

0800c234 <_fini>:
 800c234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c236:	bf00      	nop
 800c238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c23a:	bc08      	pop	{r3}
 800c23c:	469e      	mov	lr, r3
 800c23e:	4770      	bx	lr
